const Flags = WRAP_NATIVE("Flags");
const Stones = WRAP_NATIVE("Stones");
const setLoadingTip = ModAPI.requireGlobal("MCSystem.setLoadingTip");

setLoadingTip("Register textures");
var copyed = null;
let IconTransformator = {
  ARGBtoRGBA: function (colour) {
    r = (colour >> 16) & 0xFF
    g = (colour >> 8) & 0xFF
    b = colour & 0xFF
    a = (colour >> 24) & 0xFF;
        
    return (r & 0xFF) << 24 | (g & 0xFF) << 16 | (b & 0xFF) << 8 | (a & 0xFF);
  },
  RGBAtoARGB: function (colour) {
    r = (colour >> 24) & 0xFF
    g = (colour >> 16) & 0xFF
    b = (colour >> 8) & 0xFF
    a = colour & 0xFF;
        
    return  (a & 0xFF) << 24 | (r & 0xFF) << 16 | (g & 0xFF) << 8 | (b & 0xFF);
  },
  UV: {
    METALLIC: {
      name: "METALLIC",
      ORE: [{u: 4, v: 2}, {u: 12, v: 2}, {u: 13, v: 2}, {u: 7, v: 3}, {u: 8, v: 3}, {u: 5, v: 5}, {u: 6, v: 5}, {u: 10, v: 5}, {u: 11, v: 5}, {u: 3, v: 6}, {u: 4, v: 6}, {u: 5, v: 6}, {u: 6, v: 6}, {u: 7, v: 6}, {u: 10, v: 6}, {u: 11, v: 6}, {u: 1, v: 8}, {u: 2, v: 8}, {u: 8, v: 8}, {u: 9, v: 8}, {u: 7, v: 9}, {u: 8, v: 9}, {u: 9, v: 9}, {u: 10, v: 9}, {u: 4, v: 10}, {u: 11, v: 11}, {u: 12, v: 11}, {u: 8, v: 12}, {u: 9, v: 12}, {u: 10, v: 12}, {u: 11, v: 12}, {u: 12, v: 12}, {u: 13, v: 12}, {u: 3, v: 13}, {u: 4, v: 13}, {u: 9, v: 13}, {u: 10, v: 13}],
      SMALL_ORE: [{u: 7, v: 2}, {u: 8, v: 2}, {u: 3, v: 3}, {u: 4, v: 3}, {u: 5, v: 3}, {u: 6, v: 3}, {u: 7, v: 3}, {u: 11, v: 3}, {u: 12, v: 3}, {u: 13, v: 3}, {u: 10, v: 6}, {u: 11, v: 6}, {u: 12, v: 6}, {u: 13, v: 6}, {u: 1, v: 7}, {u: 2, v: 7}, {u: 3, v: 7}, {u: 4, v: 7}, {u: 8, v: 7}, {u: 9, v: 7}, {u: 10, v: 7}, {u: 13, v: 7}, {u: 14, v: 7}, {u: 4, v: 8}, {u: 5, v: 8}, {u: 10, v: 10}, {u: 11, v: 10}, {u: 12, v: 10}, {u: 13, v: 10}, {u: 13, v: 11},  {u: 14, v: 11}, {u: 2, v: 12}, {u: 3, v: 12},  {u: 4, v: 12}, {u: 4, v: 13}, {u: 5, v: 13}, {u: 6, v: 13},  {u: 7, v: 13}, {u: 8, v: 13}, {u: 9, v: 13}, {u: 7, v: 14},  {u: 8, v: 14}]
    },
    FLUID: {
      name: "FLUID",
      ORE: [{u: 4, v: 2}, {u: 12, v: 2}, {u: 13, v: 2}, {u: 7, v: 3}, {u: 8, v: 3}, {u: 5, v: 5}, {u: 6, v: 5}, {u: 10, v: 5}, {u: 11, v: 5}, {u: 3, v: 6}, {u: 4, v: 6}, {u: 5, v: 6}, {u: 6, v: 6}, {u: 7, v: 6}, {u: 10, v: 6}, {u: 11, v: 6}, {u: 1, v: 8}, {u: 2, v: 8}, {u: 8, v: 8}, {u: 9, v: 8}, {u: 7, v: 9}, {u: 8, v: 9}, {u: 9, v: 9}, {u: 10, v: 9}, {u: 4, v: 10}, {u: 11, v: 11}, {u: 12, v: 11}, {u: 8, v: 12}, {u: 9, v: 12}, {u: 10, v: 12}, {u: 11, v: 12}, {u: 12, v: 12}, {u: 13, v: 12}, {u: 3, v: 13}, {u: 4, v: 13}, {u: 9, v: 13}, {u: 10, v: 13}],
      SMALL_ORE: [{u: 7, v: 2}, {u: 8, v: 2}, {u: 3, v: 3}, {u: 4, v: 3}, {u: 5, v: 3}, {u: 6, v: 3}, {u: 7, v: 3}, {u: 11, v: 3}, {u: 12, v: 3}, {u: 13, v: 3}, {u: 10, v: 6}, {u: 11, v: 6}, {u: 12, v: 6}, {u: 13, v: 6}, {u: 1, v: 7}, {u: 2, v: 7}, {u: 3, v: 7}, {u: 4, v: 7}, {u: 8, v: 7}, {u: 9, v: 7}, {u: 10, v: 7}, {u: 13, v: 7}, {u: 14, v: 7}, {u: 4, v: 8}, {u: 5, v: 8}, {u: 10, v: 10}, {u: 11, v: 10}, {u: 12, v: 10}, {u: 13, v: 10}, {u: 13, v: 11},  {u: 14, v: 11}, {u: 2, v: 12}, {u: 3, v: 12},  {u: 4, v: 12}, {u: 4, v: 13}, {u: 5, v: 13}, {u: 6, v: 13},  {u: 7, v: 13}, {u: 8, v: 13}, {u: 9, v: 13}, {u: 7, v: 14},  {u: 8, v: 14}]
    },
    GAS: {
      name: "GAS",
      ORE: [{u: 4, v: 2}, {u: 12, v: 2}, {u: 13, v: 2}, {u: 7, v: 3}, {u: 8, v: 3}, {u: 5, v: 5}, {u: 6, v: 5}, {u: 10, v: 5}, {u: 11, v: 5}, {u: 3, v: 6}, {u: 4, v: 6}, {u: 5, v: 6}, {u: 6, v: 6}, {u: 7, v: 6}, {u: 10, v: 6}, {u: 11, v: 6}, {u: 1, v: 8}, {u: 2, v: 8}, {u: 8, v: 8}, {u: 9, v: 8}, {u: 7, v: 9}, {u: 8, v: 9}, {u: 9, v: 9}, {u: 10, v: 9}, {u: 4, v: 10}, {u: 11, v: 11}, {u: 12, v: 11}, {u: 8, v: 12}, {u: 9, v: 12}, {u: 10, v: 12}, {u: 11, v: 12}, {u: 12, v: 12}, {u: 13, v: 12}, {u: 3, v: 13}, {u: 4, v: 13}, {u: 9, v: 13}, {u: 10, v: 13}],
      SMALL_ORE: [{u: 7, v: 2}, {u: 8, v: 2}, {u: 3, v: 3}, {u: 4, v: 3}, {u: 5, v: 3}, {u: 6, v: 3}, {u: 7, v: 3}, {u: 11, v: 3}, {u: 12, v: 3}, {u: 13, v: 3}, {u: 10, v: 6}, {u: 11, v: 6}, {u: 12, v: 6}, {u: 13, v: 6}, {u: 1, v: 7}, {u: 2, v: 7}, {u: 3, v: 7}, {u: 4, v: 7}, {u: 8, v: 7}, {u: 9, v: 7}, {u: 10, v: 7}, {u: 13, v: 7}, {u: 14, v: 7}, {u: 4, v: 8}, {u: 5, v: 8}, {u: 10, v: 10}, {u: 11, v: 10}, {u: 12, v: 10}, {u: 13, v: 10}, {u: 13, v: 11},  {u: 14, v: 11}, {u: 2, v: 12}, {u: 3, v: 12},  {u: 4, v: 12}, {u: 4, v: 13}, {u: 5, v: 13}, {u: 6, v: 13},  {u: 7, v: 13}, {u: 8, v: 13}, {u: 9, v: 13}, {u: 7, v: 14},  {u: 8, v: 14}]
    },
     SAND: {
      name: "SAND",
      ORE: [{u: 0, v: 0}, {u: 1, v: 0}, {u: 14, v: 0}, {u: 15, v: 0}, {u: 0, v: 1}, {u: 8, v: 1}, {u: 9, v: 1}, {u: 14, v: 1}, {u: 15, v: 1}, {u: 6, v: 2}, {u: 7, v: 2}, {u: 8, v: 2}, {u: 9, v: 2}, {u: 14, v: 2}, {u: 5, v: 3}, {u: 6, v: 3}, {u: 7, v: 3}, {u: 8, v: 3}, {u: 4, v: 4}, {u: 5, v: 4}, {u: 6, v: 4}, {u: 10, v: 4}, {u: 11, v: 4}, {u: 2, v: 5}, {u: 3, v: 5}, {u: 4, v: 5}, {u: 8, v: 5}, {u: 9, v: 5}, {u: 10, v: 5}, {u: 11, v: 5}, {u: 2, v: 6}, {u: 3, v: 6}, {u: 7, v: 6}, {u: 8, v: 6}, {u: 9, v: 6}, {u: 10, v: 6}, {u: 14, v: 6}, {u: 2, v: 7}, {u: 5, v: 7}, {u: 6, v: 7}, {u: 7, v: 7}, {u: 8, v: 7}, {u: 13, v: 7}, {u: 14, v: 7}, {u: 5, v: 8}, {u: 6, v: 8}, {u: 7, v: 8}, {u: 12, v: 8}, {u: 13, v: 8}, {u: 14, v: 8}, {u: 4, v: 9}, {u: 5, v: 9}, {u: 6, v: 9}, {u: 11, v: 9}, {u: 12, v: 9}, {u: 13, v: 9}, {u: 3, v: 10}, {u: 4, v: 10}, {u: 9, v: 10}, {u: 12, v: 10}, {u: 2, v: 11}, {u: 3, v: 11}, {u: 4, v: 11}, {u: 8, v: 11}, {u: 9, v: 11}, {u: 7, v: 12}, {u: 8, v: 12}, {u: 12, v: 12}, {u: 13, v: 12}, {u: 6, v: 13}, {u: 7, v: 13}, {u: 11, v: 13}, {u: 12, v: 13}, {u: 1, v: 14}, {u: 0, v: 15}, {u: 1, v: 15}, {u: 15, v: 15}],
      SMALL_ORE: [{u: 7, v: 2}, {u: 8, v: 2}, {u: 3, v: 3}, {u: 4, v: 3}, {u: 5, v: 3}, {u: 6, v: 3}, {u: 7, v: 3}, {u: 11, v: 3}, {u: 12, v: 3}, {u: 13, v: 3}, {u: 10, v: 6}, {u: 11, v: 6}, {u: 12, v: 6}, {u: 13, v: 6}, {u: 1, v: 7}, {u: 2, v: 7}, {u: 3, v: 7}, {u: 4, v: 7}, {u: 8, v: 7}, {u: 9, v: 7}, {u: 10, v: 7}, {u: 13, v: 7}, {u: 14, v: 7}, {u: 4, v: 8}, {u: 5, v: 8}, {u: 10, v: 10}, {u: 11, v: 10}, {u: 12, v: 10}, {u: 13, v: 10}, {u: 13, v: 11},  {u: 14, v: 11}, {u: 2, v: 12}, {u: 3, v: 12},  {u: 4, v: 12}, {u: 4, v: 13}, {u: 5, v: 13}, {u: 6, v: 13},  {u: 7, v: 13}, {u: 8, v: 13}, {u: 9, v: 13}, {u: 7, v: 14},  {u: 8, v: 14}]
    },
    SHINY: {
      name: "SHINY",
      ORE: [{u: 4, v: 2}, {u: 12, v: 2}, {u: 13, v: 2}, {u: 7, v: 3}, {u: 8, v: 3}, {u: 5, v: 5}, {u: 6, v: 5}, {u: 10, v: 5}, {u: 11, v: 5}, {u: 3, v: 6}, {u: 4, v: 6}, {u: 5, v: 6}, {u: 6, v: 6}, {u: 7, v: 6}, {u: 10, v: 6}, {u: 11, v: 6}, {u: 1, v: 8}, {u: 2, v: 8}, {u: 8, v: 8}, {u: 9, v: 8}, {u: 7, v: 9}, {u: 8, v: 9}, {u: 9, v: 9}, {u: 10, v: 9}, {u: 4, v: 10}, {u: 11, v: 11}, {u: 12, v: 11}, {u: 8, v: 12}, {u: 9, v: 12}, {u: 10, v: 12}, {u: 11, v: 12}, {u: 12, v: 12}, {u: 13, v: 12}, {u: 3, v: 13}, {u: 4, v: 13}, {u: 9, v: 13}, {u: 10, v: 13}],
      SMALL_ORE: [{u: 7, v: 2}, {u: 8, v: 2}, {u: 3, v: 3}, {u: 4, v: 3}, {u: 5, v: 3}, {u: 6, v: 3}, {u: 7, v: 3}, {u: 11, v: 3}, {u: 12, v: 3}, {u: 13, v: 3}, {u: 10, v: 6}, {u: 11, v: 6}, {u: 12, v: 6}, {u: 13, v: 6}, {u: 1, v: 7}, {u: 2, v: 7}, {u: 3, v: 7}, {u: 4, v: 7}, {u: 8, v: 7}, {u: 9, v: 7}, {u: 10, v: 7}, {u: 13, v: 7}, {u: 14, v: 7}, {u: 4, v: 8}, {u: 5, v: 8}, {u: 10, v: 10}, {u: 11, v: 10}, {u: 12, v: 10}, {u: 13, v: 10}, {u: 13, v: 11},  {u: 14, v: 11}, {u: 2, v: 12}, {u: 3, v: 12},  {u: 4, v: 12}, {u: 4, v: 13}, {u: 5, v: 13}, {u: 6, v: 13},  {u: 7, v: 13}, {u: 8, v: 13}, {u: 9, v: 13}, {u: 7, v: 14},  {u: 8, v: 14}]
    },
    ROUGH: {
      name: "ROUGH",
      ORE: [{u: 4, v: 2}, {u: 12, v: 2}, {u: 13, v: 2}, {u: 7, v: 3}, {u: 8, v: 3}, {u: 5, v: 5}, {u: 6, v: 5}, {u: 10, v: 5}, {u: 11, v: 5}, {u: 3, v: 6}, {u: 4, v: 6}, {u: 5, v: 6}, {u: 6, v: 6}, {u: 7, v: 6}, {u: 10, v: 6}, {u: 11, v: 6}, {u: 1, v: 8}, {u: 2, v: 8}, {u: 8, v: 8}, {u: 9, v: 8}, {u: 7, v: 9}, {u: 8, v: 9}, {u: 9, v: 9}, {u: 10, v: 9}, {u: 4, v: 10}, {u: 11, v: 11}, {u: 12, v: 11}, {u: 8, v: 12}, {u: 9, v: 12}, {u: 10, v: 12}, {u: 11, v: 12}, {u: 12, v: 12}, {u: 13, v: 12}, {u: 3, v: 13}, {u: 4, v: 13}, {u: 9, v: 13}, {u: 10, v: 13}],
      SMALL_ORE: [{u: 7, v: 2}, {u: 8, v: 2}, {u: 3, v: 3}, {u: 4, v: 3}, {u: 5, v: 3}, {u: 6, v: 3}, {u: 7, v: 3}, {u: 11, v: 3}, {u: 12, v: 3}, {u: 13, v: 3}, {u: 10, v: 6}, {u: 11, v: 6}, {u: 12, v: 6}, {u: 13, v: 6}, {u: 1, v: 7}, {u: 2, v: 7}, {u: 3, v: 7}, {u: 4, v: 7}, {u: 8, v: 7}, {u: 9, v: 7}, {u: 10, v: 7}, {u: 13, v: 7}, {u: 14, v: 7}, {u: 4, v: 8}, {u: 5, v: 8}, {u: 10, v: 10}, {u: 11, v: 10}, {u: 12, v: 10}, {u: 13, v: 10}, {u: 13, v: 11},  {u: 14, v: 11}, {u: 2, v: 12}, {u: 3, v: 12},  {u: 4, v: 12}, {u: 4, v: 13}, {u: 5, v: 13}, {u: 6, v: 13},  {u: 7, v: 13}, {u: 8, v: 13}, {u: 9, v: 13}, {u: 7, v: 14},  {u: 8, v: 14}]
    },
    DULL: {
      name: "DULL",
      ORE: [{u: 4, v: 2}, {u: 12, v: 2}, {u: 13, v: 2}, {u: 7, v: 3}, {u: 8, v: 3}, {u: 5, v: 5}, {u: 6, v: 5}, {u: 10, v: 5}, {u: 11, v: 5}, {u: 3, v: 6}, {u: 4, v: 6}, {u: 5, v: 6}, {u: 6, v: 6}, {u: 7, v: 6}, {u: 10, v: 6}, {u: 11, v: 6}, {u: 1, v: 8}, {u: 2, v: 8}, {u: 8, v: 8}, {u: 9, v: 8}, {u: 7, v: 9}, {u: 8, v: 9}, {u: 9, v: 9}, {u: 10, v: 9}, {u: 4, v: 10}, {u: 11, v: 11}, {u: 12, v: 11}, {u: 8, v: 12}, {u: 9, v: 12}, {u: 10, v: 12}, {u: 11, v: 12}, {u: 12, v: 12}, {u: 13, v: 12}, {u: 3, v: 13}, {u: 4, v: 13}, {u: 9, v: 13}, {u: 10, v: 13}],
      SMALL_ORE: [{u: 7, v: 2}, {u: 8, v: 2}, {u: 3, v: 3}, {u: 4, v: 3}, {u: 5, v: 3}, {u: 6, v: 3}, {u: 7, v: 3}, {u: 11, v: 3}, {u: 12, v: 3}, {u: 13, v: 3}, {u: 10, v: 6}, {u: 11, v: 6}, {u: 12, v: 6}, {u: 13, v: 6}, {u: 1, v: 7}, {u: 2, v: 7}, {u: 3, v: 7}, {u: 4, v: 7}, {u: 8, v: 7}, {u: 9, v: 7}, {u: 10, v: 7}, {u: 13, v: 7}, {u: 14, v: 7}, {u: 4, v: 8}, {u: 5, v: 8}, {u: 10, v: 10}, {u: 11, v: 10}, {u: 12, v: 10}, {u: 13, v: 10}, {u: 13, v: 11},  {u: 14, v: 11}, {u: 2, v: 12}, {u: 3, v: 12},  {u: 4, v: 12}, {u: 4, v: 13}, {u: 5, v: 13}, {u: 6, v: 13},  {u: 7, v: 13}, {u: 8, v: 13}, {u: 9, v: 13}, {u: 7, v: 14},  {u: 8, v: 14}]
    },
    
    
    
FINE: {
      name: "FINE",
      ORE: [{u: 0, v: 0}, {u: 1, v: 0}, {u: 14, v: 0}, {u: 15, v: 0}, {u: 0, v: 1}, {u: 8, v: 1}, {u: 9, v: 1}, {u: 14, v: 1}, {u: 15, v: 1}, {u: 6, v: 2}, {u: 7, v: 2}, {u: 8, v: 2}, {u: 9, v: 2}, {u: 14, v: 2}, {u: 5, v: 3}, {u: 6, v: 3}, {u: 7, v: 3}, {u: 8, v: 3}, {u: 4, v: 4}, {u: 5, v: 4}, {u: 6, v: 4}, {u: 10, v: 4}, {u: 11, v: 4}, {u: 2, v: 5}, {u: 3, v: 5}, {u: 4, v: 5}, {u: 8, v: 5}, {u: 9, v: 5}, {u: 10, v: 5}, {u: 11, v: 5}, {u: 2, v: 6}, {u: 3, v: 6}, {u: 7, v: 6}, {u: 8, v: 6}, {u: 9, v: 6}, {u: 10, v: 6}, {u: 14, v: 6}, {u: 2, v: 7}, {u: 5, v: 7}, {u: 6, v: 7}, {u: 7, v: 7}, {u: 8, v: 7}, {u: 13, v: 7}, {u: 14, v: 7}, {u: 5, v: 8}, {u: 6, v: 8}, {u: 7, v: 8}, {u: 12, v: 8}, {u: 13, v: 8}, {u: 14, v: 8}, {u: 4, v: 9}, {u: 5, v: 9}, {u: 6, v: 9}, {u: 11, v: 9}, {u: 12, v: 9}, {u: 13, v: 9}, {u: 3, v: 10}, {u: 4, v: 10}, {u: 9, v: 10}, {u: 12, v: 10}, {u: 2, v: 11}, {u: 3, v: 11}, {u: 4, v: 11}, {u: 8, v: 11}, {u: 9, v: 11}, {u: 7, v: 12}, {u: 8, v: 12}, {u: 12, v: 12}, {u: 13, v: 12}, {u: 6, v: 13}, {u: 7, v: 13}, {u: 11, v: 13}, {u: 12, v: 13}, {u: 1, v: 14}, {u: 0, v: 15}, {u: 1, v: 15}, {u: 15, v: 15}],
      SMALL_ORE: [{u: 7, v: 2}, {u: 8, v: 2}, {u: 3, v: 3}, {u: 4, v: 3}, {u: 5, v: 3}, {u: 6, v: 3}, {u: 7, v: 3}, {u: 11, v: 3}, {u: 12, v: 3}, {u: 13, v: 3}, {u: 10, v: 6}, {u: 11, v: 6}, {u: 12, v: 6}, {u: 13, v: 6}, {u: 1, v: 7}, {u: 2, v: 7}, {u: 3, v: 7}, {u: 4, v: 7}, {u: 8, v: 7}, {u: 9, v: 7}, {u: 10, v: 7}, {u: 13, v: 7}, {u: 14, v: 7}, {u: 4, v: 8}, {u: 5, v: 8}, {u: 10, v: 10}, {u: 11, v: 10}, {u: 12, v: 10}, {u: 13, v: 10}, {u: 13, v: 11},  {u: 14, v: 11}, {u: 2, v: 12}, {u: 3, v: 12},  {u: 4, v: 12}, {u: 4, v: 13}, {u: 5, v: 13}, {u: 6, v: 13},  {u: 7, v: 13}, {u: 8, v: 13}, {u: 9, v: 13}, {u: 7, v: 14},  {u: 8, v: 14}]
    },
LIGNITE: {
      name: "LIGNITE",
      ORE: [{u: 0, v: 0}, {u: 1, v: 0}, {u: 14, v: 0}, {u: 15, v: 0}, {u: 0, v: 1}, {u: 8, v: 1}, {u: 9, v: 1}, {u: 14, v: 1}, {u: 15, v: 1}, {u: 6, v: 2}, {u: 7, v: 2}, {u: 8, v: 2}, {u: 9, v: 2}, {u: 14, v: 2}, {u: 5, v: 3}, {u: 6, v: 3}, {u: 7, v: 3}, {u: 8, v: 3}, {u: 4, v: 4}, {u: 5, v: 4}, {u: 6, v: 4}, {u: 10, v: 4}, {u: 11, v: 4}, {u: 2, v: 5}, {u: 3, v: 5}, {u: 4, v: 5}, {u: 8, v: 5}, {u: 9, v: 5}, {u: 10, v: 5}, {u: 11, v: 5}, {u: 2, v: 6}, {u: 3, v: 6}, {u: 7, v: 6}, {u: 8, v: 6}, {u: 9, v: 6}, {u: 10, v: 6}, {u: 14, v: 6}, {u: 2, v: 7}, {u: 5, v: 7}, {u: 6, v: 7}, {u: 7, v: 7}, {u: 8, v: 7}, {u: 13, v: 7}, {u: 14, v: 7}, {u: 5, v: 8}, {u: 6, v: 8}, {u: 7, v: 8}, {u: 12, v: 8}, {u: 13, v: 8}, {u: 14, v: 8}, {u: 4, v: 9}, {u: 5, v: 9}, {u: 6, v: 9}, {u: 11, v: 9}, {u: 12, v: 9}, {u: 13, v: 9}, {u: 3, v: 10}, {u: 4, v: 10}, {u: 9, v: 10}, {u: 12, v: 10}, {u: 2, v: 11}, {u: 3, v: 11}, {u: 4, v: 11}, {u: 8, v: 11}, {u: 9, v: 11}, {u: 7, v: 12}, {u: 8, v: 12}, {u: 12, v: 12}, {u: 13, v: 12}, {u: 6, v: 13}, {u: 7, v: 13}, {u: 11, v: 13}, {u: 12, v: 13}, {u: 1, v: 14}, {u: 0, v: 15}, {u: 1, v: 15}, {u: 15, v: 15}],
      SMALL_ORE: [{u: 7, v: 2}, {u: 8, v: 2}, {u: 3, v: 3}, {u: 4, v: 3}, {u: 5, v: 3}, {u: 6, v: 3}, {u: 7, v: 3}, {u: 11, v: 3}, {u: 12, v: 3}, {u: 13, v: 3}, {u: 10, v: 6}, {u: 11, v: 6}, {u: 12, v: 6}, {u: 13, v: 6}, {u: 1, v: 7}, {u: 2, v: 7}, {u: 3, v: 7}, {u: 4, v: 7}, {u: 8, v: 7}, {u: 9, v: 7}, {u: 10, v: 7}, {u: 13, v: 7}, {u: 14, v: 7}, {u: 4, v: 8}, {u: 5, v: 8}, {u: 10, v: 10}, {u: 11, v: 10}, {u: 12, v: 10}, {u: 13, v: 10}, {u: 13, v: 11},  {u: 14, v: 11}, {u: 2, v: 12}, {u: 3, v: 12},  {u: 4, v: 12}, {u: 4, v: 13}, {u: 5, v: 13}, {u: 6, v: 13},  {u: 7, v: 13}, {u: 8, v: 13}, {u: 9, v: 13}, {u: 7, v: 14},  {u: 8, v: 14}]
    },
    QUARTZ: {
      name: "QUARTZ",
      ORE: [{u: 0, v: 0}, {u: 1, v: 0}, {u: 14, v: 0}, {u: 15, v: 0}, {u: 0, v: 1}, {u: 8, v: 1}, {u: 9, v: 1}, {u: 14, v: 1}, {u: 15, v: 1}, {u: 6, v: 2}, {u: 7, v: 2}, {u: 8, v: 2}, {u: 9, v: 2}, {u: 14, v: 2}, {u: 5, v: 3}, {u: 6, v: 3}, {u: 7, v: 3}, {u: 8, v: 3}, {u: 4, v: 4}, {u: 5, v: 4}, {u: 6, v: 4}, {u: 10, v: 4}, {u: 11, v: 4}, {u: 2, v: 5}, {u: 3, v: 5}, {u: 4, v: 5}, {u: 8, v: 5}, {u: 9, v: 5}, {u: 10, v: 5}, {u: 11, v: 5}, {u: 2, v: 6}, {u: 3, v: 6}, {u: 7, v: 6}, {u: 8, v: 6}, {u: 9, v: 6}, {u: 10, v: 6}, {u: 14, v: 6}, {u: 2, v: 7}, {u: 5, v: 7}, {u: 6, v: 7}, {u: 7, v: 7}, {u: 8, v: 7}, {u: 13, v: 7}, {u: 14, v: 7}, {u: 5, v: 8}, {u: 6, v: 8}, {u: 7, v: 8}, {u: 12, v: 8}, {u: 13, v: 8}, {u: 14, v: 8}, {u: 4, v: 9}, {u: 5, v: 9}, {u: 6, v: 9}, {u: 11, v: 9}, {u: 12, v: 9}, {u: 13, v: 9}, {u: 3, v: 10}, {u: 4, v: 10}, {u: 9, v: 10}, {u: 12, v: 10}, {u: 2, v: 11}, {u: 3, v: 11}, {u: 4, v: 11}, {u: 8, v: 11}, {u: 9, v: 11}, {u: 7, v: 12}, {u: 8, v: 12}, {u: 12, v: 12}, {u: 13, v: 12}, {u: 6, v: 13}, {u: 7, v: 13}, {u: 11, v: 13}, {u: 12, v: 13}, {u: 1, v: 14}, {u: 0, v: 15}, {u: 1, v: 15}, {u: 15, v: 15}],
      SMALL_ORE: [{u: 7, v: 2}, {u: 8, v: 2}, {u: 3, v: 3}, {u: 4, v: 3}, {u: 5, v: 3}, {u: 6, v: 3}, {u: 7, v: 3}, {u: 11, v: 3}, {u: 12, v: 3}, {u: 13, v: 3}, {u: 10, v: 6}, {u: 11, v: 6}, {u: 12, v: 6}, {u: 13, v: 6}, {u: 1, v: 7}, {u: 2, v: 7}, {u: 3, v: 7}, {u: 4, v: 7}, {u: 8, v: 7}, {u: 9, v: 7}, {u: 10, v: 7}, {u: 13, v: 7}, {u: 14, v: 7}, {u: 4, v: 8}, {u: 5, v: 8}, {u: 10, v: 10}, {u: 11, v: 10}, {u: 12, v: 10}, {u: 13, v: 10}, {u: 13, v: 11},  {u: 14, v: 11}, {u: 2, v: 12}, {u: 3, v: 12},  {u: 4, v: 12}, {u: 4, v: 13}, {u: 5, v: 13}, {u: 6, v: 13},  {u: 7, v: 13}, {u: 8, v: 13}, {u: 9, v: 13}, {u: 7, v: 14},  {u: 8, v: 14}]
    },
    
    
    
    LAPIS: {
      name: "LAPIS",
      ORE: [{u: 2, v: 2}, {u:5, v: 2}, {u:12, v: 2}, {u: 13, v: 2}, {u: 5, v: 3}, {u: 7, v: 3}, {u: 8, v: 3}, {u: 6, v: 5}, {u: 10, v: 5}, {u: 3, v: 6}, {u: 4, v: 6}, {u: 6, v: 6}, {u: 7, v: 6}, {u: 10, v: 6}, {u: 11, v: 6}, {u: 1, v: 7}, {u: 2, v: 7}, {u: 1, v: 8}, {u: 2, v: 8}, {u: 7, v: 8}, {u: 9, v: 8}, {u: 10, v: 8}, {u: 11, v: 8},  {u: 7, v: 9}, {u: 8, v: 9}, {u: 9, v: 9}, {u: 10, v: 9}, {u: 11, v: 9}, {u: 13, v: 9}, {u: 4, v: 10}, {u: 8, v: 10}, {u: 9, v: 10} , {u: 10, v: 10}, {u: 13, v: 10}, {u: 2, v: 11}, {u: 3, v: 11}, {u: 4, v: 11}, {u: 2, v: 7}, {u: 13, v: 11}, {u: 8, v: 12}, {u: 9, v: 12}, {u: 10, v: 12}, {u: 13, v: 12}, {u: 4, v: 13}, {u: 1, v: 7}, {u: 2, v: 7}, {u: 9, v: 13}, {u: 10, v: 13}, {u: 4, v: 14}, {u: 5, v: 14}, {u: 6, v: 14}],
      SMALL_ORE: [{u: 7, v: 2}, {u: 8, v: 2}, {u: 3, v: 3}, {u: 4, v: 3}, {u: 5, v: 3}, {u: 6, v: 3}, {u: 7, v: 3}, {u: 11, v: 3}, {u: 12, v: 3}, {u: 13, v: 3}, {u: 10, v: 6}, {u: 11, v: 6}, {u: 12, v: 6}, {u: 13, v: 6}, {u: 1, v: 7}, {u: 2, v: 7}, {u: 3, v: 7}, {u: 4, v: 7}, {u: 8, v: 7}, {u: 9, v: 7}, {u: 10, v: 7}, {u: 13, v: 7}, {u: 14, v: 7}, {u: 4, v: 8}, {u: 5, v: 8}, {u: 10, v: 10}, {u: 11, v: 10}, {u: 12, v: 10}, {u: 13, v: 10}, {u: 13, v: 11},  {u: 14, v: 11}, {u: 2, v: 12}, {u: 3, v: 12},  {u: 4, v: 12}, {u: 4, v: 13}, {u: 5, v: 13}, {u: 6, v: 13},  {u: 7, v: 13}, {u: 8, v: 13}, {u: 9, v: 13}, {u: 7, v: 14},  {u: 8, v: 14}]
    },
    FLINT: {
      name: "FLINT",
      ORE: [{u: 2, v: 2}, {u:5, v: 2}, {u:12, v: 2}, {u: 13, v: 2}, {u: 5, v: 3}, {u: 7, v: 3}, {u: 8, v: 3}, {u: 6, v: 5}, {u: 10, v: 5}, {u: 3, v: 6}, {u: 4, v: 6}, {u: 6, v: 6}, {u: 7, v: 6}, {u: 10, v: 6}, {u: 11, v: 6}, {u: 1, v: 7}, {u: 2, v: 7}, {u: 1, v: 8}, {u: 2, v: 8}, {u: 7, v: 8}, {u: 9, v: 8}, {u: 10, v: 8}, {u: 11, v: 8},  {u: 7, v: 9}, {u: 8, v: 9}, {u: 9, v: 9}, {u: 10, v: 9}, {u: 11, v: 9}, {u: 13, v: 9}, {u: 4, v: 10}, {u: 8, v: 10}, {u: 9, v: 10} , {u: 10, v: 10}, {u: 13, v: 10}, {u: 2, v: 11}, {u: 3, v: 11}, {u: 4, v: 11}, {u: 2, v: 7}, {u: 13, v: 11}, {u: 8, v: 12}, {u: 9, v: 12}, {u: 10, v: 12}, {u: 13, v: 12}, {u: 4, v: 13}, {u: 1, v: 7}, {u: 2, v: 7}, {u: 9, v: 13}, {u: 10, v: 13}, {u: 4, v: 14}, {u: 5, v: 14}, {u: 6, v: 14}],
      SMALL_ORE: [{u: 7, v: 2}, {u: 8, v: 2}, {u: 3, v: 3}, {u: 4, v: 3}, {u: 5, v: 3}, {u: 6, v: 3}, {u: 7, v: 3}, {u: 11, v: 3}, {u: 12, v: 3}, {u: 13, v: 3}, {u: 10, v: 6}, {u: 11, v: 6}, {u: 12, v: 6}, {u: 13, v: 6}, {u: 1, v: 7}, {u: 2, v: 7}, {u: 3, v: 7}, {u: 4, v: 7}, {u: 8, v: 7}, {u: 9, v: 7}, {u: 10, v: 7}, {u: 13, v: 7}, {u: 14, v: 7}, {u: 4, v: 8}, {u: 5, v: 8}, {u: 10, v: 10}, {u: 11, v: 10}, {u: 12, v: 10}, {u: 13, v: 10}, {u: 13, v: 11},  {u: 14, v: 11}, {u: 2, v: 12}, {u: 3, v: 12},  {u: 4, v: 12}, {u: 4, v: 13}, {u: 5, v: 13}, {u: 6, v: 13},  {u: 7, v: 13}, {u: 8, v: 13}, {u: 9, v: 13}, {u: 7, v: 14},  {u: 8, v: 14}]
    },
    
    NETHERSTAR: {
      name: "NETHERSTAR",
      ORE: [{u: 6, v: 1}, {u: 7, v: 1}, {u: 6, v: 2}, {u: 7, v: 2}, {u: 12, v: 3}, {u: 13, v: 3}, {u: 4, v: 4}, {u: 5, v: 4}, {u: 12, v: 4}, {u: 13, v: 4}, {u: 4, v: 5}, {u: 5, v: 5}, {u: 6, v: 5}, {u: 7, v: 5}, {u: 6, v: 6}, {u: 7, v: 6}, {u: 6, v: 8}, {u: 7, v: 8}, {u: 6, v: 9}, {u: 7, v: 9}, {u: 10, v: 9}, {u: 11, v: 9}, {u: 10, v: 10}, {u: 11, v: 10}, {u: 13, v: 10}, {u: 14, v: 10}, {u: 7, v: 11}, {u: 8, v: 11}, {u: 13, v: 11}, {u: 14, v: 11}, {u: 7, v: 12}, {u: 8, v: 12}, {u: 1, v: 13}, {u: 2, v: 13}, {u: 1, v: 14}, {u: 2, v: 14}],
      SMALL_ORE: [{u: 7, v: 2}, {u: 8, v: 2}, {u: 3, v: 3}, {u: 4, v: 3}, {u: 5, v: 3}, {u: 6, v: 3}, {u: 7, v: 3}, {u: 11, v: 3}, {u: 12, v: 3}, {u: 13, v: 3}, {u: 10, v: 6}, {u: 11, v: 6}, {u: 12, v: 6}, {u: 13, v: 6}, {u: 1, v: 7}, {u: 2, v: 7}, {u: 3, v: 7}, {u: 4, v: 7}, {u: 8, v: 7}, {u: 9, v: 7}, {u: 10, v: 7}, {u: 13, v: 7}, {u: 14, v: 7}, {u: 4, v: 8}, {u: 5, v: 8}, {u: 10, v: 10}, {u: 11, v: 10}, {u: 12, v: 10}, {u: 13, v: 10}, {u: 13, v: 11},  {u: 14, v: 11}, {u: 2, v: 12}, {u: 3, v: 12},  {u: 4, v: 12}, {u: 4, v: 13}, {u: 5, v: 13}, {u: 6, v: 13},  {u: 7, v: 13}, {u: 8, v: 13}, {u: 9, v: 13}, {u: 7, v: 14},  {u: 8, v: 14}]
    },
    
    GEM_HORIZONTAL: {
      name: "GEM_HORIZONTAL",
      ORE: [{u: 6, v: 1}, {u: 7, v: 1}, {u: 6, v: 2}, {u: 7, v: 2}, {u: 12, v: 3}, {u: 13, v: 3}, {u: 4, v: 4}, {u: 5, v: 4}, {u: 12, v: 4}, {u: 13, v: 4}, {u: 4, v: 5}, {u: 5, v: 5}, {u: 6, v: 5}, {u: 7, v: 5}, {u: 6, v: 6}, {u: 7, v: 6}, {u: 6, v: 8}, {u: 7, v: 8}, {u: 6, v: 9}, {u: 7, v: 9}, {u: 10, v: 9}, {u: 11, v: 9}, {u: 10, v: 10}, {u: 11, v: 10}, {u: 13, v: 10}, {u: 14, v: 10}, {u: 7, v: 11}, {u: 8, v: 11}, {u: 13, v: 11}, {u: 14, v: 11}, {u: 7, v: 12}, {u: 8, v: 12}, {u: 1, v: 13}, {u: 2, v: 13}, {u: 1, v: 14}, {u: 2, v: 14}],
      SMALL_ORE: [{u: 7, v: 2}, {u: 8, v: 2}, {u: 3, v: 3}, {u: 4, v: 3}, {u: 5, v: 3}, {u: 6, v: 3}, {u: 7, v: 3}, {u: 11, v: 3}, {u: 12, v: 3}, {u: 13, v: 3}, {u: 10, v: 6}, {u: 11, v: 6}, {u: 12, v: 6}, {u: 13, v: 6}, {u: 1, v: 7}, {u: 2, v: 7}, {u: 3, v: 7}, {u: 4, v: 7}, {u: 8, v: 7}, {u: 9, v: 7}, {u: 10, v: 7}, {u: 13, v: 7}, {u: 14, v: 7}, {u: 4, v: 8}, {u: 5, v: 8}, {u: 10, v: 10}, {u: 11, v: 10}, {u: 12, v: 10}, {u: 13, v: 10}, {u: 13, v: 11},  {u: 14, v: 11}, {u: 2, v: 12}, {u: 3, v: 12},  {u: 4, v: 12}, {u: 4, v: 13}, {u: 5, v: 13}, {u: 6, v: 13},  {u: 7, v: 13}, {u: 8, v: 13}, {u: 9, v: 13}, {u: 7, v: 14},  {u: 8, v: 14}]
    },
    GEM_VERTICAL: {
      name: "GEM_VERTICAL",
      ORE: [{u: 6, v: 1}, {u: 7, v: 1}, {u: 6, v: 2}, {u: 7, v: 2}, {u: 12, v: 3}, {u: 13, v: 3}, {u: 4, v: 4}, {u: 5, v: 4}, {u: 12, v: 4}, {u: 13, v: 4}, {u: 4, v: 5}, {u: 5, v: 5}, {u: 6, v: 5}, {u: 7, v: 5}, {u: 6, v: 6}, {u: 7, v: 6}, {u: 6, v: 8}, {u: 7, v: 8}, {u: 6, v: 9}, {u: 7, v: 9}, {u: 10, v: 9}, {u: 11, v: 9}, {u: 10, v: 10}, {u: 11, v: 10}, {u: 13, v: 10}, {u: 14, v: 10}, {u: 7, v: 11}, {u: 8, v: 11}, {u: 13, v: 11}, {u: 14, v: 11}, {u: 7, v: 12}, {u: 8, v: 12}, {u: 1, v: 13}, {u: 2, v: 13}, {u: 1, v: 14}, {u: 2, v: 14}],
      SMALL_ORE: [{u: 7, v: 2}, {u: 8, v: 2}, {u: 3, v: 3}, {u: 4, v: 3}, {u: 5, v: 3}, {u: 6, v: 3}, {u: 7, v: 3}, {u: 11, v: 3}, {u: 12, v: 3}, {u: 13, v: 3}, {u: 10, v: 6}, {u: 11, v: 6}, {u: 12, v: 6}, {u: 13, v: 6}, {u: 1, v: 7}, {u: 2, v: 7}, {u: 3, v: 7}, {u: 4, v: 7}, {u: 8, v: 7}, {u: 9, v: 7}, {u: 10, v: 7}, {u: 13, v: 7}, {u: 14, v: 7}, {u: 4, v: 8}, {u: 5, v: 8}, {u: 10, v: 10}, {u: 11, v: 10}, {u: 12, v: 10}, {u: 13, v: 10}, {u: 13, v: 11},  {u: 14, v: 11}, {u: 2, v: 12}, {u: 3, v: 12},  {u: 4, v: 12}, {u: 4, v: 13}, {u: 5, v: 13}, {u: 6, v: 13},  {u: 7, v: 13}, {u: 8, v: 13}, {u: 9, v: 13}, {u: 7, v: 14},  {u: 8, v: 14}]
    },
    DIAMOND: {
      name: "DIAMOND",
      ORE: [{u: 6, v: 1}, {u: 7, v: 1}, {u: 6, v: 2}, {u: 7, v: 2}, {u: 12, v: 3}, {u: 13, v: 3}, {u: 4, v: 4}, {u: 5, v: 4}, {u: 12, v: 4}, {u: 13, v: 4}, {u: 4, v: 5}, {u: 5, v: 5}, {u: 6, v: 5}, {u: 7, v: 5}, {u: 6, v: 6}, {u: 7, v: 6}, {u: 6, v: 8}, {u: 7, v: 8}, {u: 6, v: 9}, {u: 7, v: 9}, {u: 10, v: 9}, {u: 11, v: 9}, {u: 10, v: 10}, {u: 11, v: 10}, {u: 13, v: 10}, {u: 14, v: 10}, {u: 7, v: 11}, {u: 8, v: 11}, {u: 13, v: 11}, {u: 14, v: 11}, {u: 7, v: 12}, {u: 8, v: 12}, {u: 1, v: 13}, {u: 2, v: 13}, {u: 1, v: 14}, {u: 2, v: 14}],
      SMALL_ORE: [{u: 7, v: 2}, {u: 8, v: 2}, {u: 3, v: 3}, {u: 4, v: 3}, {u: 5, v: 3}, {u: 6, v: 3}, {u: 7, v: 3}, {u: 11, v: 3}, {u: 12, v: 3}, {u: 13, v: 3}, {u: 10, v: 6}, {u: 11, v: 6}, {u: 12, v: 6}, {u: 13, v: 6}, {u: 1, v: 7}, {u: 2, v: 7}, {u: 3, v: 7}, {u: 4, v: 7}, {u: 8, v: 7}, {u: 9, v: 7}, {u: 10, v: 7}, {u: 13, v: 7}, {u: 14, v: 7}, {u: 4, v: 8}, {u: 5, v: 8}, {u: 10, v: 10}, {u: 11, v: 10}, {u: 12, v: 10}, {u: 13, v: 10}, {u: 13, v: 11},  {u: 14, v: 11}, {u: 2, v: 12}, {u: 3, v: 12},  {u: 4, v: 12}, {u: 4, v: 13}, {u: 5, v: 13}, {u: 6, v: 13},  {u: 7, v: 13}, {u: 8, v: 13}, {u: 9, v: 13}, {u: 7, v: 14},  {u: 8, v: 14}]
    },
    GLASS: {
      name: "GLASS",
      ORE: [{u: 6, v: 1}, {u: 7, v: 1}, {u: 6, v: 2}, {u: 7, v: 2}, {u: 12, v: 3}, {u: 13, v: 3}, {u: 4, v: 4}, {u: 5, v: 4}, {u: 12, v: 4}, {u: 13, v: 4}, {u: 4, v: 5}, {u: 5, v: 5}, {u: 6, v: 5}, {u: 7, v: 5}, {u: 6, v: 6}, {u: 7, v: 6}, {u: 6, v: 8}, {u: 7, v: 8}, {u: 6, v: 9}, {u: 7, v: 9}, {u: 10, v: 9}, {u: 11, v: 9}, {u: 10, v: 10}, {u: 11, v: 10}, {u: 13, v: 10}, {u: 14, v: 10}, {u: 7, v: 11}, {u: 8, v: 11}, {u: 13, v: 11}, {u: 14, v: 11}, {u: 7, v: 12}, {u: 8, v: 12}, {u: 1, v: 13}, {u: 2, v: 13}, {u: 1, v: 14}, {u: 2, v: 14}],
      SMALL_ORE: [{u: 7, v: 2}, {u: 8, v: 2}, {u: 3, v: 3}, {u: 4, v: 3}, {u: 5, v: 3}, {u: 6, v: 3}, {u: 7, v: 3}, {u: 11, v: 3}, {u: 12, v: 3}, {u: 13, v: 3}, {u: 10, v: 6}, {u: 11, v: 6}, {u: 12, v: 6}, {u: 13, v: 6}, {u: 1, v: 7}, {u: 2, v: 7}, {u: 3, v: 7}, {u: 4, v: 7}, {u: 8, v: 7}, {u: 9, v: 7}, {u: 10, v: 7}, {u: 13, v: 7}, {u: 14, v: 7}, {u: 4, v: 8}, {u: 5, v: 8}, {u: 10, v: 10}, {u: 11, v: 10}, {u: 12, v: 10}, {u: 13, v: 10}, {u: 13, v: 11},  {u: 14, v: 11}, {u: 2, v: 12}, {u: 3, v: 12},  {u: 4, v: 12}, {u: 4, v: 13}, {u: 5, v: 13}, {u: 6, v: 13},  {u: 7, v: 13}, {u: 8, v: 13}, {u: 9, v: 13}, {u: 7, v: 14},  {u: 8, v: 14}]
    },
    EMERALD: {
      name: "EMERALD",
      ORE: [{u: 6, v: 1}, {u: 7, v: 1}, {u: 6, v: 2}, {u: 7, v: 2}, {u: 12, v: 3}, {u: 13, v: 3}, {u: 4, v: 4}, {u: 5, v: 4}, {u: 12, v: 4}, {u: 13, v: 4}, {u: 4, v: 5}, {u: 5, v: 5}, {u: 6, v: 5}, {u: 7, v: 5}, {u: 6, v: 6}, {u: 7, v: 6}, {u: 6, v: 8}, {u: 7, v: 8}, {u: 6, v: 9}, {u: 7, v: 9}, {u: 10, v: 9}, {u: 11, v: 9}, {u: 10, v: 10}, {u: 11, v: 10}, {u: 13, v: 10}, {u: 14, v: 10}, {u: 7, v: 11}, {u: 8, v: 11}, {u: 13, v: 11}, {u: 14, v: 11}, {u: 7, v: 12}, {u: 8, v: 12}, {u: 1, v: 13}, {u: 2, v: 13}, {u: 1, v: 14}, {u: 2, v: 14}],
      SMALL_ORE: [{u: 7, v: 2}, {u: 8, v: 2}, {u: 3, v: 3}, {u: 4, v: 3}, {u: 5, v: 3}, {u: 6, v: 3}, {u: 7, v: 3}, {u: 11, v: 3}, {u: 12, v: 3}, {u: 13, v: 3}, {u: 10, v: 6}, {u: 11, v: 6}, {u: 12, v: 6}, {u: 13, v: 6}, {u: 1, v: 7}, {u: 2, v: 7}, {u: 3, v: 7}, {u: 4, v: 7}, {u: 8, v: 7}, {u: 9, v: 7}, {u: 10, v: 7}, {u: 13, v: 7}, {u: 14, v: 7}, {u: 4, v: 8}, {u: 5, v: 8}, {u: 10, v: 10}, {u: 11, v: 10}, {u: 12, v: 10}, {u: 13, v: 10}, {u: 13, v: 11},  {u: 14, v: 11}, {u: 2, v: 12}, {u: 3, v: 12},  {u: 4, v: 12}, {u: 4, v: 13}, {u: 5, v: 13}, {u: 6, v: 13},  {u: 7, v: 13}, {u: 8, v: 13}, {u: 9, v: 13}, {u: 7, v: 14},  {u: 8, v: 14}]
    },
    RUBY: {
      name: "RUBY",
      ORE: [{u: 6, v: 1}, {u: 7, v: 1}, {u: 6, v: 2}, {u: 7, v: 2}, {u: 12, v: 3}, {u: 13, v: 3}, {u: 4, v: 4}, {u: 5, v: 4}, {u: 12, v: 4}, {u: 13, v: 4}, {u: 4, v: 5}, {u: 5, v: 5}, {u: 6, v: 5}, {u: 7, v: 5}, {u: 6, v: 6}, {u: 7, v: 6}, {u: 6, v: 8}, {u: 7, v: 8}, {u: 6, v: 9}, {u: 7, v: 9}, {u: 10, v: 9}, {u: 11, v: 9}, {u: 10, v: 10}, {u: 11, v: 10}, {u: 13, v: 10}, {u: 14, v: 10}, {u: 7, v: 11}, {u: 8, v: 11}, {u: 13, v: 11}, {u: 14, v: 11}, {u: 7, v: 12}, {u: 8, v: 12}, {u: 1, v: 13}, {u: 2, v: 13}, {u: 1, v: 14}, {u: 2, v: 14}],
      SMALL_ORE: [{u: 7, v: 2}, {u: 8, v: 2}, {u: 3, v: 3}, {u: 4, v: 3}, {u: 5, v: 3}, {u: 6, v: 3}, {u: 7, v: 3}, {u: 11, v: 3}, {u: 12, v: 3}, {u: 13, v: 3}, {u: 10, v: 6}, {u: 11, v: 6}, {u: 12, v: 6}, {u: 13, v: 6}, {u: 1, v: 7}, {u: 2, v: 7}, {u: 3, v: 7}, {u: 4, v: 7}, {u: 8, v: 7}, {u: 9, v: 7}, {u: 10, v: 7}, {u: 13, v: 7}, {u: 14, v: 7}, {u: 4, v: 8}, {u: 5, v: 8}, {u: 10, v: 10}, {u: 11, v: 10}, {u: 12, v: 10}, {u: 13, v: 10}, {u: 13, v: 11},  {u: 14, v: 11}, {u: 2, v: 12}, {u: 3, v: 12},  {u: 4, v: 12}, {u: 4, v: 13}, {u: 5, v: 13}, {u: 6, v: 13},  {u: 7, v: 13}, {u: 8, v: 13}, {u: 9, v: 13}, {u: 7, v: 14},  {u: 8, v: 14}]
    },
    OPAL: {
      name: "OPAL",
      ORE: [{u: 6, v: 1}, {u: 7, v: 1}, {u: 6, v: 2}, {u: 7, v: 2}, {u: 12, v: 3}, {u: 13, v: 3}, {u: 4, v: 4}, {u: 5, v: 4}, {u: 12, v: 4}, {u: 13, v: 4}, {u: 4, v: 5}, {u: 5, v: 5}, {u: 6, v: 5}, {u: 7, v: 5}, {u: 6, v: 6}, {u: 7, v: 6}, {u: 6, v: 8}, {u: 7, v: 8}, {u: 6, v: 9}, {u: 7, v: 9}, {u: 10, v: 9}, {u: 11, v: 9}, {u: 10, v: 10}, {u: 11, v: 10}, {u: 13, v: 10}, {u: 14, v: 10}, {u: 7, v: 11}, {u: 8, v: 11}, {u: 13, v: 11}, {u: 14, v: 11}, {u: 7, v: 12}, {u: 8, v: 12}, {u: 1, v: 13}, {u: 2, v: 13}, {u: 1, v: 14}, {u: 2, v: 14}],
      SMALL_ORE: [{u: 7, v: 2}, {u: 8, v: 2}, {u: 3, v: 3}, {u: 4, v: 3}, {u: 5, v: 3}, {u: 6, v: 3}, {u: 7, v: 3}, {u: 11, v: 3}, {u: 12, v: 3}, {u: 13, v: 3}, {u: 10, v: 6}, {u: 11, v: 6}, {u: 12, v: 6}, {u: 13, v: 6}, {u: 1, v: 7}, {u: 2, v: 7}, {u: 3, v: 7}, {u: 4, v: 7}, {u: 8, v: 7}, {u: 9, v: 7}, {u: 10, v: 7}, {u: 13, v: 7}, {u: 14, v: 7}, {u: 4, v: 8}, {u: 5, v: 8}, {u: 10, v: 10}, {u: 11, v: 10}, {u: 12, v: 10}, {u: 13, v: 10}, {u: 13, v: 11},  {u: 14, v: 11}, {u: 2, v: 12}, {u: 3, v: 12},  {u: 4, v: 12}, {u: 4, v: 13}, {u: 5, v: 13}, {u: 6, v: 13},  {u: 7, v: 13}, {u: 8, v: 13}, {u: 9, v: 13}, {u: 7, v: 14},  {u: 8, v: 14}]
    }
  },
  Action : {
    ColourMultiply: function (colour) {
      this.name = "colour_transform";
      this.colour = colour;
      this.act = function (ccolour) {
        let A1 = ((this.colour >> 24) & 0xff);
        let R1 = ((this.colour >> 16) & 0xff);
        let G1 = ((this.colour >>  8) & 0xff);
        let B1 = ((this.colour      ) & 0xff);
        
        let A2 = ((ccolour >> 24) & 0xff);
        let R2 = ((ccolour >> 16) & 0xff);
        let G2 = ((ccolour >>  8) & 0xff);
        let B2 = ((ccolour      ) & 0xff);
        
        let A1n = A1 / 255.0;
        let R1n = R1 / 255.0;
        let G1n = G1 / 255.0;
        let B1n = B1 / 255.0;
        
        let A2n = A2 / 255.0;
        let R2n = R2 / 255.0;
        let G2n = G2 / 255.0;
        let B2n = B2 / 255.0;
        
        let Amn = 1;
        //A2n;
        let Rmn = R1n * R2n;
        let Gmn = G1n * G2n;
        let Bmn = B1n * B2n;
        
        let Am = Amn * 255;
        let Rm = Rmn * 255;
        let Gm = Gmn * 255;
        let Bm = Bmn * 255;
        
        return (Am & 0xff) << 24 | (Rm & 0xff) << 16 | (Gm & 0xff) << 8 | (Bm & 0xff);
      };
    },
    SizeMultiply: function (size) {
      this.name = "size_transform";
      this.size = size;
    },
    Layering: function (layer) {
      this.name = "layering_transform";
      this.layer = layer;
      //this.act = function (ctexture) {}
    },
    BlockingLayering: function(layer, layerb) {
      this.name = "blockinglayering_transform";
      this.layer = layer;
      this.layerb = layerb;
      //this.act = function (ctexture) {}
    },
    AdvLayering: function (layer) {
      this.name = "advlayering_transform";
      this.layer = layer;
      //this.act = function (ctexture) {}
      this.act = function (ccolour, u, v) {}
    },
    LayerMultiply: function (layer) {
      this.name = "layer_transform";
      this.layer = layer;
      this.act = function (ccolour, u, v) {
        let colour = this.layer.getPixel(u, v);
        let A1 = ((ccolour >> 24) & 0xff);
        let R1 = ((ccolour >> 16) & 0xff);
        let G1 = ((ccolour >>  8) & 0xff);
        let B1 = ((ccolour      ) & 0xff);
        
        let A2 = ((colour >> 24) & 0xff);
        let R2 = ((colour >> 16) & 0xff);
        let G2 = ((colour >>  8) & 0xff);
        let B2 = ((colour      ) & 0xff);
        
        let A1n = A1 / 255.0;
        let R1n = R1 / 255.0;
        let G1n = G1 / 255.0;
        let B1n = B1 / 255.0;
        
        let A2n = A2 / 255.0;
        let R2n = R2 / 255.0;
        let G2n = G2 / 255.0;
        let B2n = B2 / 255.0;
        
        let Amn = 1;
        //A2n;
        let Rmn = R1n * R2n;
        let Gmn = G1n * G2n;
        let Bmn = B1n * B2n;
        
        let Am = Amn * 255;
        let Rm = Rmn * 255;
        let Gm = Gmn * 255;
        let Bm = Bmn * 255;
        
        return (Am & 0xff) << 24 | (Rm & 0xff) << 16 | (Gm & 0xff) << 8 | (Bm & 0xff);
      };
    },
  },
  //Bitmap android Bitmap
  transformIcon: function(bitmap, uvs, action, n) {
    //if(n) throw bitmap.copy(android.graphics.Bitmap.Config.ARGB_8888, true);
    var copye = null;
    copye = bitmap.copy(android.graphics.Bitmap.Config.ARGB_8888, true);

    if(action.name == "colour_transform") {
    for(let uv in uvs) {
      /*"copyed.setPixel(uvs[uv].u, uvs[uv].v, this.RGBAtoARGB(action.act(this.ARGBtoRGBA(copyed.getPixel(uvs[uv].u, uvs[uv].v)))));*/
      copye.setPixel(uvs[uv].u, uvs[uv].v, action.act(copye.getPixel(uvs[uv].u, uvs[uv].v)));
      //throw copye;
    }
    } else if(action.name == "layering_transform") {
      for(let uv in uvs) {
        copye.setPixel(uvs[uv].u, uvs[uv].v, action.layer.getPixel(uvs[uv].u, uvs[uv].v));
      }
    } else if(action.name == "blockinglayering_transform") {
      for(let uv in uvs) {
        let ig = false;
        for(let i in action.layerb) {
          if(action.layerb[i].u == uvs[uv].u && action.layerb[i].v == uvs[uv].v) ig = true;
        }
        if(!ig) copye.setPixel(uvs[uv].u, uvs[uv].v, action.layer.getPixel(uvs[uv].u, uvs[uv].v));
      }
    } else if(action.name == "advlayering_transform") {
      let canvas = new android.graphics.Canvas(copye);
        let paint = new android.graphics.Paint(android.graphics.Paint.FILTER_BITMAP_FLAG);
        canvas.drawBitmap(action.layer, 0, 0, paint);
    } else if(action.name == "layer_transform") {
      for(let uv in uvs) {
        copye.setPixel(uvs[uv].u, uvs[uv].v, action.act(copye.getPixel(uvs[uv].u, uvs[uv].v), uvs[uv].u, uvs[uv].v));
      }
    }
    return copye;
  }
}
let coords = {
  ALLOY_SMELTER_FRONT: [{u: 8, v: 2}, {u: 9, v: 2}, {u: 10, v: 2}, {u: 11, v: 2}, {u: 12, v: 2}, {u: 7, v: 3}, {u: 8, v: 3}, {u: 9, v: 3}, {u: 10, v: 3},
{u: 11, v: 3}, {u: 12, v: 3}, {u: 13, v: 3}, {u: 2, v: 4}, {u: 3, v: 4}, {u: 4, v: 4}, {u: 5, v: 4}, {u: 6, v: 4}, {u: 7, v: 4}, {u: 8, v: 4}, {u: 9, v: 4}, {u: 10, v: 4},
{u: 11, v: 4}, {u: 12, v: 4}, {u: 13, v: 4}, {u: 2, v: 5}, {u: 3, v: 5}, {u: 4, v: 5}, {u: 5, v: 5}, {u: 6, v: 5}, {u: 7, v: 5}, {u: 8, v: 5}, {u: 9, v: 5}, {u: 10, v: 5},
{u: 11, v: 5}, {u: 12, v: 5}, {u: 13, v: 5}, {u: 2, v: 6}, {u: 3, v: 6}, {u: 4, v: 6}, {u: 5, v: 6}, {u: 6, v: 6}, {u: 7, v: 6}, {u: 8, v: 6}, {u: 9, v: 6}, {u: 10, v: 6},
{u: 11, v: 6}, {u: 12, v: 6}, {u: 13, v: 6}, {u: 2, v: 7}, {u: 3, v: 7}, {u: 4, v: 7}, {u: 5, v: 7}, {u: 6, v: 7}, {u: 7, v: 7}, {u: 8, v: 7}, {u: 9, v: 7}, {u: 10, v: 7}, {u: 11, v: 7}, {u: 12, v: 7}, {u: 13, v: 7}
], 
FURNACE_FRONT:  [{u: 3, v: 2}, {u: 4, v: 2}, {u: 5, v: 2}, {u: 6, v: 2}, {u: 7, v: 2}, {u: 8, v: 2}, {u: 9, v: 2}, {u: 10, v: 2}, {u: 11, v: 2}, {u: 12, v: 2}, 
{u: 2, v: 3}, {u: 3, v: 3}, {u: 4, v: 3}, {u: 5, v: 3}, {u: 6, v: 3}, {u: 7, v: 3}, {u: 8, v: 3}, {u: 9, v: 3}, {u: 10, v: 3}, {u: 11, v: 3}, {u: 12, v: 3}, {u: 13, v: 3},
{u: 2, v: 4}, {u: 3, v: 4}, {u: 4, v: 4}, {u: 5, v: 4}, {u: 6, v: 4}, {u: 7, v: 4}, {u: 8, v: 4}, {u: 9, v: 4}, {u: 10, v: 4}, {u: 11, v: 4}, {u: 12, v: 4}, {u: 13, v: 4},
{u: 2, v: 5}, {u: 3, v: 5}, {u: 4, v: 5}, {u: 5, v: 5}, {u: 6, v: 5}, {u: 7, v: 5}, {u: 8, v: 5}, {u: 9, v: 5}, {u: 10, v: 5}, {u: 11, v: 5}, {u: 12, v: 5}, {u: 13, v: 5}, 
{u: 2, v: 6}, {u: 3, v: 6}, {u: 4, v: 6}, {u: 5, v: 6}, {u: 6, v: 6}, {u: 7, v: 6}, {u: 8, v: 6}, {u: 9, v: 6}, {u: 10, v: 6}, {u: 11, v: 6}, {u: 12, v: 6}, {u: 13, v: 6}, 
{u: 2, v: 7}, {u: 3, v: 7}, {u: 4, v: 7}, {u: 5, v: 7}, {u: 6, v: 7}, {u: 7, v: 7}, {u: 8, v: 7}, {u: 9, v: 7}, {u: 10, v: 7}, {u: 11, v: 7}, {u: 12, v: 7}, {u: 13, v: 7}],
MACERATOR_FRONT: [{u: 2, v: 4}, {u: 3, v: 4}, {u: 4, v: 4}, {u: 5, v: 4}, {u: 6, v: 4}, {u: 7, v: 4}, {u: 8, v: 4}, {u: 9, v: 4}, {u: 10, v: 4}, {u: 11, v: 4}, {u: 12, v: 4}, {u: 13, v: 4},
{u: 2, v: 5}, {u: 3, v: 5}, {u: 4, v: 5}, {u: 5, v: 5}, {u: 6, v: 5}, {u: 7, v: 5}, {u: 8, v: 5}, {u: 9, v: 5}, {u: 10, v: 5}, {u: 11, v: 5}, {u: 12, v: 5}, {u: 13, v: 5},
{u: 2, v: 6}, {u: 3, v: 6}, {u: 4, v: 6}, {u: 5, v: 6}, {u: 6, v: 6}, {u: 7, v: 6}, {u: 8, v: 6}, {u: 9, v: 6}, {u: 10, v: 6}, {u: 11, v: 6}, {u: 12, v: 6}, {u: 13, v: 6},
{u: 2, v: 7}, {u: 3, v: 7}, {u: 4, v: 7}, {u: 5, v: 7}, {u: 6, v: 7}, {u: 7, v: 7}, {u: 8, v: 7}, {u: 9, v: 7}, {u: 10, v: 7}, {u: 11, v: 7}, {u: 12, v: 7}, {u: 13, v: 7},
{u: 2, v: 8}, {u: 3, v: 8}, {u: 4, v: 8}, {u: 5, v: 8}, {u: 6, v: 8}, {u: 7, v: 8}, {u: 8, v: 8}, {u: 9, v: 8}, {u: 10, v: 8}, {u: 11, v: 8}, {u: 12, v: 8}, {u: 13, v: 8},
{u: 2, v: 9}, {u: 3, v: 9}, {u: 4, v: 9}, {u: 5, v: 9}, {u: 6, v: 9}, {u: 7, v: 9}, {u: 8, v: 9}, {u: 9, v: 9}, {u: 10, v: 9}, {u: 11, v: 9}, {u: 12, v: 9}, {u: 13, v: 9},
  {u: 2, v: 10}, {u: 3, v: 10}, {u: 4, v: 10}, {u: 5, v: 10}, {u: 6, v: 10}, {u: 7, v: 10}, {u: 8, v: 10}, {u: 9, v: 10}, {u: 10, v: 10}, {u: 11, v: 10}, {u: 12, v: 10}, {u: 13, v: 10},
  {u: 2, v: 11}, {u: 3, v: 11}, {u: 4, v: 11}, {u: 5, v: 11}, {u: 6, v: 11}, {u: 7, v: 11}, {u: 8, v: 11}, {u: 9, v: 11}, {u: 10, v: 11}, {u: 11, v: 11}, {u: 12, v: 11}, {u: 13, v: 11},
  {u: 2, v: 12}, {u: 3, v: 12}, {u: 4, v: 12}, {u: 5, v: 12}, {u: 6, v: 12}, {u: 7, v: 12}, {u: 8, v: 12}, {u: 9, v: 12}, {u: 10, v: 12}, {u: 11, v: 12}, {u: 12, v: 12}, {u: 13, v: 12},
  {u: 2, v: 13}, {u: 3, v: 13}, {u: 4, v: 13}, {u: 5, v: 13}, {u: 6, v: 13}, {u: 7, v: 13}, {u: 8, v: 13}, {u: 9, v: 13}, {u: 10, v: 13}, {u: 11, v: 13}, {u: 12, v: 13}, {u: 13, v: 13},
],
COMPRESSOR_FRONT:  [{u: 2, v: 4}, {u: 3, v: 4}, {u: 4, v: 4}, {u: 5, v: 4}, {u: 6, v: 4}, {u: 7, v: 4}, {u: 8, v: 4}, {u: 9, v: 4}, {u: 10, v: 4}, {u: 11, v: 4}, {u: 12, v: 4}, {u: 13, v: 4},
{u: 2, v: 5}, {u: 3, v: 5}, {u: 4, v: 5}, {u: 5, v: 5}, {u: 6, v: 5}, {u: 7, v: 5}, {u: 8, v: 5}, {u: 9, v: 5}, {u: 10, v: 5}, {u: 11, v: 5}, {u: 12, v: 5}, {u: 13, v: 5},
{u: 2, v: 6}, {u: 3, v: 6}, {u: 4, v: 6}, {u: 5, v: 6}, {u: 6, v: 6}, {u: 7, v: 6}, {u: 8, v: 6}, {u: 9, v: 6}, {u: 10, v: 6}, {u: 11, v: 6}, {u: 12, v: 6}, {u: 13, v: 6},
{u: 2, v: 7}, {u: 3, v: 7}, {u: 4, v: 7}, {u: 5, v: 7}, {u: 6, v: 7}, {u: 7, v: 7}, {u: 8, v: 7}, {u: 9, v: 7}, {u: 10, v: 7}, {u: 11, v: 7}, {u: 12, v: 7}, {u: 13, v: 7},
{u: 2, v: 8}, {u: 3, v: 8}, {u: 4, v: 8}, {u: 5, v: 8}, {u: 6, v: 8}, {u: 7, v: 8}, {u: 8, v: 8}, {u: 9, v: 8}, {u: 10, v: 8}, {u: 11, v: 8}, {u: 12, v: 8}, {u: 13, v: 8},
{u: 2, v: 9}, {u: 3, v: 9}, {u: 4, v: 9}, {u: 5, v: 9}, {u: 6, v: 9}, {u: 7, v: 9}, {u: 8, v: 9}, {u: 9, v: 9}, {u: 10, v: 9}, {u: 11, v: 9}, {u: 12, v: 9}, {u: 13, v: 9},
  {u: 2, v: 10}, {u: 3, v: 10}, {u: 4, v: 10}, {u: 5, v: 10}, {u: 6, v: 10}, {u: 7, v: 10}, {u: 8, v: 10}, {u: 9, v: 10}, {u: 10, v: 10}, {u: 11, v: 10}, {u: 12, v: 10}, {u: 13, v: 10},
  {u: 2, v: 11}, {u: 3, v: 11}, {u: 4, v: 11}, {u: 5, v: 11}, {u: 6, v: 11}, {u: 7, v: 11}, {u: 8, v: 11}, {u: 9, v: 11}, {u: 10, v: 11}, {u: 11, v: 11}, {u: 12, v: 11}, {u: 13, v: 11},
  {u: 2, v: 12}, {u: 3, v: 12}, {u: 4, v: 12}, {u: 5, v: 12}, {u: 6, v: 12}, {u: 7, v: 12}, {u: 8, v: 12}, {u: 9, v: 12}, {u: 10, v: 12}, {u: 11, v: 12}, {u: 12, v: 12}, {u: 13, v: 12},
],
HAMMER_FRONT:  [{u: 2, v: 4}, {u: 3, v: 4}, {u: 4, v: 4}, {u: 5, v: 4}, {u: 6, v: 4}, {u: 7, v: 4}, {u: 8, v: 4}, {u: 9, v: 4}, {u: 10, v: 4}, {u: 11, v: 4}, {u: 12, v: 4}, {u: 13, v: 4},
{u: 2, v: 5}, {u: 3, v: 5}, {u: 4, v: 5}, {u: 5, v: 5}, {u: 6, v: 5}, {u: 7, v: 5}, {u: 8, v: 5}, {u: 9, v: 5}, {u: 10, v: 5}, {u: 11, v: 5}, {u: 12, v: 5}, {u: 13, v: 5},
{u: 2, v: 6}, {u: 3, v: 6}, {u: 4, v: 6}, {u: 5, v: 6}, {u: 6, v: 6}, {u: 7, v: 6}, {u: 8, v: 6}, {u: 9, v: 6}, {u: 10, v: 6}, {u: 11, v: 6}, {u: 12, v: 6}, {u: 13, v: 6},
{u: 2, v: 7}, {u: 3, v: 7}, {u: 4, v: 7}, {u: 5, v: 7}, {u: 6, v: 7}, {u: 7, v: 7}, {u: 8, v: 7}, {u: 9, v: 7}, {u: 10, v: 7}, {u: 11, v: 7}, {u: 12, v: 7}, {u: 13, v: 7},
{u: 2, v: 8}, {u: 3, v: 8}, {u: 4, v: 8}, {u: 5, v: 8}, {u: 6, v: 8}, {u: 7, v: 8}, {u: 8, v: 8}, {u: 9, v: 8}, {u: 10, v: 8}, {u: 11, v: 8}, {u: 12, v: 8}, {u: 13, v: 8},
{u: 2, v: 9}, {u: 3, v: 9}, {u: 4, v: 9}, {u: 5, v: 9}, {u: 6, v: 9}, {u: 7, v: 9}, {u: 8, v: 9}, {u: 9, v: 9}, {u: 10, v: 9}, {u: 11, v: 9}, {u: 12, v: 9}, {u: 13, v: 9},
  {u: 2, v: 10}, {u: 3, v: 10}, {u: 4, v: 10}, {u: 5, v: 10}, {u: 6, v: 10}, {u: 7, v: 10}, {u: 8, v: 10}, {u: 9, v: 10}, {u: 10, v: 10}, {u: 11, v: 10}, {u: 12, v: 10}, {u: 13, v: 10},
  {u: 2, v: 11}, {u: 3, v: 11}, {u: 4, v: 11}, {u: 5, v: 11}, {u: 6, v: 11}, {u: 7, v: 11}, {u: 8, v: 11}, {u: 9, v: 11}, {u: 10, v: 11}, {u: 11, v: 11}, {u: 12, v: 11}, {u: 13, v: 11},
  {u: 2, v: 12}, {u: 3, v: 12}, {u: 4, v: 12}, {u: 5, v: 12}, {u: 6, v: 12}, {u: 7, v: 12}, {u: 8, v: 12}, {u: 9, v: 12}, {u: 10, v: 12}, {u: 11, v: 12}, {u: 12, v: 12}, {u: 13, v: 12},
  {u: 2, v: 13}, {u: 3, v: 13}, {u: 4, v: 13}, {u: 5, v: 13}, {u: 6, v: 13}, {u: 7, v: 13}, {u: 8, v: 13}, {u: 9, v: 13}, {u: 10, v: 13}, {u: 11, v: 13}, {u: 12, v: 13}, {u: 13, v: 13},
],
 EXTRACTOR_FRONT: [{u: 3, v: 1}, {u: 4, v: 1}, {u: 5, v: 1}, {u: 10, v: 1}, {u: 11, v: 1}, {u: 12, v: 1},
{u: 3, v: 2}, {u: 4, v: 2}, {u: 5, v: 2}, {u: 10, v: 2}, {u: 11, v: 2}, {u: 12, v: 2},
{u: 3, v: 3}, {u: 4, v: 3}, {u: 5, v: 3}, {u: 10, v: 3}, {u: 11, v: 3}, {u: 12, v: 3},
{u: 3, v: 4}, {u: 4, v: 4}, {u: 5, v: 4}, {u: 10, v: 4}, {u: 11, v: 4}, {u: 12, v: 4},
{u: 3, v: 5}, {u: 4, v: 5}, {u: 5, v: 5}, {u: 10, v: 5}, {u: 11, v: 5}, {u: 12, v: 5},
{u: 3, v: 6}, {u: 4, v: 6}, {u: 5, v: 6}, {u: 10, v: 6}, {u: 11, v: 6}, {u: 12, v: 6},
{u: 3, v: 7}, {u: 4, v: 7}, {u: 5, v: 7}, {u: 10, v: 7}, {u: 11, v: 7}, {u: 12, v: 7},
{u: 3, v: 8}, {u: 4, v: 8}, {u: 5, v: 8}, {u: 10, v: 8}, {u: 11, v: 8}, {u: 12, v: 8},
{u: 3, v: 9}, {u: 4, v: 9}, {u: 5, v: 9}, {u: 10, v: 9}, {u: 11, v: 9}, {u: 12, v: 9},
  {u: 3, v: 10}, {u: 4, v: 10}, {u: 5, v: 10}, {u: 10, v: 10}, {u: 11, v: 10}, {u: 12, v: 10},
  {u: 3, v: 11}, {u: 4, v: 11}, {u: 5, v: 11}, {u: 6, v: 11}, {u: 7, v: 11}, {u: 8, v: 11}, {u: 9, v: 11}, {u: 10, v: 11}, {u: 11, v: 11}, {u: 12, v: 11},
  {u: 3, v: 12}, {u: 4, v: 12}, {u: 5, v: 12}, {u: 6, v: 12}, {u: 7, v: 12}, {u: 8, v: 12}, {u: 9, v: 12}, {u: 10, v: 12}, {u: 11, v: 12}, {u: 12, v: 12},
  {u: 3, v: 13}, {u: 4, v: 13}, {u: 5, v: 13}, {u: 6, v: 13}, {u: 7, v: 13}, {u: 8, v: 13}, {u: 9, v: 13}, {u: 10, v: 13}, {u: 11, v: 13}, {u: 12, v: 13},
  {u: 3, v: 14}, {u: 4, v: 14}, {u: 5, v: 14}, {u: 6, v: 14}, {u: 7, v: 14}, {u: 8, v: 14}, {u: 9, v: 14}, {u: 10, v: 14}, {u: 11, v: 14}, {u: 12, v: 14}],
  EXTRACTOR_SIDE: [
{u: 6, v: 2}, {u: 7, v: 2}, {u: 8, v: 2}, {u: 9, v: 2},
{u: 6, v: 3}, {u: 7, v: 3}, {u: 8, v: 3}, {u: 9, v: 3},
{u: 6, v: 4}, {u: 7, v: 4}, {u: 8, v: 4}, {u: 9, v: 4},
{u: 6, v: 5}, {u: 7, v: 5}, {u: 8, v: 5}, {u: 9, v: 5},
{u: 6, v: 6}, {u: 7, v: 6}, {u: 8, v: 6}, {u: 9, v: 6},
{u: 6, v: 7}, {u: 7, v: 7}, {u: 8, v: 7}, {u: 9, v: 7},
{u: 6, v: 8}, {u: 7, v: 8}, {u: 8, v: 8}, {u: 9, v: 8},
{u: 6, v: 9}, {u: 7, v: 9}, {u: 8, v: 9}, {u: 9, v: 9},
  {u: 6, v: 10}, {u: 7, v: 10}, {u: 8, v: 10}, {u: 9, v: 10},
  {u: 6, v: 11}, {u: 7, v: 11}, {u: 8, v: 11}, {u: 9, v: 11},
  {u: 6, v: 12}, {u: 7, v: 12}, {u: 8, v: 12}, {u: 9, v: 12},
   {u: 6, v: 13}, {u: 7, v: 13}, {u: 8, v: 13}, {u: 9, v: 13},
 ],
  BOILER_FRONT: [
    {u: 4, v: 10}, {u: 5, v: 10}, {u: 6, v: 10}, {u: 7, v: 10}, {u: 8, v: 10},
{u: 9, v: 10}, {u: 10, v: 10}, {u: 11, v: 10}, 
{u: 3, v: 11}, {u: 4, v: 11}, {u: 5, v: 11},
{u: 6, v: 11}, {u: 7, v: 11}, {u: 8, v: 11}, {u: 9, v: 11}, {u: 10, v: 11}, {u: 11, v: 11}, {u: 12, v: 11}, 
{u: 2, v: 12}, {u: 3, v: 12}, {u: 4, v: 12}, {u: 5, v: 12}, {u: 6, v: 12}, {u: 7, v: 12}, {u: 8, v: 12}, {u: 9, v: 12}, {u: 10, v: 12}, {u: 11, v: 12}, {u: 12, v: 12}, {u: 13, v: 12}, 
{u: 2, v: 13}, {u: 3, v: 13}, {u: 4, v: 13}, {u: 5, v: 13}, {u: 6, v: 13}, {u: 7, v: 13}, {u: 8, v: 13}, {u: 9, v: 13}, {u: 10, v: 13}, {u: 11, v: 13}, {u: 12, v: 13}, {u: 13, v: 13}, 
{u: 2, v: 14}, {u: 3, v: 14}, {u: 4, v: 14}, {u: 5, v: 14}, {u: 6, v: 14}, {u: 7, v: 14}, {u: 8, v: 14}, {u: 9, v: 14}, {u: 10, v: 14}, {u: 11, v: 14}, {u: 12, v: 14}, {u: 13, v: 14},
{u: 2, v: 15}, {u: 3, v: 15}, {u: 4, v: 15}, {u: 5, v: 15}, {u: 6, v: 15}, {u: 7, v: 15}, {u: 8, v: 15}, {u: 9, v: 15}, {u: 10, v: 15}, {u: 11, v: 15}, {u: 12, v: 15}, {u: 13, v: 15}, 
  ],
  BOILER_LAVA_FRONT: [
     {u: 2, v: 9}, {u: 3, v: 9}, {u: 4, v: 9}, {u: 5, v: 9}, {u: 6, v: 9}, {u: 7, v: 9}, {u: 8, v: 9}, {u: 9, v: 9}, {u: 10, v: 9}, {u: 11, v: 9}, {u: 12, v: 9}, {u: 13, v: 9},
    {u: 2, v: 10}, {u: 3, v: 10}, {u: 4, v: 10}, {u: 5, v: 10}, {u: 6, v: 10}, {u: 7, v: 10}, {u: 8, v: 10}, {u: 9, v: 10}, {u: 10, v: 10}, {u: 11, v: 10}, {u: 12, v: 10}, {u: 13, v: 10},
    {u: 2, v: 11}, {u: 3, v: 11}, {u: 4, v: 11}, {u: 5, v: 11}, {u: 6, v: 11}, {u: 7, v: 11}, {u: 8, v: 11}, {u: 9, v: 11}, {u: 10, v: 11}, {u: 11, v: 11}, {u: 12, v: 11}, {u: 13, v: 11}, 
{u: 2, v: 12}, {u: 3, v: 12}, {u: 4, v: 12}, {u: 5, v: 12}, {u: 6, v: 12}, {u: 7, v: 12}, {u: 8, v: 12}, {u: 9, v: 12}, {u: 10, v: 12}, {u: 11, v: 12}, {u: 12, v: 12}, {u: 13, v: 12}, 
{u: 2, v: 13}, {u: 3, v: 13}, {u: 4, v: 13}, {u: 5, v: 13}, {u: 6, v: 13}, {u: 7, v: 13}, {u: 8, v: 13}, {u: 9, v: 13}, {u: 10, v: 13}, {u: 11, v: 13}, {u: 12, v: 13}, {u: 13, v: 13}, 
{u: 2, v: 14}, {u: 3, v: 14}, {u: 4, v: 14}, {u: 5, v: 14}, {u: 6, v: 14}, {u: 7, v: 14}, {u: 8, v: 14}, {u: 9, v: 14}, {u: 10, v: 14}, {u: 11, v: 14}, {u: 12, v: 14}, {u: 13, v: 14},
  ],
  BOILER_SOLAR_TOP: [
     {u: 0, v: 0}, {u: 1, v: 0}, {u: 2, v: 0}, {u: 3, v: 0}, {u: 4, v: 0}, {u: 5, v: 0}, {u: 6, v: 0}, {u: 7, v: 0}, {u: 8, v: 0}, {u: 9, v: 0}, {u: 10, v: 0}, {u: 11, v: 0},  {u: 12, v: 0}, {u: 13, v: 0}, {u: 14, v: 0}, {u: 15, v: 0},
        {u: 0, v: 1}, {u: 1, v: 1}, {u: 2, v: 1}, {u: 3, v: 1}, {u: 4, v: 1}, {u: 5, v: 1}, {u: 6, v: 1}, {u: 7, v: 1}, {u: 8, v: 1}, {u: 9, v: 1}, {u: 10, v: 1}, {u: 11, v: 1}, {u: 12, v: 1}, {u: 13, v: 1}, {u: 14, v: 1}, {u: 15, v: 1},
        {u: 0, v: 2}, {u: 1, v: 2}, {u: 2, v: 2}, {u: 3, v: 2}, {u: 4, v: 2}, {u: 5, v: 2}, {u: 6, v: 2}, {u: 7, v: 2}, {u: 8, v: 2}, {u: 9, v: 2}, {u: 10, v: 2}, {u: 11, v: 2},  {u: 12, v: 2}, {u: 13, v: 2}, {u: 14, v: 2}, {u: 15, v: 2},
        {u: 0, v: 3}, {u: 1, v: 3}, {u: 2, v: 3}, {u: 3, v: 3}, {u: 4, v: 3},    {u: 5, v: 3}, {u: 6, v: 3}, {u: 7, v: 3}, {u: 8, v: 3}, {u: 9, v: 3}, {u: 10, v: 3}, {u: 11, v: 3},  {u: 12, v: 3}, {u: 13, v: 3}, {u: 14, v: 3}, {u: 15, v: 3},
      {u: 0, v: 4}, {u: 1, v: 4}, {u: 2, v: 4}, {u: 3, v: 4}, {u: 4, v: 4}, {u: 5, v: 4}, {u: 6, v: 4}, {u: 7, v: 4}, {u: 8, v: 4}, {u: 9, v: 4}, {u: 10, v: 4}, {u: 11, v: 4}, {u: 12, v: 4}, {u: 13, v: 4}, {u: 14, v: 4},   {u: 15, v: 4}, 
      {u: 0, v: 5}, {u: 1, v: 5}, {u: 2, v: 5}, {u: 3, v: 5}, {u: 4, v: 5}, {u: 5, v: 5}, {u: 6, v: 5}, {u: 7, v: 5}, {u: 8, v: 5}, {u: 9, v: 5}, {u: 10, v: 5}, {u: 11, v: 5}, {u: 12, v: 5}, {u: 13, v: 5}, {u: 14, v: 5}, {u: 15, v: 5},
         {u: 0, v: 6}, {u: 1, v: 6}, {u: 2, v: 6}, {u: 3, v: 6}, {u: 4, v: 6}, {u: 5, v: 6}, {u: 6, v: 6}, {u: 7, v: 6}, {u: 8, v: 6}, {u: 9, v: 6}, {u: 10, v: 6}, {u: 11, v: 6},    {u: 12, v: 6}, {u: 13, v: 6},    {u: 14, v: 6}, {u: 15, v: 6},
        {u: 0, v: 7}, {u: 1, v: 7}, {u: 2, v: 7}, {u: 3, v: 7}, {u: 4, v: 7}, {u: 5, v: 7}, {u: 6, v: 7}, {u: 7, v: 7}, {u: 8, v: 7}, {u: 9, v: 7}, {u: 10, v: 7}, {u: 11, v: 7}, {u: 12, v: 7}, {u: 13, v: 7}, {u: 14, v: 7}, {u: 15, v: 7},
      {u: 0, v: 8}, {u: 1, v: 8}, {u: 2, v: 8}, {u: 3, v: 8}, {u: 4, v: 8}, {u: 5, v: 8}, {u: 6, v: 8}, {u: 7, v: 8}, {u: 8, v: 8}, {u: 9, v: 8}, {u: 10, v: 8}, {u: 11, v: 8}, {u: 12, v: 8}, {u: 13, v: 8}, {u: 14, v: 8}, {u: 15, v: 8},
      {u: 0, v: 9}, {u: 1, v: 9}, {u: 2, v: 9}, {u: 3, v: 9}, {u: 4, v: 9}, {u: 5, v: 9}, {u: 6, v: 9}, {u: 7, v: 9}, {u: 8, v: 9}, {u: 9, v: 9}, {u: 10, v: 9}, {u: 11, v: 9}, {u: 12, v: 9}, {u: 13, v: 9}, {u: 14, v: 9}, {u: 15, v: 9},
      {u: 0, v: 10}, {u: 1, v: 10}, {u: 2, v: 10}, {u: 3, v: 10}, {u: 4, v: 10}, {u: 5, v: 10}, {u: 6, v: 10}, {u: 7, v: 10}, {u: 8, v: 10}, {u: 9, v: 10}, {u: 10, v: 10}, {u: 11, v: 10}, {u: 12, v: 10}, {u: 13, v: 10}, {u: 14, v: 10}, {u: 15, v: 10},
     {u: 0, v: 11}, {u: 1, v: 11}, {u: 2, v: 11}, {u: 3, v: 11}, {u: 4, v: 11}, {u: 5, v: 11}, {u: 6, v: 11}, {u: 7, v: 11}, {u: 8, v: 11}, {u: 9, v: 11}, {u: 10, v: 11}, {u: 11, v: 11}, {u: 12, v: 11}, {u: 13, v: 11}, {u: 14, v: 11}, {u: 15, v: 11},
      {u: 0, v: 12}, {u: 1, v: 12}, {u: 2, v: 12}, {u: 3, v: 12}, {u: 4, v: 12}, {u: 5, v: 12}, {u: 6, v: 12}, {u: 7, v: 12}, {u: 8, v: 12}, {u: 9, v: 12}, {u: 10, v: 12}, {u: 11, v: 12}, {u: 12, v: 12}, {u: 13, v: 12}, {u: 14, v: 12}, {u: 15, v: 12},
     {u: 0, v: 13}, {u: 1, v: 13}, {u: 2, v: 13}, {u: 3, v: 13}, {u: 4, v: 13}, {u: 5, v: 13}, {u: 6, v: 13}, {u: 7, v: 13}, {u: 8, v: 13}, {u: 9, v: 13}, {u: 10, v: 13}, {u: 11, v: 13}, {u: 12, v: 13}, {u: 13, v: 13}, {u: 14, v: 13}, {u: 15, v: 13},
      {u: 0, v: 14}, {u: 1, v: 14}, {u: 2, v: 14}, {u: 3, v: 14}, {u: 4, v: 14}, {u: 5, v: 14}, {u: 6, v: 14}, {u: 7, v: 14}, {u: 8, v: 14}, {u: 9, v: 14}, {u: 10, v: 14}, {u: 11, v: 14},  {u: 12, v: 14}, {u: 13, v: 14}, {u: 14, v: 14}, {u: 15, v: 14},
        {u: 0, v: 15}, {u: 1, v: 15}, {u: 2, v: 15}, {u: 3, v: 15}, {u: 4, v: 15}, {u: 5, v: 15}, {u: 6, v: 15}, {u: 7, v: 15}, {u: 8, v: 15}, {u: 9, v: 15}, {u: 10, v: 15}, {u: 11, v: 15}, {u: 12, v: 15}, {u: 13, v: 15}, {u: 14, v: 15}, {u: 15, v: 15},
  ],
  PIPE_PUT: [
    {u: 4, v: 4}, {u: 5, v: 4}, {u: 6, v: 4}, {u: 7, v: 4}, {u: 8, v: 4}, {u: 9, v: 4}, {u: 10, v: 4}, {u: 11, v: 4},
     {u: 4, v: 5}, {u: 5, v: 5}, {u: 6, v: 5}, {u: 7, v: 5}, {u: 8, v: 5}, {u: 9, v: 5}, {u: 10, v: 5}, {u: 11, v: 5},
 {u: 4, v: 6}, {u: 5, v: 6}, {u: 6, v: 6}, {u: 7, v: 6}, {u: 8, v: 6}, {u: 9, v: 6}, {u: 10, v: 6}, {u: 11, v: 6},
{u: 4, v: 7}, {u: 5, v: 7}, {u: 6, v: 7}, {u: 7, v: 7}, {u: 8, v: 7}, {u: 9, v: 7}, {u: 10, v: 7}, {u: 11, v: 7},
 {u: 4, v: 8}, {u: 5, v: 8}, {u: 6, v: 8}, {u: 7, v: 8}, {u: 8, v: 8}, {u: 9, v: 8}, {u: 10, v: 8}, {u: 11, v: 8},
{u: 4, v: 9}, {u: 5, v: 9}, {u: 6, v: 9}, {u: 7, v: 9}, {u: 8, v: 9}, {u: 9, v: 9}, {u: 10, v: 9}, {u: 11, v: 9},
 {u: 4, v: 10}, {u: 5, v: 10}, {u: 6, v: 10}, {u: 7, v: 10}, {u: 8, v: 10}, {u: 9, v: 10}, {u: 10, v: 10}, {u: 11, v: 10},
{u: 4, v: 11}, {u: 5, v: 11}, {u: 6, v: 11}, {u: 7, v: 11}, {u: 8, v: 11}, {u: 9, v: 11}, {u: 10, v: 11}, {u: 11, v: 11}
  ]
}


let createFlag = function(id) {
	return Flags.createFlag(id);
};


let SOFT_MATERIAL = createFlag(39); //mallet instead hammer.

let DECOMPOSITION_BY_ELECTROLYZING = createFlag(40);

        /**
         * Enables centrifuge decomposition recipe generation
         */
let DECOMPOSITION_BY_CENTRIFUGING = createFlag(41);

        /**
         * Add to material if it has constantly burning aura
         */
let BURNING = createFlag(7);

        /**
         * Add to material if it is some kind of flammable
         */
let FLAMMABLE = createFlag(42);

        /**
         * Add to material if it is some kind of explosive
         */
let EXPLOSIVE = createFlag(4);

        /**
         * Add to material to disable it's unification fully
         */
let NO_UNIFICATION = createFlag(5);

        /**
         * Add to material if any of it's items cannot be recycled to get scrub
         */
let NO_RECYCLING = createFlag(6);

        /**
         * Disables decomposition recipe generation for this material and all materials that has it as component
         */
let DISABLE_DECOMPOSITION = createFlag(43);

        /**
         * Decomposition recipe requires hydrogen as additional input. Amount is equal to input amount
         */
let DECOMPOSITION_REQUIRES_HYDROGEN = createFlag(8);

let GENERATE_FLUID_BLOCK = createFlag(44);

        /**
         * Add this flag to enable plasma generation for this material
         */
let GENERATE_PLASMA = createFlag(9);

        /**
         * Marks material state as gas
         * Examples: Air, Argon, Refinery Gas, Oxygen, Hydrogen
         */
let STATE_GAS = createFlag(10);
//dust
let GENERATE_ORE = createFlag(11);

        /**
         * Generate a plate for this material
         * If it's dust material, dust compressor recipe into plate will be generated
         * If it's metal material, bending machine recipes will be generated
         * If block is found, cutting machine recipe will be also generated
         */
let GENERATE_PLATE = createFlag(12);

        /**
         * Add to material if it cannot be worked by any other means, than smashing or smelting. This is used for coated Materials.
         */
let NO_WORKING = createFlag(13);
        /**
         * Add to material if it cannot be used for regular Metal working techniques since it is not possible to bend it.
         */
let NO_SMASHING = createFlag(14);

        /**
         * Add to material if it's impossible to smelt it
         */
let NO_SMELTING = createFlag(15);

        /**
         * Add to material if it is outputting less in an Induction Smelter.
         */
let INDUCTION_SMELTING_LOW_OUTPUT = createFlag(16);

        /**
         * Add to material if it melts into fluid (and it will also generate fluid for this material)
         */
let SMELT_INTO_FLUID = createFlag(17);

        /**
         * This will prevent material from creating Shapeless recipes for dust to block and vice versa
         * Also preventing extruding and alloy smelting recipes via SHAPE_EXTRUDING/MOLD_BLOCK
         */
let EXCLUDE_BLOCK_CRAFTING_RECIPES = createFlag(18);

        /**
         * This will prevent material from creating Shapeless recipes for dust to block and vice versa
         */
let EXCLUDE_BLOCK_CRAFTING_BY_HAND_RECIPES = createFlag(46);

let EXCLUDE_PLATE_COMPRESSOR_RECIPE = createFlag(19);

//solid
let GENERATE_ROD = createFlag(20);
let GENERATE_GEAR = createFlag(21);
let GENERATE_LONG_ROD = createFlag(22);
let MORTAR_GRINDABLE = createFlag(24);
let GENERATE_FRAME = createFlag(45);
//ingot
let GENERATE_FOIL = createFlag(25);
let GENERATE_BOLT_SCREW = createFlag(26);
let GENERATE_RING = createFlag(27);
let GENERATE_SPRING = createFlag(28);
let GENERATE_FINE_WIRE = createFlag(29);
let GENERATE_ROTOR = createFlag(30);
let GENERATE_SMALL_GEAR = createFlag(31);
let GENERATE_DENSE = createFlag(32);

let GENERATE_SPRING_SMALL = createFlag(33);
        /**
         * Add this to your Material if you want to have its Ore Calcite heated in a Blast Furnace for more output. Already listed are:
         * Iron, Pyrite, PigIron, WroughtIron.
         */
let BLAST_FURNACE_CALCITE_DOUBLE = createFlag(35);
let BLAST_FURNACE_CALCITE_TRIPLE = createFlag(36);

//gem
let CRYSTALLISABLE = createFlag(34);
let GENERATE_LENSE = createFlag(37);
let HIGH_SIFTER_OUTPUT = createFlag(38);

//all
let STD_SOLID = Flags.pack4(GENERATE_PLATE, GENERATE_ROD, GENERATE_BOLT_SCREW, GENERATE_LONG_ROD);
let STD_GEM = Flags.pack3(GENERATE_ORE, STD_SOLID, GENERATE_LENSE);
let STD_METAL = GENERATE_PLATE;
let EXT_METAL = Flags.pack4(STD_METAL, GENERATE_ROD, GENERATE_BOLT_SCREW, GENERATE_LONG_ROD);
let EXT2_METAL = Flags.pack4(EXT_METAL, GENERATE_GEAR, GENERATE_FOIL, GENERATE_FINE_WIRE);

//tool
let GENERATE_MORTAR = createFlag(89);

let unpreparedTexturesDir = __dir__ + "res/";
let preparedTexturesDir = __dir__ + "_/";
new java.io.File(preparedTexturesDir + "terrain-atlas/").mkdirs();
new java.io.File(preparedTexturesDir + "items-opaque/").mkdirs();

let types = [];
function addTypeForGenerate(oreprefix, flag, type, icon_set, icon_set2, icon_set_override, icon_set_override2) {
  types[oreprefix] = {oreprefix: oreprefix, type: type, flag: flag, icon_set: icon_set, icon_set2: icon_set2, icon_set_override: icon_set_override};
}
function generateClientMaterial(name, type, flags, colour, material_set) {
  if(type == "MARKER") return;
  for(let i in types) {
    if(Flags.hasFlag(flags, types[i].flag) || (invoretypes[name] && i == "dustImpure")) {
      		if(!(type == "DUST" || type == "SOLID" || type == "INGOT" || type == "GEM")) {
					if(i == "dust" || i == "dustSmall" || i == "dustTiny") {
						continue;
					}
				}
				if(!(type == "SOLID" || type == "INGOT" || type == "GEM")) {
					if(i == "block") {
						continue;
					}
				}
				if(type != "INGOT") {
					if(i == "ingot" || i == "nugget") {
						continue;
					}	
				}
				if(type != "GEM") {
					if(i == "gem") {
						continue;
					}	
				}
    if(types[i].type == "item") {
      
      /*"let alloy_smelterlayer = new IconTransformator.Action.Layering();
      java.lang.System.out.println( unpreparedTexturesDir + "items-opaque/materialicons/" + material_set.name + "/" + types[i].oreprefix + "_OVERLAY.png");
  alloy_smelterlayer.layer = android.graphics.BitmapFactory.decodeFile(unpreparedTexturesDir + "items-opaque/materialicons/" + material_set.name + "/" + types[i].oreprefix + "_OVERLAY.png");
  let materialbitmap = IconTransformator.transformIcon(android.graphics.BitmapFactory.decodeFile(unpreparedTexturesDir + "items-opaque/materialicons/" + material_set.name + "/" + types[i].oreprefix + ".png"), types[i].icon_set, alloy_smelterlayer);
    
    let file = new java.io.File(preparedTexturesDir + "items-opaque/" + name + "_" + i + ".png");
    let cOut = new java.io.FileOutputStream(file);
  materialbitmap.compress(android.graphics.Bitmap.CompressFormat.PNG, 85, cOut);
  cOut.flush();
  cOut.close();*/
  let sete = null;
  if(types[i].icon_set_override != null && types[i].icon_set_override[material_set.name] != null) {
    sete = types[i].icon_set_override[material_set.name];
  } else {
    sete = types[i].icon_set;
  }
  let copperlayer = new IconTransformator.Action.ColourMultiply(colour);
    let materialbitma = IconTransformator.transformIcon(android.graphics.BitmapFactory.decodeFile(unpreparedTexturesDir + "items-opaque/materialicons/" + material_set.name + "/" + types[i].oreprefix + ".png"), sete, copperlayer);
    
    let fileo = new java.io.File(preparedTexturesDir + "items-opaque/" + name + "_" + i + ".png");
    let cOutt = new java.io.FileOutputStream(fileo);
  materialbitma.compress(android.graphics.Bitmap.CompressFormat.PNG, 85, cOutt);
  cOutt.flush();
  cOutt.close();
  
    if(types[i].icon_set2) {
      let alloy_smelterlayer = new IconTransformator.Action.AdvLayering();
      java.lang.System.out.println( unpreparedTexturesDir + "items-opaque/materialicons/" + material_set.name + "/" + types[i].oreprefix + "_OVERLAY.png");
  alloy_smelterlayer.layer = android.graphics.BitmapFactory.decodeFile(unpreparedTexturesDir + "items-opaque/materialicons/" + material_set.name + "/" + types[i].oreprefix + "_OVERLAY.png");
  let materialbitmap = IconTransformator.transformIcon(android.graphics.BitmapFactory.decodeFile(preparedTexturesDir + "items-opaque/" + name + "_" + i + ".png"), types[i].icon_set2, alloy_smelterlayer);
    
    let file = new java.io.File(preparedTexturesDir + "items-opaque/" + name + "_" + i + ".png");
    let cOut = new java.io.FileOutputStream(file);
  materialbitmap.compress(android.graphics.Bitmap.CompressFormat.PNG, 85, cOut);
  cOut.flush();
  cOut.close();
    }
    } else { //block
      
      let file = null;
  if(types[i].oreprefix == "block" && (material_set.name == "DIAMOND" || material_set.name == "GEM_VERTICAL" || material_set.name == "GEM_HORIZONTAL" || material_set.name == "RUBY" || material_set.name == "OPAL" || material_set.name == "EMERALD" || material_set.name == "FLINT" || material_set.name == "NETHERSTAR" || material_set.name == "QUARTZ")) {
    file = unpreparedTexturesDir + "terrain-atlas/materialicons/" + material_set.name + "/" + types[i].oreprefix + "3.png";
  } else if(types[i].oreprefix == "block" && (material_set.name == "METALLIC" || material_set.name == "SHINY" || material_set.name == "MAGNETIC" || material_set.name == "DULL")) {
    file = unpreparedTexturesDir + "terrain-atlas/materialicons/" + material_set.name + "/" + types[i].oreprefix + "5.png";
  } else if(types[i].oreprefix != "block") {
    file = unpreparedTexturesDir + "terrain-atlas/materialicons/" + material_set.name + "/" + types[i].oreprefix + ".png";
  } else {
    file = unpreparedTexturesDir + "terrain-atlas/materialicons/" + material_set.name + "/" + types[i].oreprefix + "2.png";
  }
  //try {
    //throw new java.io.File(file).exists();
    //throw android.graphics.BitmapFactory.decodeFile(file).copy(android.graphics.Bitmap.Config.ARGB_8888, true);
  //} catch(e) {
    //throw e;
  //}
  
  let copperlayer = new IconTransformator.Action.ColourMultiply(colour);
  let materialbitma = null;
  try {
     materialbitma = IconTransformator.transformIcon(android.graphics.BitmapFactory.decodeFile(file), types[i].icon_set, copperlayer, true);
    } catch(e) {
        throw file;
    }
    try {
    throw preparedTexturesDir + "terrain-atlas/" + name + "_" + i + ".png";
    } catch(e) {
    } 
    let fileo = new java.io.File(preparedTexturesDir + "terrain-atlas/" + name + "_" + i + ".png");
    let cOutt = new java.io.FileOutputStream(fileo);
  materialbitma.compress(android.graphics.Bitmap.CompressFormat.PNG, 85, cOutt);
  cOutt.flush();
  cOutt.close();
    }
    }
  }
}


let oretypes = [];
let invoretypes = [];
function addBlockForOreGenerate(name) {
  oretypes[this.oretypes.length] = name;
  invoretypes[name] = name;
}
function generateClientOre(name, icon_set, colour) {
  for(let i in oretypes) {
      let copperlayer = new IconTransformator.Action.ColourMultiply(colour);
  
    let copperbitmap = IconTransformator.transformIcon(android.graphics.BitmapFactory.decodeFile(unpreparedTexturesDir + "terrain-atlas/materialicons/" + icon_set.name + "/ore.png"), icon_set.ORE, copperlayer);
    let file = new java.io.File(preparedTexturesDir + "terrain-atlas/" + name + "_ore.png");
    
    let copperbitmaps = IconTransformator.transformIcon(android.graphics.BitmapFactory.decodeFile(unpreparedTexturesDir + "terrain-atlas/materialicons/" + icon_set.name + "/oreSmall.png"), icon_set.SMALL_ORE, copperlayer);
    let files = new java.io.File(preparedTexturesDir + "terrain-atlas/" + name + "_oreSmall.png");
    
  let cOut = new java.io.FileOutputStream(file);
  copperbitmap.compress(android.graphics.Bitmap.CompressFormat.PNG, 85, cOut);
  cOut.flush();
  cOut.close();
  
  let cOu = new java.io.FileOutputStream(files);
  copperbitmaps.compress(android.graphics.Bitmap.CompressFormat.PNG, 85, cOu);
  cOu.flush();
  cOu.close();
  
  
  
  let alloy_smelterlayer = new IconTransformator.Action.Layering();
  alloy_smelterlayer.layer = android.graphics.BitmapFactory.decodeFile(preparedTexturesDir + "terrain-atlas/" + name + "_ore.png");
  //if(FileTools.isExists(__dir__ + "res/terrain-atlas/" + oretypes[i].toUpperCase() + "_STONE.png")) {
  alloy_smelterbitmap = IconTransformator.transformIcon(android.graphics.BitmapFactory.decodeFile(unpreparedTexturesDir + "terrain-atlas/iconsets/" + oretypes[i].toUpperCase() + "_STONE.png"), icon_set.ORE, alloy_smelterlayer);
  //}
  //if(oretypes[i]) throw oretypes[i].toUpperCase();
  let ffile = new java.io.File(preparedTexturesDir + "terrain-atlas/" + oretypes[i] + "_" + name + "_ore.png");
  let ffOut = new java.io.FileOutputStream(ffile);
  alloy_smelterbitmap.compress(android.graphics.Bitmap.CompressFormat.PNG, 85, ffOut);
  ffOut.flush();
  ffOut.close();
  
  /*let oremodel = new BlockRenderer.Model();
  oremodel.addBox(0, 0, 0, 1, 1, 1, this.stones[i].texture + "_" + material.name + "_ore", 0);
  let icRenderModel = new ICRender.Model(); 
  icRenderModel.addEntry(oremodel);
  BlockRenderer.setStaticICRender(BlockID["gtblockores" + (Math.floor((this.ores.length - 1) / this.countByID) * 2)], this.counter * this.stones.length + i, icRenderModel);*/
  //Logger.Log(oretypes[i], "shirinkium");
  //variationbig[i] = {texture: this.blocks[Object.keys(this.blocks)[i]].texture + "_" + material.name + "_ore"};
  //Logger.Log("big", "shirinkium");
  //Logger.Log("big", "shirinkium");
  
  let alloy_smelterlayers = new IconTransformator.Action.Layering();
    alloy_smelterlayers.layer = android.graphics.BitmapFactory.decodeFile(preparedTexturesDir + "terrain-atlas/" + name + "_oreSmall.png");
  let alloy_smelterbitmaps = IconTransformator.transformIcon(android.graphics.BitmapFactory.decodeFile(unpreparedTexturesDir + "terrain-atlas/iconsets/" + oretypes[i].toUpperCase() + "_STONE.png"), icon_set.SMALL_ORE, alloy_smelterlayers);
  
  let ffiles = new java.io.File(preparedTexturesDir + "terrain-atlas/" + oretypes[i] + "_" + name + "_oreSmall.png");
  let ffOuts = new java.io.FileOutputStream(ffiles);
  alloy_smelterbitmaps.compress(android.graphics.Bitmap.CompressFormat.PNG, 85, ffOuts);
  ffOuts.flush();
  ffOuts.close();
    }
  }




let tooltypes = [];
function addToolTypeGenerate(name, head, stick, flag, texture_pos_head, texture_pos_head_overlay, texture_pos_stick, texture_pos_stick_overlay, handle, colour2) {
  if(texture_pos_head_overlay == "_") {
    texture_pos_head_overlay = texture_pos_head;
  }
  if(texture_pos_stick == "_stick") {
    texture_pos_stick = [
          {u: 12, v: 2}, {u: 13, v: 2}, 
    {u: 11, v: 3}, {u: 12, v: 3}, {u: 13, v: 3}, 
    {u: 10, v: 4}, {u: 11, v: 4}, {u: 12, v: 4}, 
    {u: 9, v: 5}, {u: 10, v: 5}, {u: 11, v: 5},
    {u: 8, v: 6}, {u: 9, v: 6}, {u: 10, v: 6},
    {u: 7, v: 7}, {u: 8, v: 7}, {u: 9, v: 7},
    {u: 6, v: 8}, {u: 7, v: 8}, {u: 8, v: 8},
    {u: 5, v: 9}, {u: 6, v: 9}, {u: 7, v: 9},
    {u: 4, v: 10}, {u: 5, v: 10}, {u: 6, v: 10},
    {u: 3, v: 11}, {u: 4, v: 11}, {u: 5, v: 11},
    {u: 2, v: 12}, {u: 3, v: 12}, {u: 4, v: 12},
    {u: 1, v: 13}, {u: 2, v: 13}, {u: 3, v: 13},
    {u: 1, v: 14}, {u: 2, v: 14},
    ];
  }
  if(texture_pos_stick_overlay == "_") {
    texture_pos_stick_overlay = texture_pos_stick;
  }
  tooltypes[this.tooltypes.length] = {name: name, head: head, stick: stick, flag: flag, texture_pos_head: texture_pos_head, texture_pos_head_overlay: texture_pos_head_overlay, texture_pos_stick: texture_pos_stick, texture_pos_stick_overlay: texture_pos_stick_overlay, handle: handle, colour2: colour2};
}
function generateClientTool(name, material_set, colour, name2, material_set2, colour2, flags, soft) {
  for(let i in tooltypes) {
    if(Flags.hasFlag(flags, tooltypes[i].flag)) continue;
    let colourlayer = new IconTransformator.Action.ColourMultiply(colour);
    let colourlayer2 = new IconTransformator.Action.ColourMultiply(colour2);
    
    let dir = unpreparedTexturesDir + "items-opaque/materialicons/" + material_set.name.toUpperCase() + "/";
    let dir2 = unpreparedTexturesDir + "items-opaque/materialicons/" + material_set.name.toUpperCase() + "/";
    //let dirr = dir + tooltypes[i].name.toUpperCase() + "/" + tooltypes[i].head + "png"
    let iii = new java.io.File(dir + tooltypes[i].head + ".png");
    if(!iii.exists()) {
        dir = unpreparedTexturesDir + "items-opaque/iconsets/";
        
    }
    
    let sss;
    if(tooltypes[i].head == "hammer" && soft) {
        //dirStick = dir2 + "handleMallet.png"
      
      sss = new java.io.File(dir2 + "handleMallet.png");
    } else if(tooltypes[i].stick == "_stick") {
        //dirStick = dir2 + "stick.png";
        sss = new java.io.File(dir2 + "stick.png");
      } else {
        sss = new java.io.File(dir2 + tooltypes[i].stick + ".png");
      }
    if(!sss.exists()) {
        dir2 = unpreparedTexturesDir + "items-opaque/iconsets/";
        
    }
    let dirStick = null;
    if(tooltypes[i].stick != null) {
      if(tooltypes[i].head == "hammer" && soft) {
        dirStick = dir2 + "handleMallet.png"
      } else if(tooltypes[i].stick == "_stick") {
        dirStick = dir2 + "stick.png";
      } else {
        dirStick = dir2 + tooltypes[i].stick + ".png";
      }
    }

    if(tooltypes[i].texture_pos_head_overlay) {
      let overlay = new IconTransformator.Action.AdvLayering();
  overlay.layer = android.graphics.BitmapFactory.decodeFile(new java.io.File(dir + tooltypes[i].head + "_OVERLAY" + ".png"));
  
 let toolbladebitmap = IconTransformator.transformIcon(android.graphics.BitmapFactory.decodeFile(new java.io.File(dir + tooltypes[i].head + ".png")), tooltypes[i].texture_pos_head_overlay, overlay);
    
    let filem = new java.io.File(preparedTexturesDir + "items-opaque/" + name + "_" + tooltypes[i].name + ".png");
    let cto = new java.io.FileOutputStream(filem);
  toolbladebitmap.compress(android.graphics.Bitmap.CompressFormat.PNG, 85, cto);
  cto.flush();
  cto.close();
      } else {
        let toolbladebitmap = android.graphics.BitmapFactory.decodeFile(new java.io.File(dir + tooltypes[i].head + ".png"));
        
        let filem = new java.io.File(preparedTexturesDir + "items-opaque/" + name + "_" + tooltypes[i].name + ".png");
    let cto = new java.io.FileOutputStream(filem);
  toolbladebitmap.compress(android.graphics.Bitmap.CompressFormat.PNG, 85, cto);
  cto.flush();
  cto.close();
      }
      
    let toolbladebitmap = IconTransformator.transformIcon(android.graphics.BitmapFactory.decodeFile(new java.io.File(preparedTexturesDir + "items-opaque/" + name + "_" + tooltypes[i].name + ".png")), tooltypes[i].texture_pos_head, colourlayer);
    
    let file = new java.io.File(preparedTexturesDir + "items-opaque/" + name + "_" + tooltypes[i].name + ".png");
    let cOut = new java.io.FileOutputStream(file);
  toolbladebitmap.compress(android.graphics.Bitmap.CompressFormat.PNG, 85, cOut);
  cOut.flush();
  cOut.close();
  let pcolour = colour2;
      if(tooltypes[i].colour2 != null) pcolour = tooltypes[i].colour2;
      if(tooltypes[i].stick != null) {
        let alloy_smelterlayer = new IconTransformator.Action.ColourMultiply(pcolour);
  //alloy_smelterlayer.colour = android.graphics.BitmapFactory.decodeFile(new java.io.File(dirStick));
  //alloy_smelterlayer.layerb = tooltypes[i].texture_pos_head;
 let toolbitmap = IconTransformator.transformIcon(android.graphics.BitmapFactory.decodeFile(new java.io.File(dirStick)), tooltypes[i].texture_pos_stick, alloy_smelterlayer);
    
    let fil = new java.io.File(preparedTexturesDir + "items-opaque/" + name + "_" + tooltypes[i].name + "st.png");
    let ct = new java.io.FileOutputStream(fil);
  toolbitmap.compress(android.graphics.Bitmap.CompressFormat.PNG, 85, ct);
  ct.flush();
  ct.close();
        if(tooltypes[i].handle == "stick") {
      let alloy_smelterlayer = new IconTransformator.Action.BlockingLayering();
  alloy_smelterlayer.layer = android.graphics.BitmapFactory.decodeFile(new java.io.File(preparedTexturesDir + "items-opaque/" + name + "_" + tooltypes[i].name + "st.png"));
  alloy_smelterlayer.layerb = tooltypes[i].texture_pos_head;
 let toolbitmap = IconTransformator.transformIcon(android.graphics.BitmapFactory.decodeFile(new java.io.File(preparedTexturesDir + "items-opaque/" + name + "_" + tooltypes[i].name + ".png")), tooltypes[i].texture_pos_stick, alloy_smelterlayer);
    
    let fil = new java.io.File(preparedTexturesDir + "items-opaque/" + name + "_" + tooltypes[i].name + ".png");
    let ct = new java.io.FileOutputStream(fil);
  toolbitmap.compress(android.graphics.Bitmap.CompressFormat.PNG, 85, ct);
  ct.flush();
  ct.close();
        } else if(tooltypes[i].handle == "handle") {
          let alloy_smelterlayer = new IconTransformator.Action.Layering();
  alloy_smelterlayer.layer = android.graphics.BitmapFactory.decodeFile(new java.io.File(preparedTexturesDir + "items-opaque/" + name + "_" + tooltypes[i].name + "st.png"));
  alloy_smelterlayer.layerb = tooltypes[i].texture_pos_head;
 let toolbitmap = IconTransformator.transformIcon(android.graphics.BitmapFactory.decodeFile(new java.io.File(preparedTexturesDir + "items-opaque/" + name + "_" + tooltypes[i].name + ".png")), tooltypes[i].texture_pos_stick, alloy_smelterlayer);
    
    let fil = new java.io.File(preparedTexturesDir + "items-opaque/" + name + "_" + tooltypes[i].name + ".png");
    let ct = new java.io.FileOutputStream(fil);
  toolbitmap.compress(android.graphics.Bitmap.CompressFormat.PNG, 85, ct);
  ct.flush();
  ct.close();
        }
        }
      
}
}

function addCasing(casing, types) {
  for(let i in types) {
    let r = new java.io.FileInputStream(__dir__ + "res/terrain-atlas/iconsets/" + casing + "_" + types[i] + ".png");
    new java.io.File(__dir__ + "_/terrain-atlas/" + casing + "_" + types[i] + ".png").createNewFile();
    let w = new java.io.FileOutputStream(__dir__ + "_/terrain-atlas/" + casing + "_" + types[i] + ".png");
    let cursor = null;
    while((cursor = r.read()) != -1) {
      w.write(cursor);
    }
    r.close();
    w.close();
  }
}
function addMachineTier(mat) {
  
}
function addMachineForGenerate(casing, mater, type, sides) {
  for(let mat in mater) {
    let isFront = false;
    let isSide = false;
    let isTop = false;
    let isBottom = false;
    for(let side in sides) {
      if(sides[side] == "FRONT") isFront = true;
      if(sides[side] == "SIDE") isSide = true;
      if(sides[side] == "TOP") isTop = true;
      if(sides[side] == "BOTTOM") isBottom = true;
      let sidecas = sides[side];
      let comp = "_"
  
  let alloy_smelterlayer = new IconTransformator.Action.Layering();
        if(type == "boiler" || type == "boiler_lava" || type == "boiler_solar") {
          if(type == "boiler_solar" && sides[side] == "TOP") {
            sides[side] = "";
            comp = "";
          }
          alloy_smelterlayer.layer = android.graphics.BitmapFactory.decodeFile(__dir__ + "res/terrain-atlas/iconsets/" + String.toUpperCase(type) + comp + sides[side] + ".png");
          //throw new java.io.File(__dir__ + "res/terrain-atlas/iconsets/" + String.toUpperCase(type) + comp + sides[side] + ".png").exists();
        } else {
          alloy_smelterlayer.layer = android.graphics.BitmapFactory.decodeFile(__dir__ + "res/terrain-atlas/iconsets/OVERLAY_" + sides[side] + "_STEAM_" + String.toUpperCase(type) + ".png");
  }
  
  //if(comp == "") throw sidecas;
  comp = "_";
  
  sides[side] = sidecas;
  if(sidecas == "FRONT") sidecas = "SIDE";
  
  //if(type == "boiler_solar") throw String.toUpperCase(type) + "_" + sides[side];
  
  let alloy_smelterbitmap = IconTransformator.transformIcon(android.graphics.BitmapFactory.decodeFile(__dir__ + "res/terrain-atlas/iconsets/" + casing[mat] + comp + sidecas + ".png"), coords[String.toUpperCase(type) + "_" + sides[side]], alloy_smelterlayer);
  
  let file = new java.io.File(__dir__ + "_/terrain-atlas/" + mater[mat] + "_" + type + "_" + sides[side] + ".png");
  let fOut = new java.io.FileOutputStream(file);
  alloy_smelterbitmap.compress(android.graphics.Bitmap.CompressFormat.PNG, 85, fOut);
  fOut.flush();
  fOut.close();
  
        let alloy_smelterlaye = new IconTransformator.Action.Layering();
  if(type == "boiler" || type == "boiler_solar" || type == "boiler_lava") {
          alloy_smelterlaye.layer = android.graphics.BitmapFactory.decodeFile(__dir__ + "res/terrain-atlas/iconsets/" + type.toUpperCase() + "_" + sides[side] + "_ACTIVE.png");
        } else {
  alloy_smelterlaye.layer = android.graphics.BitmapFactory.decodeFile(__dir__ + "res/terrain-atlas/iconsets/OVERLAY_" + sides[side] + "_STEAM_" + String.toUpperCase(type) + "_ACTIVE.png");
  }
  if(!(type == "boiler_solar" && sides[side] == "TOP")) {
  let alloy_smelterbitma = IconTransformator.transformIcon(android.graphics.BitmapFactory.decodeFile(__dir__ + "res/terrain-atlas/iconsets/" + casing[mat] + "_" + sidecas + ".png"), coords[String.toUpperCase(type) + "_" + sides[side]], alloy_smelterlaye);
  let fil = new java.io.File(__dir__ + "_/terrain-atlas/" + mater[mat] + "_" + type + "_" + sides[side] + "_ACTIVE.png");
  let fOu = new java.io.FileOutputStream(fil);
  alloy_smelterbitma.compress(android.graphics.Bitmap.CompressFormat.PNG, 85, fOu);
  fOu.flush();
  fOu.close();
  }}
 
  
    if(!isFront) {
    let r = new java.io.FileInputStream(__dir__ + "res/terrain-atlas/iconsets/" + casing[mat] + "_SIDE.png");
    new java.io.File(__dir__ + "_/terrain-atlas/" + mater[mat] + "_" + type + "_" + "FRONT.png").createNewFile();
    let w = new java.io.FileOutputStream(__dir__ + "_/terrain-atlas/" + mater[mat] + "_" + type + "_" + "FRONT.png");
    let cursor = null;
    while((cursor = r.read()) != -1) {
      w.write(cursor);
    }
    r.close();
    w.close();
    }
    if(!isSide) {
    let r = new java.io.FileInputStream(__dir__ + "res/terrain-atlas/iconsets/" + casing[mat] + "_SIDE.png");
    new java.io.File(__dir__ + "_/terrain-atlas/" + mater[mat] + "_" + type + "_" + "SIDE.png").createNewFile();
    let w = new java.io.FileOutputStream(__dir__ + "_/terrain-atlas/" + mater[mat] + "_" + type + "_" + "SIDE.png");
    let cursor = null;
    while((cursor = r.read()) != -1) {
      w.write(cursor);
    }
    r.close();
    w.close();
    }
    if(!isTop) {
    let r = new java.io.FileInputStream(__dir__ + "res/terrain-atlas/iconsets/" + casing[mat] + "_TOP.png");
    new java.io.File(__dir__ + "_/terrain-atlas/" + mater[mat] + "_" + type + "_" + "TOP.png").createNewFile();
    let w = new java.io.FileOutputStream(__dir__ + "_/terrain-atlas/" + mater[mat] + "_" + type + "_" + "TOP.png");
    let cursor = null;
    while((cursor = r.read()) != -1) {
      w.write(cursor);
    }
    r.close();
    w.close();
    }
    if(!isBottom) {
    let r = new java.io.FileInputStream(__dir__ + "res/terrain-atlas/iconsets/" + casing[mat] + "_BOTTOM.png");
    new java.io.File(__dir__ + "_/terrain-atlas/" + mater[mat] + "_" + type + "_" + "BOTTOM.png").createNewFile();
    let w = new java.io.FileOutputStream(__dir__ + "_/terrain-atlas/" + mater[mat] + "_" + type + "_" + "BOTTOM.png");
    let cursor = null;
    while((cursor = r.read()) != -1) {
      w.write(cursor);
    }
    r.close();
    w.close();
    }
      
  }
}


addTypeForGenerate("ingot", 0, "item", [
  {u: 10, v: 2}, {u: 11, v: 2},
  {u: 7, v: 3}, {u: 8, v: 3}, {u: 9, v: 3}, {u: 10, v: 3}, {u: 11, v: 3}, {u: 12, v: 3},
  {u: 4, v: 4}, {u: 5, v: 4}, {u: 6, v: 4}, {u: 7, v: 4}, {u: 8, v: 4}, {u: 9, v: 4}, {u: 10, v: 4}, {u: 11, v: 4}, {u: 12, v: 4}, {u: 13, v: 4},
  {u: 1, v: 5}, {u: 2, v: 5}, {u: 3, v: 5}, {u: 4, v: 5}, {u: 5, v: 5}, {u: 6, v: 5}, {u: 7, v: 5}, {u: 8, v: 5}, {u: 9, v: 5}, {u: 10, v: 5}, {u: 11, v: 5}, {u: 12, v: 5}, {u: 13, v: 5}, {u: 14, v: 5},
  {u: 0, v: 6}, {u: 1, v: 6}, {u: 2, v: 6}, {u: 3, v: 6}, {u: 4, v: 6}, {u: 5, v: 6}, {u: 6, v: 6}, {u: 7, v: 6}, {u: 8, v: 6}, {u: 9, v: 6}, {u: 10, v: 6}, {u: 11, v: 6}, {u: 12, v: 6}, {u: 13, v: 6}, {u: 14, v: 6}, {u: 15, v: 6},
  {u: 0, v: 7}, {u: 1, v: 7}, {u: 2, v: 7}, {u: 3, v: 7}, {u: 4, v: 7}, {u: 5, v: 7}, {u: 6, v: 7}, {u: 7, v: 7}, {u: 8, v: 7}, {u: 9, v: 7}, {u: 10, v: 7}, {u: 11, v: 7}, {u: 12, v: 7}, {u: 13, v: 7}, {u: 14, v: 7}, {u: 15, v: 7},
  {u: 0, v: 8}, {u: 1, v: 8}, {u: 2, v: 8}, {u: 3, v: 8}, {u: 4, v: 8}, {u: 5, v: 8}, {u: 6, v: 8}, {u: 7, v: 8}, {u: 8, v: 8}, {u: 9, v: 8}, {u: 10, v: 8}, {u: 11, v: 8}, {u: 12, v: 8}, {u: 13, v: 8}, {u: 14, v: 8}, {u: 15, v: 8},
    {u: 0, v: 9}, {u: 1, v: 9}, {u: 2, v: 9}, {u: 3, v: 9}, {u: 4, v: 9}, {u: 5, v: 9}, {u: 6, v: 9}, {u: 7, v: 9}, {u: 8, v: 9}, {u: 9, v: 9}, {u: 10, v: 9}, {u: 11, v: 9}, {u: 12, v: 9}, {u: 13, v: 9}, {u: 14, v: 9}, {u: 15, v: 9},
  {u: 0, v: 10}, {u: 1, v: 10}, {u: 2, v: 10}, {u: 3, v: 10}, {u: 4, v: 10}, {u: 5, v: 10}, {u: 6, v: 10}, {u: 7, v: 10}, {u: 8, v: 10}, {u: 9, v: 10}, {u: 10, v: 10}, {u: 11, v: 10}, {u: 12, v: 10}, {u: 13, v: 10}, {u: 14, v: 10},
  {u: 1, v: 11}, {u: 2, v: 11}, {u: 3, v: 11}, {u: 4, v: 11}, {u: 5, v: 11}, {u: 6, v: 11}, {u: 7, v: 11}, {u: 8, v: 11}, {u: 9, v: 11}, {u: 10, v: 11}, {u: 11, v: 11},
  {u: 2, v: 12}, {u: 3, v: 12}, {u: 4, v: 12}, {u: 5, v: 12}, {u: 6, v: 12}, {u: 7, v: 12}, {u: 8, v: 12},
  {u: 3, v: 13}, {u: 4, v: 13}, {u: 5, v: 13},
  ]);
addTypeForGenerate("dust", 0, "item", [
   {u: 7, v: 3}, {u: 8, v: 3}, 
   {u: 6, v: 4}, {u: 7, v: 4}, {u: 8, v: 4}, {u: 9, v: 4},
   {u: 5, v: 5}, {u: 6, v: 5}, {u: 7, v: 5}, {u: 8, v: 5}, {u: 9, v: 5}, {u: 10, v: 5},
   {u: 4, v: 6}, {u: 5, v: 6}, {u: 6, v: 6}, {u: 7, v: 6}, {u: 8, v: 6}, {u: 9, v: 6}, {u: 10, v: 6}, {u: 11, v: 6},
   {u: 3, v: 7}, {u: 4, v: 7}, {u: 5, v: 7}, {u: 6, v: 7}, {u: 7, v: 7}, {u: 8, v: 7}, {u: 9, v: 7}, {u: 10, v: 7}, {u: 11, v: 7}, {u: 12, v: 7},
   {u: 2, v: 8}, {u: 3, v: 8}, {u: 4, v: 8}, {u: 5, v: 8}, {u: 6, v: 8}, {u: 7, v: 8}, {u: 8, v: 8}, {u: 9, v: 8}, {u: 10, v: 8}, {u: 11, v: 8}, {u: 12, v: 8}, {u: 13, v: 8},
   {u: 2, v: 9}, {u: 3, v: 9}, {u: 4, v: 9}, {u: 5, v: 9}, {u: 6, v: 9}, {u: 7, v: 9}, {u: 8, v: 9}, {u: 9, v: 9}, {u: 10, v: 9}, {u: 11, v: 9}, {u: 12, v: 9}, {u: 13, v: 9},
   {u: 2, v: 10}, {u: 3, v: 10}, {u: 4, v: 10}, {u: 5, v: 10}, {u: 6, v: 10}, {u: 7, v: 10}, {u: 8, v: 10}, {u: 9, v: 10}, {u: 10, v: 10}, {u: 11, v: 10}, {u: 12, v: 10}, {u: 13, v: 10},
   {u: 3, v: 11}, {u: 4, v: 11}, {u: 5, v: 11}, {u: 6, v: 11}, {u: 7, v: 11}, {u: 8, v: 11}, {u: 9, v: 11}, {u: 10, v: 11}, {u: 11, v: 11}, {u: 12, v: 11},
   {u: 4, v: 12}, {u: 5, v: 12}, {u: 6, v: 12}, {u: 7, v: 12}, {u: 8, v: 12}, {u: 9, v: 12}, {u: 10, v: 12}, {u: 11, v: 12},
   {u: 6, v: 13}, {u: 7, v: 13}, {u: 8, v: 13}, {u: 9, v: 13},
  ]);
addTypeForGenerate("plate", GENERATE_PLATE, "item", [
    {u: 4, v: 2}, {u: 5, v: 2}, {u: 6, v: 2}, 
    {u: 4, v: 3}, {u: 5, v: 3}, {u: 6, v: 3}, {u: 7, v: 3}, {u: 8, v: 3}, {u: 9, v: 3}, {u: 10, v: 3},
    {u: 4, v: 4}, {u: 5, v: 4}, {u: 6, v: 4}, {u: 7, v: 4}, {u: 8, v: 4}, {u: 9, v: 4}, {u: 10, v: 4}, {u: 11, v: 4}, {u: 12, v: 4}, {u: 13, v: 4}, {u: 14, v: 4},
    {u: 3, v: 5}, {u: 4, v: 5}, {u: 5, v: 5}, {u: 6, v: 5}, {u: 7, v: 5}, {u: 8, v: 5}, {u: 9, v: 5}, {u: 10, v: 5}, {u: 11, v: 5}, {u: 12, v: 5}, {u: 13, v: 5}, {u: 14, v: 5},
    {u: 3, v: 6}, {u: 4, v: 6}, {u: 5, v: 6}, {u: 6, v: 6}, {u: 7, v: 6}, {u: 8, v: 6}, {u: 9, v: 6}, {u: 10, v: 6}, {u: 11, v: 6}, {u: 12, v: 6}, {u: 13, v: 6}, {u: 14, v: 6},
     {u: 3, v: 7}, {u: 4, v: 7}, {u: 5, v: 7}, {u: 6, v: 7}, {u: 7, v: 7}, {u: 8, v: 7}, {u: 9, v: 7}, {u: 10, v: 7}, {u: 11, v: 7}, {u: 12, v: 7}, {u: 13, v: 7},
     {u: 3, v: 8}, {u: 4, v: 8}, {u: 5, v: 8}, {u: 6, v: 8}, {u: 7, v: 8}, {u: 8, v: 8}, {u: 9, v: 8}, {u: 10, v: 8}, {u: 11, v: 8}, {u: 12, v: 8}, {u: 13, v: 8},
     {u: 2, v: 9}, {u: 3, v: 9}, {u: 4, v: 9}, {u: 5, v: 9}, {u: 6, v: 9}, {u: 7, v: 9}, {u: 8, v: 9}, {u: 9, v: 9}, {u: 10, v: 9}, {u: 11, v: 9}, {u: 12, v: 9}, {u: 13, v: 9},
     {u: 2, v: 10}, {u: 3, v: 10}, {u: 4, v: 10}, {u: 5, v: 10}, {u: 6, v: 10}, {u: 7, v: 10}, {u: 8, v: 10}, {u: 9, v: 10}, {u: 10, v: 10}, {u: 11, v: 10}, {u: 12, v: 10}, {u: 13, v: 10},
      {u: 2, v: 11}, {u: 3, v: 11}, {u: 4, v: 11}, {u: 5, v: 11}, {u: 6, v: 11}, {u: 7, v: 11}, {u: 8, v: 11}, {u: 9, v: 11}, {u: 10, v: 11}, {u: 11, v: 11}, {u: 12, v: 11},
      {u: 2, v: 12}, {u: 3, v: 12}, {u: 4, v: 12}, {u: 5, v: 12}, {u: 6, v: 12}, {u: 7, v: 12}, {u: 8, v: 12}, {u: 9, v: 12}, {u: 10, v: 12}, {u: 11, v: 12}, {u: 12, v: 12},
      {u: 5, v: 13}, {u: 6, v: 13}, {u: 7, v: 13}, {u: 8, v: 13}, {u: 9, v: 13}, {u: 10, v: 13}, {u: 11, v: 13}, {u: 12, v: 13},
      {u: 9, v: 14}, {u: 10, v: 14}, {u: 11, v: 14},
  ]);
addTypeForGenerate("plateDense", GENERATE_DENSE, "item", [
     {u: 4, v: 2}, {u: 5, v: 2}, {u: 6, v: 2}, 
    {u: 4, v: 3}, {u: 5, v: 3}, {u: 6, v: 3}, {u: 7, v: 3}, {u: 8, v: 3}, {u: 9, v: 3}, {u: 10, v: 3},
    {u: 4, v: 4}, {u: 5, v: 4}, {u: 6, v: 4}, {u: 7, v: 4}, {u: 8, v: 4}, {u: 9, v: 4}, {u: 10, v: 4}, {u: 11, v: 4}, {u: 12, v: 4}, {u: 13, v: 4}, {u: 14, v: 4},
    {u: 3, v: 5}, {u: 4, v: 5}, {u: 5, v: 5}, {u: 6, v: 5}, {u: 7, v: 5}, {u: 8, v: 5}, {u: 9, v: 5}, {u: 10, v: 5}, {u: 11, v: 5}, {u: 12, v: 5}, {u: 13, v: 5}, {u: 14, v: 5},
    {u: 3, v: 6}, {u: 4, v: 6}, {u: 5, v: 6}, {u: 6, v: 6}, {u: 7, v: 6}, {u: 8, v: 6}, {u: 9, v: 6}, {u: 10, v: 6}, {u: 11, v: 6}, {u: 12, v: 6}, {u: 13, v: 6}, {u: 14, v: 6},
     {u: 3, v: 7}, {u: 4, v: 7}, {u: 5, v: 7}, {u: 6, v: 7}, {u: 7, v: 7}, {u: 8, v: 7}, {u: 9, v: 7}, {u: 10, v: 7}, {u: 11, v: 7}, {u: 12, v: 7}, {u: 13, v: 7},
     {u: 3, v: 7}, {u: 4, v: 7}, {u: 5, v: 7}, {u: 6, v: 7}, {u: 7, v: 7}, {u: 8, v: 7}, {u: 9, v: 7}, {u: 10, v: 7}, {u: 11, v: 7}, {u: 12, v: 7}, {u: 13, v: 7},
     {u: 2, v: 8}, {u: 3, v: 8}, {u: 4, v: 8}, {u: 5, v: 8}, {u: 6, v: 8}, {u: 7, v: 8}, {u: 8, v: 8}, {u: 9, v: 8}, {u: 10, v: 8}, {u: 11, v: 8}, {u: 12, v: 8}, {u: 13, v: 8},
     {u: 2, v: 9}, {u: 3, v: 9}, {u: 4, v: 9}, {u: 5, v: 9}, {u: 6, v: 9}, {u: 7, v: 9}, {u: 8, v: 9}, {u: 9, v: 9}, {u: 10, v: 9}, {u: 11, v: 9}, {u: 12, v: 9}, {u: 13, v: 9},
      {u: 2, v: 10}, {u: 3, v: 10}, {u: 4, v: 10}, {u: 5, v: 10}, {u: 6, v: 10}, {u: 7, v: 10}, {u: 8, v: 10}, {u: 9, v: 10}, {u: 10, v: 10}, {u: 11, v: 10}, {u: 12, v: 10},
      {u: 2, v: 11}, {u: 3, v: 11}, {u: 4, v: 11}, {u: 5, v: 11}, {u: 6, v: 11}, {u: 7, v: 11}, {u: 8, v: 11}, {u: 9, v: 11}, {u: 10, v: 11}, {u: 11, v: 11}, {u: 12, v: 12},
      {u: 5, v: 13}, {u: 6, v: 13}, {u: 7, v: 13}, {u: 8, v: 13}, {u: 9, v: 13}, {u: 10, v: 13}, {u: 11, v: 13}, {u: 12, v: 13},
      {u: 9, v: 14}, {u: 10, v: 14}, {u: 11, v: 14},
  ]);
addTypeForGenerate("stick", GENERATE_ROD, "item", [
    {u: 12, v: 2}, {u: 13, v: 2}, 
    {u: 11, v: 3}, {u: 12, v: 3}, {u: 13, v: 3}, 
    {u: 10, v: 4}, {u: 11, v: 4}, {u: 12, v: 4}, 
    {u: 9, v: 5}, {u: 10, v: 5}, {u: 11, v: 5},
    {u: 8, v: 6}, {u: 9, v: 6}, {u: 10, v: 6},
    {u: 7, v: 7}, {u: 8, v: 7}, {u: 9, v: 7},
    {u: 6, v: 8}, {u: 7, v: 8}, {u: 8, v: 8},
    {u: 5, v: 9}, {u: 6, v: 9}, {u: 7, v: 9},
    {u: 4, v: 10}, {u: 5, v: 10}, {u: 6, v: 10},
    {u: 3, v: 11}, {u: 4, v: 11}, {u: 5, v: 11},
    {u: 2, v: 12}, {u: 3, v: 12}, {u: 4, v: 12},
    {u: 1, v: 13}, {u: 2, v: 13}, {u: 3, v: 13},
    {u: 1, v: 14}, {u: 2, v: 14},
  ]);
addTypeForGenerate("stickLong", GENERATE_LONG_ROD, "item", [
   {u: 14, v: 0}, {u: 15, v: 0}, 
   {u: 13, v: 1}, {u: 14, v: 1}, 
    {u: 12, v: 2}, {u: 13, v: 2}, 
    {u: 11, v: 3}, {u: 12, v: 3},
    {u: 10, v: 4}, {u: 11, v: 4},
    {u: 9, v: 5}, {u: 10, v: 5},
    {u: 8, v: 6}, {u: 9, v: 6},
    {u: 7, v: 7}, {u: 8, v: 7},
    {u: 6, v: 8}, {u: 7, v: 8},
    {u: 5, v: 9}, {u: 6, v: 9},
    {u: 4, v: 10}, {u: 5, v: 10},
    {u: 3, v: 11}, {u: 4, v: 11},
    {u: 2, v: 12}, {u: 3, v: 12},
    {u: 1, v: 13}, {u: 2, v: 13},
    {u: 0, v: 14}, {u: 1, v: 14},
    {u: 0, v: 15},
  ]);
addTypeForGenerate("dustSmall", 0, "item", [
   {u: 7, v: 5}, {u: 8, v: 5},
   {u: 6, v: 6}, {u: 7, v: 6}, {u: 8, v: 6}, {u: 9, v: 6}, 
   {u: 5, v: 7}, {u: 6, v: 7}, {u: 7, v: 7}, {u: 8, v: 7}, {u: 9, v: 7}, {u: 10, v: 7},
   {u: 4, v: 8}, {u: 5, v: 8}, {u: 6, v: 8}, {u: 7, v: 8}, {u: 8, v: 8}, {u: 9, v: 8}, {u: 10, v: 8}, {u: 11, v: 8},
   {u: 4, v: 9}, {u: 5, v: 9}, {u: 6, v: 9}, {u: 7, v: 9}, {u: 8, v: 9}, {u: 9, v: 9}, {u: 10, v: 9}, {u: 11, v: 9},
      {u: 4, v: 10}, {u: 5, v: 10}, {u: 6, v: 10}, {u: 7, v: 10}, {u: 8, v: 10}, {u: 9, v: 10}, {u: 10, v: 10}, {u: 11, v: 10},
   {u: 6, v: 11}, {u: 7, v: 11}, {u: 8, v: 11}, {u: 9, v: 11},
  ]);
addTypeForGenerate("dustTiny", 0, "item", [
  {u: 7, v: 6}, {u: 8, v: 6},
   {u: 6, v: 7}, {u: 7, v: 7}, {u: 8, v: 7}, {u: 9, v: 7}, 
   {u: 5, v: 8}, {u: 6, v: 8}, {u: 7, v: 8}, {u: 8, v: 8}, {u: 9, v: 8}, {u: 10, v: 8},
   {u: 5, v: 9}, {u: 6, v: 9}, {u: 7, v: 9}, {u: 8, v: 9}, {u: 9, v: 9}, {u: 10, v: 9},
   {u: 6, v: 10}, {u: 7, v: 10}, {u: 8, v: 10}, {u: 9, v: 10},
  ]);
addTypeForGenerate("foil", GENERATE_FOIL, "item", [
  {u: 6, v: 1}, {u: 7, v: 1}, {u: 8, v: 1}, {u: 9, v: 1},
   {u: 5, v: 2}, {u: 6, v: 2}, {u: 7, v: 2}, {u: 8, v: 2}, {u: 9, v: 2}, {u: 10, v: 2},
   {u: 5, v: 3}, {u: 6, v: 3}, {u: 7, v: 3}, {u: 8, v: 3}, {u: 9, v: 3}, {u: 10, v: 3}, {u: 11, v: 3},
   {u: 5, v: 4}, {u: 6, v: 4}, {u: 7, v: 4}, {u: 8, v: 4}, {u: 9, v: 4}, {u: 10, v: 4}, {u: 11, v: 4}, {u: 12, v: 4}, 
   {u: 5, v: 5}, {u: 6, v: 5}, {u: 7, v: 5}, {u: 8, v: 5}, {u: 9, v: 5}, {u: 10, v: 5}, {u: 11, v: 5}, {u: 12, v: 5}, {u: 13, v: 5},
   {u: 6, v: 6}, {u: 7, v: 6}, {u: 8, v: 6}, {u: 9, v: 6}, {u: 10, v: 6}, {u: 11, v: 6}, {u: 12, v: 6}, {u: 13, v: 6},
   {u: 6, v: 7}, {u: 7, v: 7}, {u: 8, v: 7}, {u: 9, v: 7}, {u: 10, v: 7}, {u: 11, v: 7}, {u: 12, v: 7}, {u: 13, v: 7},
   {u: 5, v: 8}, {u: 6, v: 8}, {u: 7, v: 8}, {u: 8, v: 8}, {u: 9, v: 8}, {u: 10, v: 8}, {u: 11, v: 8}, {u: 12, v: 8}, {u: 13, v: 8},
   {u: 3, v: 9}, {u: 4, v: 9}, {u: 5, v: 9}, {u: 6, v: 9}, {u: 7, v: 9}, {u: 8, v: 9}, {u: 9, v: 9}, {u: 10, v: 9}, {u: 11, v: 9}, {u: 12, v: 9},
   {u: 1, v: 10}, {u: 2, v: 10}, {u: 3, v: 10}, {u: 4, v: 10}, {u: 5, v: 10}, {u: 6, v: 10}, {u: 7, v: 10}, {u: 8, v: 10}, {u: 9, v: 10}, {u: 10, v: 10}, {u: 11, v: 10},
      {u: 2, v: 11}, {u: 3, v: 11}, {u: 4, v: 11}, {u: 5, v: 11}, {u: 6, v: 11}, {u: 7, v: 11}, {u: 8, v: 11}, {u: 9, v: 11}, {u: 10, v: 11},
    {u: 3, v: 12}, {u: 4, v: 12}, {u: 5, v: 12}, {u: 6, v: 12}, {u: 7, v: 12}, {u: 8, v: 12}, {u: 9, v: 12},
    {u: 3, v: 13}, {u: 4, v: 13}, {u: 5, v: 13}, {u: 6, v: 13}, {u: 7, v: 13}, {u: 8, v: 13},
    {u: 4, v: 14}, {u: 5, v: 14}, {u: 6, v: 14},
  ]);
addTypeForGenerate("wireFine", GENERATE_FINE_WIRE, "item", [
    {u: 5, v: 0}, 
    {u: 5, v: 1}, 
    {u: 5, v: 2}, {u: 7, v: 2}, {u: 8, v: 2}, 
    {u: 4, v: 3}, {u: 5, v: 3}, {u: 6, v: 3}, {u: 7, v: 3}, {u: 8, v: 3}, {u: 9, v: 3}, {u: 10, v: 3}, 
    {u: 4, v: 4}, {u: 5, v: 4}, {u: 6, v: 4}, {u: 7, v: 4}, {u: 8, v: 4}, {u: 9, v: 4}, {u: 10, v: 4}, {u: 11, v: 4},
   {u: 3, v: 5}, {u: 4, v: 5}, {u: 5, v: 5}, {u: 10, v: 5}, {u: 11, v: 5}, {u: 12, v: 5},
   {u: 3, v: 6}, {u: 4, v: 6}, {u: 11, v: 6}, {u: 12, v: 6},
   {u: 2, v: 7}, {u: 3, v: 7}, {u: 4, v: 7}, {u: 11, v: 7}, {u: 12, v: 7}, {u: 13, v: 7},
   {u: 2, v: 8}, {u: 3, v: 8}, {u: 4, v: 8}, {u: 11, v: 8}, {u: 12, v: 8}, {u: 13, v: 8},
   {u: 3, v: 9}, {u: 4, v: 9}, {u: 11, v: 9}, {u: 12, v: 9},
   {u: 3, v: 10}, {u: 4, v: 10}, {u: 5, v: 10}, {u: 10, v: 10}, {u: 11, v: 10}, {u: 12, v: 10},
   {u: 4, v: 11}, {u: 5, v: 11}, {u: 6, v: 11}, {u: 7, v: 11}, {u: 8, v: 11}, {u: 9, v: 11}, {u: 10, v: 11}, {u: 11, v: 11},
   {u: 5, v: 12}, {u: 6, v: 12}, {u: 7, v: 12}, {u: 8, v: 12}, {u: 9, v: 12}, {u: 10, v: 12},
   {u: 7, v: 13}, {u: 8, v: 13},
  ]);
addTypeForGenerate("gearGtSmall", GENERATE_SMALL_GEAR, "item", [
  {u: 7, v: 3}, {u: 8, v: 3},
  {u: 4, v: 4}, {u: 5, v: 4}, {u: 7, v: 4}, {u: 8, v: 4}, {u: 10, v: 4}, {u: 11, v: 4},
  {u: 4, v: 5}, {u: 5, v: 5}, {u: 6, v: 5}, {u: 7, v: 5}, {u: 8, v: 5}, {u: 9, v: 5}, {u: 10, v: 5}, {u: 11, v: 5},
  {u: 5, v: 6}, {u: 6, v: 6}, {u: 7, v: 6}, {u: 8, v: 6}, {u: 9, v: 6}, {u: 10, v: 6},
  {u: 3, v: 7}, {u: 4, v: 7}, {u: 5, v: 7}, {u: 6, v: 7}, {u: 9, v: 7}, {u: 10, v: 7}, {u: 11, v: 7}, {u: 12, v: 7},
  {u: 3, v: 8}, {u: 4, v: 8}, {u: 5, v: 8}, {u: 6, v: 8}, {u: 9, v: 8}, {u: 10, v: 8}, {u: 11, v: 8}, {u: 12, v: 8},
  {u: 5, v: 9}, {u: 6, v: 9}, {u: 7, v: 9}, {u: 8, v: 9}, {u: 9, v: 9}, {u: 10, v: 9},
  {u: 4, v: 10}, {u: 5, v: 10}, {u: 7, v: 10}, {u: 8, v: 10}, {u: 10, v: 10}, {u: 11, v: 10},
  {u: 4, v: 11}, {u: 5, v: 11}, {u: 7, v: 11}, {u: 8, v: 11}, {u: 10, v: 11}, {u: 11, v: 11},
  {u: 7, v: 12}, {u: 8, v: 12},
  ]);
addTypeForGenerate("gearGt", GENERATE_GEAR, "item", [
    {u: 6, v: 1}, {u: 7, v: 1}, {u: 8, v: 1}, {u: 9, v: 1},
  {u: 3, v: 2}, {u: 4, v: 2}, {u: 6, v: 2}, {u: 7, v: 2}, {u: 8, v: 2}, {u: 9, v: 2}, {u: 11, v: 2}, {u: 12, v: 2},
  {u: 2, v: 3}, {u: 3, v: 3}, {u: 4, v: 3}, {u: 5, v: 3}, {u: 6, v: 3}, {u: 7, v: 3}, {u: 8, v: 3}, {u: 9, v: 3}, {u: 10, v: 3}, {u: 11, v: 3}, {u: 12, v: 3}, {u: 13, v: 3},
  {u: 2, v: 4}, {u: 3, v: 4}, {u: 4, v: 4}, {u: 5, v: 4}, {u: 6, v: 4}, {u: 7, v: 4}, {u: 8, v: 4}, {u: 9, v: 4}, {u: 10, v: 4}, {u: 11, v: 4}, {u: 12, v: 4}, {u: 13, v: 4},
  {u: 3, v: 5}, {u: 4, v: 5}, {u: 5, v: 5}, {u: 6, v: 5}, {u: 7, v: 5}, {u: 8, v: 5}, {u: 9, v: 5}, {u: 10, v: 5}, {u: 11, v: 5}, {u: 12, v: 5},
  {u: 1, v: 6}, {u: 2, v: 6}, {u: 3, v: 6}, {u: 4, v: 6}, {u: 5, v: 6}, {u: 6, v: 6}, {u: 9, v: 6}, {u: 10, v: 6}, {u: 11, v: 6}, {u: 12, v: 6}, {u: 13, v: 6}, {u: 14, v: 6},
   {u: 1, v: 7}, {u: 2, v: 7}, {u: 3, v: 7}, {u: 4, v: 7}, {u: 5, v: 7}, {u: 10, v: 7}, {u: 11, v: 7}, {u: 12, v: 7}, {u: 13, v: 7}, {u: 14, v: 7},
    {u: 1, v: 8}, {u: 2, v: 8}, {u: 3, v: 8}, {u: 4, v: 8}, {u: 5, v: 8}, {u: 10, v: 8}, {u: 11, v: 8}, {u: 12, v: 8}, {u: 13, v: 8}, {u: 14, v: 8},
     {u: 1, v: 9}, {u: 2, v: 9}, {u: 3, v: 9}, {u: 4, v: 9}, {u: 5, v: 9}, {u: 6, v: 9}, {u: 9, v: 9}, {u: 10, v: 9}, {u: 11, v: 9}, {u: 12, v: 9}, {u: 13, v: 9}, {u: 14, v: 9},
   {u: 3, v: 10}, {u: 4, v: 10}, {u: 5, v: 10}, {u: 6, v: 10}, {u: 7, v: 10}, {u: 8, v: 10}, {u: 9, v: 10}, {u: 10, v: 10}, {u: 11, v: 10}, {u: 12, v: 10},
    {u: 2, v: 11}, {u: 3, v: 11}, {u: 4, v: 11}, {u: 5, v: 11}, {u: 6, v: 11}, {u: 7, v: 11}, {u: 8, v: 11}, {u: 9, v: 11}, {u: 10, v: 11}, {u: 11, v: 11}, {u: 12, v: 11}, {u: 13, v: 11},
    {u: 2, v: 12}, {u: 3, v: 12}, {u: 4, v: 12}, {u: 5, v: 12}, {u: 6, v: 12}, {u: 7, v: 12}, {u: 8, v: 12}, {u: 9, v: 12}, {u: 10, v: 12}, {u: 11, v: 12}, {u: 12, v: 12}, {u: 13, v: 12},
    {u: 3, v: 13}, {u: 4, v: 13}, {u: 6, v: 13}, {u: 7, v: 13}, {u: 8, v: 13}, {u: 9, v: 13}, {u: 11, v: 13}, {u: 12, v: 13},
    {u: 6, v: 14}, {u: 7, v: 14}, {u: 8, v: 14}, {u: 9, v: 14},
  ]);
addTypeForGenerate("ring", GENERATE_RING, "item", [
    {u: 5, v: 3}, {u: 6, v: 3}, {u: 7, v: 3}, {u: 8, v: 3}, {u: 9, v: 3}, {u: 10, v: 3},
    {u: 4, v: 4}, {u: 5, v: 4}, {u: 6, v: 4}, {u: 7, v: 4}, {u: 8, v: 4}, {u: 9, v: 4}, {u: 10, v: 4}, {u: 11, v: 4},
    {u: 3, v: 5}, {u: 4, v: 5}, {u: 5, v: 5}, {u: 10, v: 5}, {u: 11, v: 5}, {u: 12, v: 5},
    {u: 3, v: 6}, {u: 4, v: 6}, {u: 11, v: 6}, {u: 12, v: 6},
    {u: 3, v: 7}, {u: 4, v: 7}, {u: 11, v: 7}, {u: 12, v: 7},
    {u: 3, v: 8}, {u: 4, v: 8}, {u: 11, v: 8}, {u: 12, v: 8},
    {u: 3, v: 9}, {u: 4, v: 9}, {u: 11, v: 9}, {u: 12, v: 9},
    {u: 3, v: 10}, {u: 4, v: 10}, {u: 5, v: 10}, {u: 10, v: 10}, {u: 11, v: 10}, {u: 12, v: 10},
    {u: 4, v: 11}, {u: 5, v: 11}, {u: 6, v: 11}, {u: 7, v: 11}, {u: 8, v: 11}, {u: 9, v: 11}, {u: 10, v: 11}, {u: 11, v: 11},
    {u: 5, v: 12}, {u: 6, v: 12}, {u: 7, v: 12}, {u: 8, v: 12}, {u: 9, v: 12}, {u: 10, v: 12},
  ]);
addTypeForGenerate("bolt", GENERATE_BOLT_SCREW, "item", [
  {u: 10, v: 5},
  {u: 9, v: 6}, {u: 10, v: 6}, {u: 11, v: 6},
  {u: 8, v: 7}, {u: 9, v: 7}, {u: 10, v: 7},
  {u: 7, v: 8}, {u: 8, v: 8}, {u: 9, v: 8},
  {u: 6, v: 9}, {u: 7, v: 9}, {u: 8, v: 9},
  {u: 5, v: 10}, {u: 6, v: 10}, {u: 7, v: 10},
  {u: 6, v: 11},
  ]);
addTypeForGenerate("screw", GENERATE_BOLT_SCREW, "item", [
  {u: 9, v: 4},
  {u: 9, v: 5}, {u: 10, v: 5},
  {u: 9, v: 6}, {u: 10, v: 6}, {u: 11, v: 6},
  {u: 8, v: 7}, {u: 9, v: 7}, {u: 10, v: 7}, {u: 11, v: 7}, {u: 12, v: 7},
  {u: 7, v: 8}, {u: 8, v: 8}, {u: 9, v: 8},
  {u: 6, v: 9}, {u: 7, v: 9}, {u: 8, v: 9},
  {u: 5, v: 10}, {u: 6, v: 10}, {u: 7, v: 10},
  {u: 5, v: 11}, {u: 6, v: 11}
  ]);
//MaterialDictionary.registerForm(ItemID.gtmetaitem01, GENERATE_TURBINE_BLADE, "gear");
addTypeForGenerate("nugget", 0, "item", [
  {u: 6, v: 4}, {u: 7, v: 4}, {u: 8, v: 4},
  {u: 5, v: 5}, {u: 6, v: 5}, {u: 7, v: 5}, {u: 8, v: 5}, {u: 9, v: 5}, 
  {u: 5, v: 6}, {u: 6, v: 6}, {u: 7, v: 6}, {u: 8, v: 6}, {u: 9, v: 6}, {u: 10, v: 6},
  {u: 5, v: 7}, {u: 6, v: 7}, {u: 7, v: 7}, {u: 8, v: 7}, {u: 9, v: 7}, {u: 10, v: 7},
  {u: 6, v: 8}, {u: 7, v: 8}, {u: 8, v: 8}, {u: 9, v: 8}, 
  {u: 6, v: 9}, {u: 7, v: 9}, {u: 8, v: 9}, {u: 9, v: 9}, 
  {u: 6, v: 10}, {u: 7, v: 10}, {u: 8, v: 10}, {u: 9, v: 10},
  {u: 7, v: 11}, {u: 8, v: 11},
  ], null);

addTypeForGenerate("gem", 0, "item", [
     {u: 6, v: 2}, {u: 7, v: 2}, {u: 8, v: 2}, {u: 9, v: 2}, {u: 10, v: 2},
      {u: 5, v: 3}, {u: 6, v: 3}, {u: 7, v: 3}, {u: 8, v: 3}, {u: 9, v: 3}, {u: 10, v: 3}, {u: 11, v: 3},
       {u: 4, v: 4}, {u: 5, v: 4}, {u: 6, v: 4}, {u: 7, v: 4}, {u: 8, v: 4}, {u: 9, v: 4}, {u: 10, v: 4}, {u: 11, v: 4}, {u: 12, v: 4},
      {u: 3, v: 5}, {u: 4, v: 5}, {u: 5, v: 5}, {u: 6, v: 5}, {u: 7, v: 5}, {u: 8, v: 5}, {u: 9, v: 5}, {u: 10, v: 5}, {u: 11, v: 5}, {u: 12, v: 5}, {u: 13, v: 5},
       {u: 2, v: 6}, {u: 3, v: 6}, {u: 4, v: 6}, {u: 5, v: 6}, {u: 6, v: 6}, {u: 7, v: 6}, {u: 8, v: 6}, {u: 9, v: 6}, {u: 10, v: 6}, {u: 11, v: 6}, {u: 12, v: 6}, {u: 13, v: 6}, {u: 14, v: 6},
        {u: 2, v: 7}, {u: 3, v: 7}, {u: 4, v: 7}, {u: 5, v: 7}, {u: 6, v: 7}, {u: 7, v: 7}, {u: 8, v: 7}, {u: 9, v: 7}, {u: 10, v: 7}, {u: 11, v: 7}, {u: 12, v: 7}, {u: 13, v: 7}, {u: 14, v: 7},
         {u: 2, v: 8}, {u: 3, v: 8}, {u: 4, v: 8}, {u: 5, v: 8}, {u: 6, v: 8}, {u: 7, v: 8}, {u: 8, v: 8}, {u: 9, v: 8}, {u: 10, v: 8}, {u: 11, v: 8}, {u: 12, v: 8}, {u: 13, v: 8}, {u: 14, v: 8},
          {u: 2, v: 9}, {u: 3, v: 9}, {u: 4, v: 9}, {u: 5, v: 9}, {u: 6, v: 9}, {u: 7, v: 9}, {u: 8, v: 9}, {u: 9, v: 9}, {u: 10, v: 9}, {u: 11, v: 9}, {u: 12, v: 9}, {u: 13, v: 9}, {u: 14, v: 9},
           {u: 2, v: 10}, {u: 3, v: 10}, {u: 4, v: 10}, {u: 5, v: 10}, {u: 6, v: 10}, {u: 7, v: 10}, {u: 8, v: 10}, {u: 9, v: 10}, {u: 10, v: 10}, {u: 11, v: 10}, {u: 12, v: 10}, {u: 13, v: 10}, {u: 14, v: 10},
            {u: 3, v: 11}, {u: 4, v: 11}, {u: 5, v: 11}, {u: 6, v: 11}, {u: 7, v: 11}, {u: 8, v: 11}, {u: 9, v: 11}, {u: 10, v: 11}, {u: 11, v: 11}, {u: 12, v: 11}, {u: 13, v: 11},
             {u: 4, v: 12}, {u: 5, v: 12}, {u: 6, v: 12}, {u: 7, v: 12}, {u: 8, v: 12}, {u: 9, v: 12}, {u: 10, v: 12}, {u: 11, v: 12}, {u: 12, v: 12},
         {u: 5, v: 13}, {u: 6, v: 13}, {u: 7, v: 13}, {u: 8, v: 13}, {u: 9, v: 13}, {u: 10, v: 13}, {u: 11, v: 13},
         {u: 6, v: 14}, {u: 7, v: 14}, {u: 8, v: 14}, {u: 9, v: 14}, {u: 10, v: 14},
  ], null, {"DIAMOND": [
     {u: 6, v: 2}, {u: 7, v: 2}, {u: 8, v: 2}, {u: 9, v: 2},
      {u: 5, v: 3}, {u: 6, v: 3}, {u: 7, v: 3}, {u: 8, v: 3}, {u: 9, v: 3}, {u: 10, v: 3},
       {u: 4, v: 4}, {u: 5, v: 4}, {u: 6, v: 4}, {u: 7, v: 4}, {u: 8, v: 4}, {u: 9, v: 4}, {u: 10, v: 4}, {u: 11, v: 4},
      {u: 3, v: 5}, {u: 4, v: 5}, {u: 5, v: 5}, {u: 6, v: 5}, {u: 7, v: 5}, {u: 8, v: 5}, {u: 9, v: 5}, {u: 10, v: 5}, {u: 11, v: 5},
       {u: 3, v: 6}, {u: 4, v: 6}, {u: 5, v: 6}, {u: 6, v: 6}, {u: 7, v: 6}, {u: 8, v: 6}, {u: 9, v: 6}, {u: 10, v: 6}, {u: 11, v: 6}, {u: 12, v: 6},
        {u: 2, v: 7}, {u: 3, v: 7}, {u: 4, v: 7}, {u: 5, v: 7}, {u: 6, v: 7}, {u: 7, v: 7}, {u: 8, v: 7}, {u: 9, v: 7}, {u: 10, v: 7}, {u: 11, v: 7}, {u: 12, v: 7},
         {u: 2, v: 8}, {u: 3, v: 8}, {u: 4, v: 8}, {u: 5, v: 8}, {u: 6, v: 8}, {u: 7, v: 8}, {u: 8, v: 8}, {u: 9, v: 8}, {u: 10, v: 8}, {u: 11, v: 8}, {u: 12, v: 8}, {u: 13, v: 8},
          {u: 2, v: 9}, {u: 3, v: 9}, {u: 4, v: 9}, {u: 5, v: 9}, {u: 6, v: 9}, {u: 7, v: 9}, {u: 8, v: 9}, {u: 9, v: 9}, {u: 10, v: 9}, {u: 11, v: 9}, {u: 12, v: 9}, {u: 13, v: 9},
           {u: 2, v: 10}, {u: 3, v: 10}, {u: 4, v: 10}, {u: 5, v: 10}, {u: 6, v: 10}, {u: 7, v: 10}, {u: 8, v: 10}, {u: 9, v: 10}, {u: 10, v: 10}, {u: 11, v: 10}, {u: 12, v: 10}, {u: 13, v: 10},
            {u: 3, v: 11}, {u: 4, v: 11}, {u: 5, v: 11}, {u: 6, v: 11}, {u: 7, v: 11}, {u: 8, v: 11}, {u: 9, v: 11}, {u: 10, v: 11}, {u: 11, v: 11}, {u: 12, v: 11},
             {u: 3, v: 12}, {u: 4, v: 12}, {u: 5, v: 12}, {u: 6, v: 12}, {u: 7, v: 12}, {u: 8, v: 12}, {u: 9, v: 12}, {u: 10, v: 12}, {u: 11, v: 12}, {u: 12, v: 12},
         {u: 4, v: 13}, {u: 5, v: 13}, {u: 6, v: 13}, {u: 7, v: 13}, {u: 8, v: 13}, {u: 9, v: 13}, {u: 10, v: 13}, {u: 11, v: 13},
         {u: 5, v: 14}, {u: 6, v: 14}, {u: 7, v: 14}, {u: 8, v: 14}, {u: 9, v: 14}, {u: 10, v: 14},
    ], "FLINT": [
      {u: 8, v: 2}, {u: 9, v: 2},
      {u: 7, v: 3}, {u: 8, v: 3}, {u: 9, v: 3}, {u: 10, v: 3},
       {u: 6, v: 4}, {u: 7, v: 4}, {u: 8, v: 4}, {u: 9, v: 4}, {u: 10, v: 4},
      {u: 5, v: 5}, {u: 6, v: 5}, {u: 7, v: 5}, {u: 8, v: 5}, {u: 9, v: 5}, {u: 10, v: 5}, {u: 11, v: 5},
       {u: 4, v: 6}, {u: 5, v: 6}, {u: 6, v: 6}, {u: 7, v: 6}, {u: 8, v: 6}, {u: 9, v: 6}, {u: 10, v: 6}, {u: 11, v: 6},
        {u: 3, v: 7}, {u: 4, v: 7}, {u: 5, v: 7}, {u: 6, v: 7}, {u: 7, v: 7}, {u: 8, v: 7}, {u: 9, v: 7}, {u: 10, v: 7}, {u: 11, v: 7}, {u: 12, v: 7},
         {u: 2, v: 8}, {u: 3, v: 8}, {u: 4, v: 8}, {u: 5, v: 8}, {u: 6, v: 8}, {u: 7, v: 8}, {u: 8, v: 8}, {u: 9, v: 8}, {u: 10, v: 8}, {u: 11, v: 8}, {u: 12, v: 8},
          {u: 2, v: 9}, {u: 3, v: 9}, {u: 4, v: 9}, {u: 5, v: 9}, {u: 6, v: 9}, {u: 7, v: 9}, {u: 8, v: 9}, {u: 9, v: 9}, {u: 10, v: 9}, {u: 11, v: 9}, {u: 12, v: 9}, {u: 13, v: 9},
           {u: 2, v: 10}, {u: 3, v: 10}, {u: 4, v: 10}, {u: 5, v: 10}, {u: 6, v: 10}, {u: 7, v: 10}, {u: 8, v: 10}, {u: 9, v: 10}, {u: 10, v: 10}, {u: 11, v: 10}, {u: 12, v: 10}, {u: 13, v: 10},
            {u: 2, v: 11}, {u: 3, v: 11}, {u: 4, v: 11}, {u: 5, v: 11}, {u: 6, v: 11}, {u: 7, v: 11}, {u: 8, v: 11}, {u: 9, v: 11}, {u: 10, v: 11}, {u: 11, v: 11}, {u: 12, v: 11},
             {u: 3, v: 12}, {u: 4, v: 12}, {u: 5, v: 12}, {u: 6, v: 12}, {u: 7, v: 12}, {u: 8, v: 12}, {u: 9, v: 12}, {u: 10, v: 12}, {u: 11, v: 12},
         {u: 4, v: 13}, {u: 5, v: 13}, {u: 6, v: 13}, {u: 7, v: 13}, {u: 8, v: 13}, {u: 9, v: 13}, {u: 10, v: 13},
         {u: 5, v: 14}, {u: 6, v: 14}, {u: 7, v: 14}, {u: 8, v: 14}, {u: 9, v: 14},
      ], "EMERALD": [
         {u: 6, v: 2}, {u: 7, v: 2}, {u: 8, v: 2}, {u: 9, v: 2}, {u: 10, v: 2},
      {u: 5, v: 3}, {u: 6, v: 3}, {u: 7, v: 3}, {u: 8, v: 3}, {u: 9, v: 3}, {u: 10, v: 3}, {u: 11, v: 3},
       {u: 4, v: 4}, {u: 5, v: 4}, {u: 6, v: 4}, {u: 7, v: 4}, {u: 8, v: 4}, {u: 9, v: 4}, {u: 10, v: 4}, {u: 11, v: 4}, {u: 12, v: 4},
      {u: 3, v: 5}, {u: 4, v: 5}, {u: 5, v: 5}, {u: 6, v: 5}, {u: 7, v: 5}, {u: 8, v: 5}, {u: 9, v: 5}, {u: 10, v: 5}, {u: 11, v: 5}, {u: 12, v: 5}, {u: 13, v: 5},
       {u: 3, v: 6}, {u: 4, v: 6}, {u: 5, v: 6}, {u: 6, v: 6}, {u: 7, v: 6}, {u: 8, v: 6}, {u: 9, v: 6}, {u: 10, v: 6}, {u: 11, v: 6}, {u: 12, v: 6}, {u: 13, v: 6},
        {u: 3, v: 7}, {u: 4, v: 7}, {u: 5, v: 7}, {u: 6, v: 7}, {u: 7, v: 7}, {u: 8, v: 7}, {u: 9, v: 7}, {u: 10, v: 7}, {u: 11, v: 7}, {u: 12, v: 7}, {u: 13, v: 7},
         {u: 3, v: 8}, {u: 4, v: 8}, {u: 5, v: 8}, {u: 6, v: 8}, {u: 7, v: 8}, {u: 8, v: 8}, {u: 9, v: 8}, {u: 10, v: 8}, {u: 11, v: 8}, {u: 12, v: 8}, {u: 13, v: 8},
          {u: 3, v: 9}, {u: 4, v: 9}, {u: 5, v: 9}, {u: 6, v: 9}, {u: 7, v: 9}, {u: 8, v: 9}, {u: 9, v: 9}, {u: 10, v: 9}, {u: 11, v: 9}, {u: 12, v: 9}, {u: 13, v: 9},
           {u: 3, v: 10}, {u: 4, v: 10}, {u: 5, v: 10}, {u: 6, v: 10}, {u: 7, v: 10}, {u: 8, v: 10}, {u: 9, v: 10}, {u: 10, v: 10}, {u: 11, v: 10}, {u: 12, v: 10}, {u: 13, v: 10},
            {u: 4, v: 11}, {u: 5, v: 11}, {u: 6, v: 11}, {u: 7, v: 11}, {u: 8, v: 11}, {u: 9, v: 11}, {u: 10, v: 11}, {u: 11, v: 11}, {u: 12, v: 11},
             {u: 5, v: 12}, {u: 6, v: 12}, {u: 7, v: 12}, {u: 8, v: 12}, {u: 9, v: 12}, {u: 10, v: 12}, {u: 11, v: 12},
         {u: 6, v: 13}, {u: 7, v: 13}, {u: 8, v: 13}, {u: 9, v: 13}, {u: 10, v: 13},
         {u: 7, v: 5}, {u: 8, v: 5}, {u: 9, v: 5},
        ], "GEM_HORIZONTAL": [
       {u: 3, v: 4}, {u: 4, v: 4}, {u: 5, v: 4}, {u: 6, v: 4}, {u: 7, v: 4}, {u: 8, v: 4}, {u: 9, v: 4}, {u: 10, v: 4}, {u: 11, v: 4}, {u: 12, v: 4}, {u: 13, v: 4},
      {u: 2, v: 5}, {u: 3, v: 5}, {u: 4, v: 5}, {u: 5, v: 5}, {u: 6, v: 5}, {u: 7, v: 5}, {u: 8, v: 5}, {u: 9, v: 5}, {u: 10, v: 5}, {u: 11, v: 5}, {u: 12, v: 5}, {u: 13, v: 5}, {u: 14, v: 5},
       {u: 2, v: 6}, {u: 3, v: 6}, {u: 4, v: 6}, {u: 5, v: 6}, {u: 6, v: 6}, {u: 7, v: 6}, {u: 8, v: 6}, {u: 9, v: 6}, {u: 10, v: 6}, {u: 11, v: 6}, {u: 12, v: 6}, {u: 13, v: 6}, {u: 14, v: 6},
        {u: 2, v: 7}, {u: 3, v: 7}, {u: 4, v: 7}, {u: 5, v: 7}, {u: 6, v: 7}, {u: 7, v: 7}, {u: 8, v: 7}, {u: 9, v: 7}, {u: 10, v: 7}, {u: 11, v: 7}, {u: 12, v: 7}, {u: 13, v: 7}, {u: 14, v: 7},
         {u: 2, v: 8}, {u: 3, v: 8}, {u: 4, v: 8}, {u: 5, v: 8}, {u: 6, v: 8}, {u: 7, v: 8}, {u: 8, v: 8}, {u: 9, v: 8}, {u: 10, v: 8}, {u: 11, v: 8}, {u: 12, v: 8}, {u: 13, v: 8}, {u: 14, v: 8},
          {u: 2, v: 9}, {u: 3, v: 9}, {u: 4, v: 9}, {u: 5, v: 9}, {u: 6, v: 9}, {u: 7, v: 9}, {u: 8, v: 9}, {u: 9, v: 9}, {u: 10, v: 9}, {u: 11, v: 9}, {u: 12, v: 9}, {u: 13, v: 9}, {u: 14, v: 9},
           {u: 2, v: 10}, {u: 3, v: 10}, {u: 4, v: 10}, {u: 5, v: 10}, {u: 6, v: 10}, {u: 7, v: 10}, {u: 8, v: 10}, {u: 9, v: 10}, {u: 10, v: 10}, {u: 11, v: 10}, {u: 12, v: 10}, {u: 13, v: 10}, {u: 14, v: 10},
            {u: 2, v: 11}, {u: 3, v: 11}, {u: 4, v: 11}, {u: 5, v: 11}, {u: 6, v: 11}, {u: 7, v: 11}, {u: 8, v: 11}, {u: 9, v: 11}, {u: 10, v: 11}, {u: 11, v: 11}, {u: 12, v: 11}, {u: 13, v: 11}, {u: 14, v: 11},
             {u: 3, v: 12}, {u: 4, v: 12}, {u: 5, v: 12}, {u: 6, v: 12}, {u: 7, v: 12}, {u: 8, v: 12}, {u: 9, v: 12}, {u: 10, v: 12}, {u: 11, v: 12}, {u: 12, v: 12}, {u: 13, v: 12},
          ], "GEM_VERTICAL": [
             {u: 5, v: 2},  {u: 6, v: 2}, {u: 7, v: 2}, {u: 8, v: 2}, {u: 9, v: 2}, {u: 10, v: 2}, {u: 11, v: 2}, 
      {u: 4, v: 3}, {u: 5, v: 3}, {u: 6, v: 3}, {u: 7, v: 3}, {u: 8, v: 3}, {u: 9, v: 3}, {u: 10, v: 3}, {u: 11, v: 3}, {u: 12, v: 3}, 
       {u: 4, v: 4}, {u: 5, v: 4}, {u: 6, v: 4}, {u: 7, v: 4}, {u: 8, v: 4}, {u: 9, v: 4}, {u: 10, v: 4}, {u: 11, v: 4}, {u: 12, v: 4},
      {u: 4, v: 5}, {u: 5, v: 5}, {u: 6, v: 5}, {u: 7, v: 5}, {u: 8, v: 5}, {u: 9, v: 5}, {u: 10, v: 5}, {u: 11, v: 5}, {u: 12, v: 5},
       {u: 4, v: 6}, {u: 5, v: 6}, {u: 6, v: 6}, {u: 7, v: 6}, {u: 8, v: 6}, {u: 9, v: 6}, {u: 10, v: 6}, {u: 11, v: 6}, {u: 12, v: 6},
        {u: 4, v: 7}, {u: 5, v: 7}, {u: 6, v: 7}, {u: 7, v: 7}, {u: 8, v: 7}, {u: 9, v: 7}, {u: 10, v: 7}, {u: 11, v: 7}, {u: 12, v: 7},
         {u: 4, v: 8}, {u: 5, v: 8}, {u: 6, v: 8}, {u: 7, v: 8}, {u: 8, v: 8}, {u: 9, v: 8}, {u: 10, v: 8}, {u: 11, v: 8}, {u: 12, v: 8},
          {u: 4, v: 9}, {u: 5, v: 9}, {u: 6, v: 9}, {u: 7, v: 9}, {u: 8, v: 9}, {u: 9, v: 9}, {u: 10, v: 9}, {u: 11, v: 9}, {u: 12, v: 9},
          {u: 4, v: 10}, {u: 5, v: 10}, {u: 6, v: 10}, {u: 7, v: 10}, {u: 8, v: 10}, {u: 9, v: 10}, {u: 10, v: 10}, {u: 11, v: 10}, {u: 12, v: 10},
            {u: 4, v: 11}, {u: 5, v: 11}, {u: 6, v: 11}, {u: 7, v: 11}, {u: 8, v: 11}, {u: 9, v: 11}, {u: 10, v: 11}, {u: 11, v: 11}, {u: 12, v: 11},
             {u: 4, v: 12}, {u: 5, v: 12}, {u: 6, v: 12}, {u: 7, v: 12}, {u: 8, v: 12}, {u: 9, v: 12}, {u: 10, v: 12}, {u: 11, v: 12}, {u: 12, v: 12},
         {u: 4, v: 13}, {u: 5, v: 13}, {u: 6, v: 13}, {u: 7, v: 13}, {u: 8, v: 13}, {u: 9, v: 13}, {u: 10, v: 13}, {u: 11, v: 13}, {u: 12, v: 13}, 
         {u: 5, v: 14}, {u: 6, v: 14}, {u: 7, v: 14}, {u: 8, v: 14}, {u: 9, v: 14}, {u: 10, v: 14}, {u: 10, v: 14}, 
          ], "LAPIS": [
             {u: 7, v: 2}, {u: 8, v: 2}, {u: 9, v: 2}, {u: 10, v: 2}, {u: 11, v: 2}, 
      {u: 6, v: 3}, {u: 7, v: 3}, {u: 8, v: 3}, {u: 9, v: 3}, {u: 10, v: 3}, {u: 11, v: 3}, {u: 12, v: 3}, 
      {u: 5, v: 4}, {u: 6, v: 4}, {u: 7, v: 4}, {u: 8, v: 4}, {u: 9, v: 4}, {u: 10, v: 4}, {u: 11, v: 4}, {u: 12, v: 4}, {u: 13, v: 4}, 
      {u: 4, v: 5}, {u: 5, v: 5}, {u: 6, v: 5}, {u: 7, v: 5}, {u: 8, v: 5}, {u: 9, v: 5}, {u: 10, v: 5}, {u: 11, v: 5}, {u: 12, v: 5}, {u: 13, v: 5},
       {u: 4, v: 6}, {u: 5, v: 6}, {u: 6, v: 6}, {u: 7, v: 6}, {u: 8, v: 6}, {u: 9, v: 6}, {u: 10, v: 6}, {u: 11, v: 6}, {u: 12, v: 6}, {u: 13, v: 6},
        {u: 4, v: 7}, {u: 5, v: 7}, {u: 6, v: 7}, {u: 7, v: 7}, {u: 8, v: 7}, {u: 9, v: 7}, {u: 10, v: 7}, {u: 11, v: 7}, {u: 12, v: 7}, {u: 13, v: 7},
         {u: 3, v: 8}, {u: 4, v: 8}, {u: 5, v: 8}, {u: 6, v: 8}, {u: 7, v: 8}, {u: 8, v: 8}, {u: 9, v: 8}, {u: 10, v: 8}, {u: 11, v: 8}, {u: 12, v: 8},
          {u: 2, v: 9}, {u: 3, v: 9}, {u: 4, v: 9}, {u: 5, v: 9}, {u: 6, v: 9}, {u: 7, v: 9}, {u: 8, v: 9}, {u: 9, v: 9}, {u: 10, v: 9}, {u: 11, v: 9}, {u: 12, v: 9},
           {u: 2, v: 10}, {u: 3, v: 10}, {u: 4, v: 10}, {u: 5, v: 10}, {u: 6, v: 10}, {u: 7, v: 10}, {u: 8, v: 10}, {u: 9, v: 10}, {u: 10, v: 10}, {u: 11, v: 10},
            {u: 2, v: 11}, {u: 3, v: 11}, {u: 4, v: 11}, {u: 5, v: 11}, {u: 6, v: 11}, {u: 7, v: 11}, {u: 8, v: 11}, {u: 9, v: 11}, {u: 10, v: 11},
             {u: 2, v: 12}, {u: 3, v: 12}, {u: 4, v: 12}, {u: 5, v: 12}, {u: 6, v: 12}, {u: 7, v: 12}, {u: 8, v: 12}, {u: 9, v: 12},
         {u: 3, v: 13}, {u: 4, v: 13}, {u: 5, v: 13}, {u: 6, v: 13},
            ], "QUARTZ": [
               {u: 3, v: 2}, {u: 4, v: 2}, {u: 5, v: 2}, {u: 6, v: 2}, {u: 7, v: 2}, {u: 8, v: 2}, {u: 9, v: 2}, 
      {u: 2, v: 3}, {u: 3, v: 3}, {u: 4, v: 3}, {u: 5, v: 3}, {u: 6, v: 3}, {u: 7, v: 3}, {u: 8, v: 3}, {u: 9, v: 3}, {u: 10, v: 3},
      {u: 2, v: 4}, {u: 3, v: 4}, {u: 4, v: 4}, {u: 5, v: 4}, {u: 6, v: 4}, {u: 7, v: 4}, {u: 8, v: 4}, {u: 9, v: 4}, {u: 10, v: 4}, {u: 11, v: 4},
      {u: 2, v: 5}, {u: 3, v: 5}, {u: 4, v: 5}, {u: 5, v: 5}, {u: 6, v: 5}, {u: 7, v: 5}, {u: 8, v: 5}, {u: 9, v: 5}, {u: 10, v: 5}, {u: 11, v: 5}, {u: 12, v: 5},
       {u: 2, v: 6}, {u: 3, v: 6}, {u: 4, v: 6}, {u: 5, v: 6}, {u: 6, v: 6}, {u: 7, v: 6}, {u: 8, v: 6}, {u: 9, v: 6}, {u: 10, v: 6}, {u: 11, v: 6}, {u: 12, v: 6}, {u: 13, v: 6},
        {u: 2, v: 7}, {u: 3, v: 7}, {u: 4, v: 7}, {u: 5, v: 7}, {u: 6, v: 7}, {u: 7, v: 7}, {u: 8, v: 7}, {u: 9, v: 7}, {u: 10, v: 7}, {u: 11, v: 7}, {u: 12, v: 7}, {u: 13, v: 7}, {u: 14, v: 7},
         {u: 2, v: 8}, {u: 3, v: 8}, {u: 4, v: 8}, {u: 5, v: 8}, {u: 6, v: 8}, {u: 7, v: 8}, {u: 8, v: 8}, {u: 9, v: 8}, {u: 10, v: 8}, {u: 11, v: 8}, {u: 12, v: 8}, {u: 13, v: 8}, {u: 14, v: 8},
          {u: 3, v: 9}, {u: 4, v: 9}, {u: 5, v: 9}, {u: 6, v: 9}, {u: 7, v: 9}, {u: 8, v: 9}, {u: 9, v: 9}, {u: 10, v: 9}, {u: 11, v: 9}, {u: 12, v: 9}, {u: 13, v: 9}, {u: 14, v: 9},
           {u: 4, v: 10}, {u: 5, v: 10}, {u: 6, v: 10}, {u: 7, v: 10}, {u: 8, v: 10}, {u: 9, v: 10}, {u: 10, v: 10}, {u: 11, v: 10}, {u: 12, v: 10}, {u: 13, v: 10}, {u: 14, v: 10},
           {u: 5, v: 11}, {u: 6, v: 11}, {u: 7, v: 11}, {u: 8, v: 11}, {u: 9, v: 11}, {u: 10, v: 11}, {u: 11, v: 11}, {u: 12, v: 11}, {u: 13, v: 11}, {u: 14, v: 11},
           {u: 6, v: 12}, {u: 7, v: 12}, {u: 8, v: 12}, {u: 9, v: 12}, {u: 10, v: 12}, {u: 11, v: 12}, {u: 12, v: 12}, {u: 13, v: 12}, {u: 14, v: 12},
         {u: 7, v: 13}, {u: 8, v: 13}, {u: 9, v: 13}, {u: 10, v: 13}, {u: 11, v: 13}, {u: 12, v: 13}, {u: 13, v: 13},
         {u: 8, v: 14}, {u: 9, v: 14}, {u: 10, v: 14}, {u: 11, v: 14}, {u: 12, v: 14},
    ], "LIGNITE": [
      {u: 9, v: 3}, {u: 10, v: 3},
      {u: 8, v: 4}, {u: 9, v: 4}, {u: 10, v: 4}, {u: 11, v: 4},
      {u: 4, v: 5}, {u: 5, v: 5}, {u: 7, v: 5}, {u: 8, v: 5}, {u: 9, v: 5}, {u: 10, v: 5}, {u: 11, v: 5}, {u: 12, v: 5},
      {u: 3, v: 6}, {u: 4, v: 6}, {u: 5, v: 6}, {u: 6, v: 6}, {u: 7, v: 6}, {u: 8, v: 6}, {u: 9, v: 6}, {u: 10, v: 6}, {u: 11, v: 6}, {u: 12, v: 6}, {u: 13, v: 6},
      {u: 3, v: 7}, {u: 4, v: 7}, {u: 5, v: 7}, {u: 6, v: 7}, {u: 7, v: 7}, {u: 8, v: 7}, {u: 9, v: 7}, {u: 10, v: 7}, {u: 11, v: 7}, {u: 12, v: 7}, {u: 13, v: 7},
      {u: 3, v: 8}, {u: 4, v: 8}, {u: 5, v: 8}, {u: 6, v: 8}, {u: 7, v: 8}, {u: 8, v: 8}, {u: 9, v: 8}, {u: 10, v: 8}, {u: 11, v: 8}, {u: 12, v: 8}, {u: 13, v: 8}, {u: 14, v: 8},
     {u: 3, v: 9}, {u: 4, v: 9}, {u: 5, v: 9}, {u: 6, v: 9}, {u: 7, v: 9}, {u: 8, v: 9}, {u: 9, v: 9}, {u: 10, v: 9}, {u: 11, v: 9}, {u: 12, v: 9}, {u: 13, v: 9}, {u: 14, v: 9},
     {u: 3, v: 10}, {u: 4, v: 10}, {u: 5, v: 10}, {u: 6, v: 10}, {u: 7, v: 10}, {u: 8, v: 10}, {u: 9, v: 10}, {u: 10, v: 10}, {u: 11, v: 10}, {u: 12, v: 10}, {u: 13, v: 10}, {u: 14, v: 10},
     {u: 4, v: 11}, {u: 5, v: 11}, {u: 6, v: 11}, {u: 7, v: 11}, {u: 8, v: 11}, {u: 9, v: 11}, {u: 10, v: 11}, {u: 11, v: 11}, {u: 12, v: 11}, {u: 13, v: 11},
     {u: 5, v: 12}, {u: 6, v: 12}, {u: 7, v: 12}, {u: 8, v: 12}, {u: 9, v: 12}, {u: 10, v: 12}, {u: 11, v: 12}, {u: 12, v: 12},
     {u: 6, v: 13}, {u: 7, v: 13}, {u: 8, v: 13},
      ], "NETHERSTAR": [
     {u: 8, v: 3}, {u: 9, v: 3},
       {u: 7, v: 4}, {u: 8, v: 4}, {u: 9, v: 4}, {u: 10, v: 4},
      {u: 7, v: 5}, {u: 8, v: 5}, {u: 9, v: 5}, {u: 10, v: 5},
     {u: 6, v: 6}, {u: 7, v: 6}, {u: 8, v: 6}, {u: 9, v: 6}, {u: 10, v: 6}, {u: 11, v: 6}, {u: 12, v: 6},
     {u: 4, v: 7}, {u: 5, v: 7}, {u: 6, v: 7}, {u: 7, v: 7}, {u: 8, v: 7}, {u: 9, v: 7}, {u: 10, v: 7}, {u: 11, v: 7}, {u: 12, v: 7}, {u: 13, v: 7},
         {u: 3, v: 8}, {u: 4, v: 8}, {u: 5, v: 8}, {u: 6, v: 8}, {u: 7, v: 8}, {u: 8, v: 8}, {u: 9, v: 8}, {u: 10, v: 8}, {u: 11, v: 8}, {u: 12, v: 8}, {u: 13, v: 8}, {u: 14, v: 8},
       {u: 3, v: 9}, {u: 4, v: 9}, {u: 5, v: 9}, {u: 6, v: 9}, {u: 7, v: 9}, {u: 8, v: 9}, {u: 9, v: 9}, {u: 10, v: 9}, {u: 11, v: 9}, {u: 12, v: 9}, {u: 13, v: 9},
       {u: 4, v: 10}, {u: 5, v: 10}, {u: 6, v: 10}, {u: 7, v: 10}, {u: 8, v: 10}, {u: 9, v: 10}, {u: 10, v: 10}, {u: 11, v: 10}, {u: 12, v: 10},
       {u: 6, v: 11}, {u: 7, v: 11}, {u: 8, v: 11}, {u: 9, v: 11}, {u: 10, v: 11},
       {u: 6, v: 12}, {u: 7, v: 12}, {u: 8, v: 12}, {u: 9, v: 12}, {u: 10, v: 12},
       {u: 7, v: 13}, {u: 8, v: 13}, {u: 9, v: 13},
       {u: 8, v: 14},
      ]});
addTypeForGenerate("lens", GENERATE_LENSE, "item", [
  {u: 6, v: 2}, {u: 7, v: 2}, {u: 8, v: 2}, {u: 9, v: 2},
  {u: 4, v: 3}, {u: 5, v: 3}, {u: 6, v: 3}, {u: 7, v: 3}, {u: 8, v: 3}, {u: 9, v: 3}, {u: 10, v: 3}, {u: 11, v: 3},
  {u: 3, v: 4}, {u: 4, v: 4}, {u: 5, v: 4}, {u: 6, v: 4}, {u: 7, v: 4}, {u: 8, v: 4}, {u: 9, v: 4}, {u: 10, v: 4}, {u: 11, v: 4}, {u: 12, v: 4},
  {u: 3, v: 5}, {u: 4, v: 5}, {u: 5, v: 5}, {u: 6, v: 5}, {u: 7, v: 5}, {u: 8, v: 5}, {u: 9, v: 5}, {u: 10, v: 5}, {u: 11, v: 5}, {u: 12, v: 5},
  {u: 2, v: 6}, {u: 3, v: 6}, {u: 4, v: 6}, {u: 5, v: 6}, {u: 6, v: 6}, {u: 7, v: 6}, {u: 8, v: 6}, {u: 9, v: 6}, {u: 10, v: 6}, {u: 11, v: 6}, {u: 12, v: 6}, {u: 13, v: 6},
   {u: 2, v: 7}, {u: 3, v: 7}, {u: 4, v: 7}, {u: 5, v: 7}, {u: 6, v: 7}, {u: 7, v: 7}, {u: 8, v: 7}, {u: 9, v: 7}, {u: 10, v: 7}, {u: 11, v: 7}, {u: 12, v: 7}, {u: 13, v: 7},
    {u: 2, v: 8}, {u: 3, v: 8}, {u: 4, v: 8}, {u: 5, v: 8}, {u: 6, v: 8}, {u: 7, v: 8}, {u: 8, v: 8}, {u: 9, v: 8}, {u: 10, v: 8}, {u: 11, v: 8}, {u: 12, v: 8}, {u: 13, v: 8},
     {u: 2, v: 9}, {u: 3, v: 9}, {u: 4, v: 9}, {u: 5, v: 9}, {u: 6, v: 9}, {u: 7, v: 9}, {u: 8, v: 9}, {u: 9, v: 9}, {u: 10, v: 9}, {u: 11, v: 9}, {u: 12, v: 9}, {u: 13, v: 9},
   {u: 3, v: 10}, {u: 4, v: 10}, {u: 5, v: 10}, {u: 6, v: 10}, {u: 7, v: 10}, {u: 8, v: 10}, {u: 9, v: 10}, {u: 10, v: 10}, {u: 11, v: 10}, {u: 12, v: 10},
   {u: 3, v: 11}, {u: 4, v: 11}, {u: 5, v: 11}, {u: 6, v: 11}, {u: 7, v: 11}, {u: 8, v: 11}, {u: 9, v: 11}, {u: 10, v: 11}, {u: 11, v: 11}, {u: 12, v: 11},
   {u: 4, v: 12}, {u: 5, v: 12}, {u: 6, v: 12}, {u: 7, v: 12}, {u: 8, v: 12}, {u: 9, v: 12}, {u: 10, v: 12}, {u: 11, v: 12},
   {u: 6, v: 13}, {u:7, v: 13}, {u: 8, v: 13}, {u: 9, v: 13},
  ], null);

addTypeForGenerate("crushed", GENERATE_ORE, "item", [
  {u: 6, v: 3}, {u: 9, v: 3},
  {u: 4, v: 4}, {u: 5, v: 4}, {u: 6, v: 4}, {u: 7, v: 4}, {u: 8, v: 4}, {u: 9, v: 4}, {u: 10, v: 4},
  {u: 3, v: 5}, {u: 5, v: 5}, {u: 7, v: 5}, {u: 9, v: 5}, {u: 11, v: 5}, {u: 12, v: 5},
   {u: 2, v: 6}, {u: 4, v: 6}, {u: 6, v: 6}, {u: 7, v: 6}, {u: 8, v: 6}, {u: 11, v: 6}, {u: 12, v: 6}, {u: 13, v: 6},
   {u: 2, v: 7}, {u: 3, v: 7}, {u: 4, v: 7}, {u: 5, v: 7}, {u: 7, v: 7}, {u: 8, v: 7}, {u: 9, v: 7}, {u: 10, v: 7}, {u: 11, v: 7}, {u: 13, v: 7},
    {u: 1, v: 8}, {u: 2, v: 8}, {u: 4, v: 8}, {u: 5, v: 8}, {u: 6, v: 8}, {u: 8, v: 8}, {u: 9, v: 8}, {u: 11, v: 8}, {u: 12, v: 8}, {u: 13, v: 8},
    {u: 1, v: 9}, {u: 3, v: 9}, {u: 4, v: 9}, {u: 6, v: 9}, {u: 7, v: 9}, {u: 10, v: 9}, {u: 12, v: 9}, {u: 13, v: 9}, {u: 14, v: 9},
     {u: 2, v: 10}, {u: 3, v: 10}, {u: 5, v: 10}, {u: 6, v: 10}, {u: 8, v: 10}, {u: 9, v: 10}, {u: 10, v: 10}, {u: 11, v: 10}, {u: 12, v: 10}, {u: 13, v: 10}, {u: 14, v: 10},
      {u: 1, v: 11}, {u: 2, v: 11}, {u: 4, v: 11}, {u: 5, v: 11}, {u: 8, v: 11}, {u: 9, v: 11}, {u: 11, v: 11}, {u: 13, v: 11},
       {u: 2, v: 12}, {u: 3, v: 12}, {u: 5, v: 12}, {u: 6, v: 12}, {u: 7, v: 12}, {u: 8, v: 12}, {u: 9, v: 12}, {u: 10, v: 12}, {u: 11, v: 12}, {u: 12, v: 12},
       {u: 4, v: 13}, {u: 5, v: 13}, {u: 7, v: 13}, {u: 9, v: 13}, {u: 11, v: 13}, {u: 12, v: 13},
    {u: 5, v: 14}, {u: 6, v: 14}, {u: 8, v: 14}, {u: 9, v: 14}, {u: 10, v: 14},
  ], [
  {u: 6, v: 3}, {u: 9, v: 3},
  {u: 4, v: 4}, {u: 5, v: 4}, {u: 6, v: 4}, {u: 7, v: 4}, {u: 8, v: 4}, {u: 9, v: 4}, {u: 10, v: 4},
  {u: 3, v: 5}, {u: 5, v: 5}, {u: 7, v: 5}, {u: 9, v: 5}, {u: 11, v: 5}, {u: 12, v: 5},
   {u: 2, v: 6}, {u: 4, v: 6}, {u: 6, v: 6}, {u: 7, v: 6}, {u: 8, v: 6}, {u: 11, v: 6}, {u: 12, v: 6}, {u: 13, v: 6},
   {u: 2, v: 7}, {u: 3, v: 7}, {u: 4, v: 7}, {u: 5, v: 7}, {u: 7, v: 7}, {u: 8, v: 7}, {u: 9, v: 7}, {u: 10, v: 7}, {u: 11, v: 7}, {u: 13, v: 7},
    {u: 1, v: 8}, {u: 2, v: 8}, {u: 4, v: 8}, {u: 5, v: 8}, {u: 6, v: 8}, {u: 8, v: 8}, {u: 9, v: 8}, {u: 11, v: 8}, {u: 12, v: 8}, {u: 13, v: 8},
    {u: 1, v: 9}, {u: 3, v: 9}, {u: 4, v: 9}, {u: 6, v: 9}, {u: 7, v: 9}, {u: 10, v: 9}, {u: 12, v: 9}, {u: 13, v: 9}, {u: 14, v: 9},
     {u: 2, v: 10}, {u: 3, v: 10}, {u: 5, v: 10}, {u: 6, v: 10}, {u: 8, v: 10}, {u: 9, v: 10}, {u: 10, v: 10}, {u: 11, v: 10}, {u: 12, v: 10}, {u: 13, v: 10}, {u: 14, v: 10},
      {u: 1, v: 11}, {u: 2, v: 11}, {u: 4, v: 11}, {u: 5, v: 11}, {u: 8, v: 11}, {u: 9, v: 11}, {u: 11, v: 11}, {u: 13, v: 11},
       {u: 2, v: 12}, {u: 3, v: 12}, {u: 5, v: 12}, {u: 6, v: 12}, {u: 7, v: 12}, {u: 8, v: 12}, {u: 9, v: 12}, {u: 10, v: 12}, {u: 11, v: 12}, {u: 12, v: 12},
       {u: 4, v: 13}, {u: 5, v: 13}, {u: 7, v: 13}, {u: 9, v: 13}, {u: 11, v: 13}, {u: 12, v: 13},
    {u: 5, v: 14}, {u: 6, v: 14}, {u: 8, v: 14}, {u: 9, v: 14}, {u: 10, v: 14},
  ], null);
addTypeForGenerate("crushedPurified", GENERATE_ORE, "item", [
  {u: 6, v: 3}, {u: 7, v: 3}, {u: 8, v: 3},
  {u: 4, v: 4}, {u: 5, v: 4}, {u: 7, v: 4}, {u: 8, v: 4}, {u: 9, v: 4}, {u: 11, v: 4},
  {u: 4, v: 5}, {u: 5, v: 5}, {u: 6, v: 5}, {u: 8, v: 5}, {u: 10, v: 5}, {u: 11, v: 5}, {u: 12, v: 5},
   {u: 2, v: 6}, {u: 3, v: 6}, {u: 4, v: 6}, {u: 6, v: 6}, {u: 7, v: 6}, {u: 9, v: 6}, {u: 10, v: 6}, {u: 12, v: 6},
   
   {u: 2, v: 7}, {u: 4, v: 7}, {u: 5, v: 7}, {u: 7, v: 7}, {u: 8, v: 7}, {u: 9, v: 7}, {u: 11, v: 7}, {u: 12, v: 7}, {u: 13, v: 7},
   
    {u: 1, v: 8}, {u: 2, v: 8}, {u: 3, v: 8}, {u: 5, v: 8}, {u: 6, v: 8}, {u: 7, v: 8}, {u: 9, v: 8}, {u: 10, v: 8}, {u: 11, v: 8}, {u: 12, v: 8}, {u: 13, v: 8}, {u: 14, v: 8},
    {u: 3, v: 9}, {u: 4, v: 9}, {u: 5, v: 9}, {u: 7, v: 9}, {u: 8, v: 9}, {u: 10, v: 9}, {u: 11, v: 9}, {u: 12, v: 9}, {u: 13, v: 9},
    
     {u: 2, v: 10}, {u: 3, v: 10}, {u: 5, v: 10}, {u: 6, v: 10}, {u: 8, v: 10}, {u: 9, v: 10}, {u: 11, v: 10}, {u: 14, v: 10},
     
      {u: 1, v: 11}, {u: 2, v: 11}, {u: 3, v: 11}, {u: 5, v: 11}, {u: 7, v: 11}, {u: 8, v: 11}, {u: 9, v: 11}, {u: 10, v: 11}, {u: 11, v: 11}, {u: 12, v: 11}, {u: 14, v: 11},
      
       {u: 2, v: 12}, {u: 4, v: 12}, {u: 5, v: 12}, {u: 7, v: 12}, {u: 8, v: 12}, {u: 9, v: 12}, {u: 10, v: 12}, {u: 11, v: 12}, {u: 12, v: 12}, {u: 13, v: 12},
       {u: 4, v: 13}, {u: 6, v: 13}, {u: 7, v: 13}, {u: 8, v: 13}, {u: 11, v: 13}, {u: 12, v: 13},
    {u: 5, v: 14}, {u: 6, v: 14}, {u: 7, v: 14}, {u: 9, v: 14}, {u: 10, v: 14},
  ], null);
addTypeForGenerate("crushedCentrifuged", GENERATE_ORE, "item", [
    {u: 5, v: 6}, {u: 6, v: 6}, {u: 7, v: 6}, {u: 8, v: 6}, {u: 9, v: 6},
    
    {u: 4, v: 7}, {u: 5, v: 7}, {u: 6, v: 7}, {u: 7, v: 7}, {u: 8, v: 7}, {u: 9, v: 7}, {u: 10, v: 7}, {u: 11, v: 7},
    
    {u: 3, v: 8}, {u: 4, v: 8}, {u: 5, v: 8}, {u: 6, v: 8}, {u: 7, v: 8}, {u: 8, v: 8}, {u: 9, v: 8}, {u: 10, v: 8}, {u: 11, v: 8}, {u: 12, v: 8},
    
   {u: 2, v: 9}, {u: 3, v: 9}, {u: 4, v: 9}, {u: 5, v: 9}, {u: 6, v: 9}, {u: 7, v: 9}, {u: 8, v: 9}, {u: 9, v: 9}, {u: 10, v: 9}, {u: 11, v: 9}, {u: 12, v: 9}, {u: 13, v: 9},
   
   {u: 1, v: 10}, {u: 2, v: 10}, {u: 3, v: 10}, {u: 4, v: 10}, {u: 5, v: 10}, {u: 6, v: 10}, {u: 7, v: 10}, {u: 8, v: 10}, {u: 9, v: 10}, {u: 10, v: 10}, {u: 11, v: 10}, {u: 12, v: 10}, {u: 13, v: 10}, {u: 14, v: 10},
   
   {u: 1, v: 11}, {u: 2, v: 11}, {u: 3, v: 11}, {u: 4, v: 11}, {u: 5, v: 11}, {u: 6, v: 11}, {u: 7, v: 11}, {u: 8, v: 11}, {u: 9, v: 11}, {u: 10, v: 11}, {u: 11, v: 11}, {u: 12, v: 11}, {u: 13, v: 11}, {u: 14, v: 11},
   
   {u: 2, v: 12}, {u: 3, v: 12}, {u: 4, v: 12}, {u: 5, v: 12}, {u: 6, v: 12}, {u: 7, v: 12}, {u: 8, v: 12}, {u: 9, v: 12}, {u: 10, v: 12}, {u: 11, v: 12}, {u: 12, v: 12}, {u: 13, v: 12},
   
   {u: 4, v: 13}, {u: 5, v: 13}, {u: 6, v: 13}, {u: 7, v: 13}, {u: 8, v: 13}, {u: 9, v: 13}, {u: 10, v: 13}, {u: 11, v: 13}, {u: 12, v: 13},
   
   {u: 5, v: 14}, {u: 6, v: 14}, {u: 7, v: 14}, {u: 8, v: 14}, {u: 9, v: 14}, {u: 10, v: 14},
  ], null);
addTypeForGenerate("dustImpure", GENERATE_ORE, "item", [
   {u: 7, v: 3}, {u: 8, v: 3}, 
   {u: 6, v: 4}, {u: 7, v: 4}, {u: 8, v: 4}, {u: 9, v: 4},
   {u: 5, v: 5}, {u: 6, v: 5}, {u: 7, v: 5}, {u: 8, v: 5}, {u: 9, v: 5}, {u: 10, v: 5},
   {u: 4, v: 6}, {u: 5, v: 6}, {u: 6, v: 6}, {u: 7, v: 6}, {u: 8, v: 6}, {u: 9, v: 6}, {u: 10, v: 6}, {u: 11, v: 6},
   {u: 3, v: 7}, {u: 4, v: 7}, {u: 5, v: 7}, {u: 6, v: 7}, {u: 7, v: 7}, {u: 8, v: 7}, {u: 9, v: 7}, {u: 10, v: 7}, {u: 11, v: 7}, {u: 12, v: 7},
   {u: 2, v: 8}, {u: 3, v: 8}, {u: 4, v: 8}, {u: 5, v: 8}, {u: 6, v: 8}, {u: 7, v: 8}, {u: 8, v: 8}, {u: 9, v: 8}, {u: 10, v: 8}, {u: 11, v: 8}, {u: 12, v: 8}, {u: 13, v: 8},
   {u: 2, v: 9}, {u: 3, v: 9}, {u: 4, v: 9}, {u: 5, v: 9}, {u: 6, v: 9}, {u: 7, v: 9}, {u: 8, v: 9}, {u: 9, v: 9}, {u: 10, v: 9}, {u: 11, v: 9}, {u: 12, v: 9}, {u: 13, v: 9},
   {u: 2, v: 10}, {u: 3, v: 10}, {u: 4, v: 10}, {u: 5, v: 10}, {u: 6, v: 10}, {u: 7, v: 10}, {u: 8, v: 10}, {u: 9, v: 10}, {u: 10, v: 10}, {u: 11, v: 10}, {u: 12, v: 10}, {u: 13, v: 10},
   {u: 3, v: 11}, {u: 4, v: 11}, {u: 5, v: 11}, {u: 6, v: 11}, {u: 7, v: 11}, {u: 8, v: 11}, {u: 9, v: 11}, {u: 10, v: 11}, {u: 11, v: 11}, {u: 12, v: 11},
   {u: 4, v: 12}, {u: 5, v: 12}, {u: 6, v: 12}, {u: 7, v: 12}, {u: 8, v: 12}, {u: 9, v: 12}, {u: 10, v: 12}, {u: 11, v: 12},
   {u: 6, v: 13}, {u: 7, v: 13}, {u: 8, v: 13}, {u: 9, v: 13},
  ], [
   {u: 7, v: 3}, {u: 8, v: 3}, 
   {u: 6, v: 4}, {u: 7, v: 4}, {u: 8, v: 4}, {u: 9, v: 4},
   {u: 5, v: 5}, {u: 6, v: 5}, {u: 7, v: 5}, {u: 8, v: 5}, {u: 9, v: 5}, {u: 10, v: 5},
   {u: 4, v: 6}, {u: 5, v: 6}, {u: 6, v: 6}, {u: 7, v: 6}, {u: 8, v: 6}, {u: 9, v: 6}, {u: 10, v: 6}, {u: 11, v: 6},
   {u: 3, v: 7}, {u: 4, v: 7}, {u: 5, v: 7}, {u: 6, v: 7}, {u: 7, v: 7}, {u: 8, v: 7}, {u: 9, v: 7}, {u: 10, v: 7}, {u: 11, v: 7}, {u: 12, v: 7},
   {u: 2, v: 8}, {u: 3, v: 8}, {u: 4, v: 8}, {u: 5, v: 8}, {u: 6, v: 8}, {u: 7, v: 8}, {u: 8, v: 8}, {u: 9, v: 8}, {u: 10, v: 8}, {u: 11, v: 8}, {u: 12, v: 8}, {u: 13, v: 8},
   {u: 2, v: 9}, {u: 3, v: 9}, {u: 4, v: 9}, {u: 5, v: 9}, {u: 6, v: 9}, {u: 7, v: 9}, {u: 8, v: 9}, {u: 9, v: 9}, {u: 10, v: 9}, {u: 11, v: 9}, {u: 12, v: 9}, {u: 13, v: 9},
   {u: 2, v: 10}, {u: 3, v: 10}, {u: 4, v: 10}, {u: 5, v: 10}, {u: 6, v: 10}, {u: 7, v: 10}, {u: 8, v: 10}, {u: 9, v: 10}, {u: 10, v: 10}, {u: 11, v: 10}, {u: 12, v: 10}, {u: 13, v: 10},
   {u: 3, v: 11}, {u: 4, v: 11}, {u: 5, v: 11}, {u: 6, v: 11}, {u: 7, v: 11}, {u: 8, v: 11}, {u: 9, v: 11}, {u: 10, v: 11}, {u: 11, v: 11}, {u: 12, v: 11},
   {u: 4, v: 12}, {u: 5, v: 12}, {u: 6, v: 12}, {u: 7, v: 12}, {u: 8, v: 12}, {u: 9, v: 12}, {u: 10, v: 12}, {u: 11, v: 12},
   {u: 6, v: 13}, {u: 7, v: 13}, {u: 8, v: 13}, {u: 9, v: 13},
    ]);
addTypeForGenerate("dustPure", GENERATE_ORE, "item", [
   {u: 7, v: 3}, {u: 8, v: 3}, 
   {u: 6, v: 4}, {u: 7, v: 4}, {u: 8, v: 4}, {u: 9, v: 4},
   {u: 5, v: 5}, {u: 6, v: 5}, {u: 7, v: 5}, {u: 8, v: 5}, {u: 9, v: 5}, {u: 10, v: 5},
   {u: 4, v: 6}, {u: 5, v: 6}, {u: 6, v: 6}, {u: 7, v: 6}, {u: 8, v: 6}, {u: 9, v: 6}, {u: 10, v: 6}, {u: 11, v: 6},
   {u: 3, v: 7}, {u: 4, v: 7}, {u: 5, v: 7}, {u: 6, v: 7}, {u: 7, v: 7}, {u: 8, v: 7}, {u: 9, v: 7}, {u: 10, v: 7}, {u: 11, v: 7}, {u: 12, v: 7},
   {u: 2, v: 8}, {u: 3, v: 8}, {u: 4, v: 8}, {u: 5, v: 8}, {u: 6, v: 8}, {u: 7, v: 8}, {u: 8, v: 8}, {u: 9, v: 8}, {u: 10, v: 8}, {u: 11, v: 8}, {u: 12, v: 8}, {u: 13, v: 8},
   {u: 2, v: 9}, {u: 3, v: 9}, {u: 4, v: 9}, {u: 5, v: 9}, {u: 6, v: 9}, {u: 7, v: 9}, {u: 8, v: 9}, {u: 9, v: 9}, {u: 10, v: 9}, {u: 11, v: 9}, {u: 12, v: 9}, {u: 13, v: 9},
   {u: 2, v: 10}, {u: 3, v: 10}, {u: 4, v: 10}, {u: 5, v: 10}, {u: 6, v: 10}, {u: 7, v: 10}, {u: 8, v: 10}, {u: 9, v: 10}, {u: 10, v: 10}, {u: 11, v: 10}, {u: 12, v: 10}, {u: 13, v: 10},
   {u: 3, v: 11}, {u: 4, v: 11}, {u: 5, v: 11}, {u: 6, v: 11}, {u: 7, v: 11}, {u: 8, v: 11}, {u: 9, v: 11}, {u: 10, v: 11}, {u: 11, v: 11}, {u: 12, v: 11},
   {u: 4, v: 12}, {u: 5, v: 12}, {u: 6, v: 12}, {u: 7, v: 12}, {u: 8, v: 12}, {u: 9, v: 12}, {u: 10, v: 12}, {u: 11, v: 12},
   {u: 6, v: 13}, {u: 7, v: 13}, {u: 8, v: 13}, {u: 9, v: 13},
  ], [
    {u: 7, v: 3}, {u: 8, v: 3}, 
   {u: 6, v: 4}, {u: 7, v: 4}, {u: 8, v: 4}, {u: 9, v: 4},
   {u: 5, v: 5}, {u: 6, v: 5}, {u: 7, v: 5}, {u: 8, v: 5}, {u: 9, v: 5}, {u: 10, v: 5},
   {u: 4, v: 6}, {u: 5, v: 6}, {u: 6, v: 6}, {u: 7, v: 6}, {u: 8, v: 6}, {u: 9, v: 6}, {u: 10, v: 6}, {u: 11, v: 6},
   {u: 3, v: 7}, {u: 4, v: 7}, {u: 5, v: 7}, {u: 6, v: 7}, {u: 7, v: 7}, {u: 8, v: 7}, {u: 9, v: 7}, {u: 10, v: 7}, {u: 11, v: 7}, {u: 12, v: 7},
   {u: 2, v: 8}, {u: 3, v: 8}, {u: 4, v: 8}, {u: 5, v: 8}, {u: 6, v: 8}, {u: 7, v: 8}, {u: 8, v: 8}, {u: 9, v: 8}, {u: 10, v: 8}, {u: 11, v: 8}, {u: 12, v: 8}, {u: 13, v: 8},
   {u: 2, v: 9}, {u: 3, v: 9}, {u: 4, v: 9}, {u: 5, v: 9}, {u: 6, v: 9}, {u: 7, v: 9}, {u: 8, v: 9}, {u: 9, v: 9}, {u: 10, v: 9}, {u: 11, v: 9}, {u: 12, v: 9}, {u: 13, v: 9},
   {u: 2, v: 10}, {u: 3, v: 10}, {u: 4, v: 10}, {u: 5, v: 10}, {u: 6, v: 10}, {u: 7, v: 10}, {u: 8, v: 10}, {u: 9, v: 10}, {u: 10, v: 10}, {u: 11, v: 10}, {u: 12, v: 10}, {u: 13, v: 10},
   {u: 3, v: 11}, {u: 4, v: 11}, {u: 5, v: 11}, {u: 6, v: 11}, {u: 7, v: 11}, {u: 8, v: 11}, {u: 9, v: 11}, {u: 10, v: 11}, {u: 11, v: 11}, {u: 12, v: 11},
   {u: 4, v: 12}, {u: 5, v: 12}, {u: 6, v: 12}, {u: 7, v: 12}, {u: 8, v: 12}, {u: 9, v: 12}, {u: 10, v: 12}, {u: 11, v: 12},
   {u: 6, v: 13}, {u: 7, v: 13}, {u: 8, v: 13}, {u: 9, v: 13},
    ]);

addTypeForGenerate("block", 0, "block", [
         {u: 0, v: 0}, {u: 1, v: 0}, {u: 2, v: 0}, {u: 3, v: 0}, {u: 4, v: 0}, {u: 5, v: 0}, {u: 6, v: 0}, {u: 7, v: 0}, {u: 8, v: 0}, {u: 9, v: 0}, {u: 10, v: 0}, {u: 11, v: 0},  {u: 12, v: 0}, {u: 13, v: 0}, {u: 14, v: 0}, {u: 15, v: 0},
        {u: 0, v: 1}, {u: 1, v: 1}, {u: 2, v: 1}, {u: 3, v: 1}, {u: 4, v: 1}, {u: 5, v: 1}, {u: 6, v: 1}, {u: 7, v: 1}, {u: 8, v: 1}, {u: 9, v: 1}, {u: 10, v: 1}, {u: 11, v: 1}, {u: 12, v: 1}, {u: 13, v: 1}, {u: 14, v: 1}, {u: 15, v: 1},
        {u: 0, v: 2}, {u: 1, v: 2}, {u: 2, v: 2}, {u: 3, v: 2}, {u: 4, v: 2}, {u: 5, v: 2}, {u: 6, v: 2}, {u: 7, v: 2}, {u: 8, v: 2}, {u: 9, v: 2}, {u: 10, v: 2}, {u: 11, v: 2},  {u: 12, v: 2}, {u: 13, v: 2}, {u: 14, v: 2}, {u: 15, v: 2},
        {u: 0, v: 3}, {u: 1, v: 3}, {u: 2, v: 3}, {u: 3, v: 3}, {u: 4, v: 3},    {u: 5, v: 3}, {u: 6, v: 3}, {u: 7, v: 3}, {u: 8, v: 3}, {u: 9, v: 3}, {u: 10, v: 3}, {u: 11, v: 3},  {u: 12, v: 3}, {u: 13, v: 3}, {u: 14, v: 3}, {u: 15, v: 3},
      {u: 0, v: 4}, {u: 1, v: 4}, {u: 2, v: 4}, {u: 3, v: 4}, {u: 4, v: 4}, {u: 5, v: 4}, {u: 6, v: 4}, {u: 7, v: 4}, {u: 8, v: 4}, {u: 9, v: 4}, {u: 10, v: 4}, {u: 11, v: 4}, {u: 12, v: 4}, {u: 13, v: 4}, {u: 14, v: 4},   {u: 15, v: 4}, 
      {u: 0, v: 5}, {u: 1, v: 5}, {u: 2, v: 5}, {u: 3, v: 5}, {u: 4, v: 5}, {u: 5, v: 5}, {u: 6, v: 5}, {u: 7, v: 5}, {u: 8, v: 5}, {u: 9, v: 5}, {u: 10, v: 5}, {u: 11, v: 5}, {u: 12, v: 5}, {u: 13, v: 5}, {u: 14, v: 5}, {u: 15, v: 5},
         {u: 0, v: 6}, {u: 1, v: 6}, {u: 2, v: 6}, {u: 3, v: 6}, {u: 4, v: 6}, {u: 5, v: 6}, {u: 6, v: 6}, {u: 7, v: 6}, {u: 8, v: 6}, {u: 9, v: 6}, {u: 10, v: 6}, {u: 11, v: 6},    {u: 12, v: 6}, {u: 13, v: 6},    {u: 14, v: 6}, {u: 15, v: 6},
        {u: 0, v: 7}, {u: 1, v: 7}, {u: 2, v: 7}, {u: 3, v: 7}, {u: 4, v: 7}, {u: 5, v: 7}, {u: 6, v: 7}, {u: 7, v: 7}, {u: 8, v: 7}, {u: 9, v: 7}, {u: 10, v: 7}, {u: 11, v: 7}, {u: 12, v: 7}, {u: 13, v: 7}, {u: 14, v: 7}, {u: 15, v: 7},
      {u: 0, v: 8}, {u: 1, v: 8}, {u: 2, v: 8}, {u: 3, v: 8}, {u: 4, v: 8}, {u: 5, v: 8}, {u: 6, v: 8}, {u: 7, v: 8}, {u: 8, v: 8}, {u: 9, v: 8}, {u: 10, v: 8}, {u: 11, v: 8}, {u: 12, v: 8}, {u: 13, v: 8}, {u: 14, v: 8}, {u: 15, v: 8},
      {u: 0, v: 9}, {u: 1, v: 9}, {u: 2, v: 9}, {u: 3, v: 9}, {u: 4, v: 9}, {u: 5, v: 9}, {u: 6, v: 9}, {u: 7, v: 9}, {u: 8, v: 9}, {u: 9, v: 9}, {u: 10, v: 9}, {u: 11, v: 9}, {u: 12, v: 9}, {u: 13, v: 9}, {u: 14, v: 9}, {u: 15, v: 9},
      {u: 0, v: 10}, {u: 1, v: 10}, {u: 2, v: 10}, {u: 3, v: 10}, {u: 4, v: 10}, {u: 5, v: 10}, {u: 6, v: 10}, {u: 7, v: 10}, {u: 8, v: 10}, {u: 9, v: 10}, {u: 10, v: 10}, {u: 11, v: 10}, {u: 12, v: 10}, {u: 13, v: 10}, {u: 14, v: 10}, {u: 15, v: 10},
     {u: 0, v: 11}, {u: 1, v: 11}, {u: 2, v: 11}, {u: 3, v: 11}, {u: 4, v: 11}, {u: 5, v: 11}, {u: 6, v: 11}, {u: 7, v: 11}, {u: 8, v: 11}, {u: 9, v: 11}, {u: 10, v: 11}, {u: 11, v: 11}, {u: 12, v: 11}, {u: 13, v: 11}, {u: 14, v: 11}, {u: 15, v: 11},
      {u: 0, v: 12}, {u: 1, v: 12}, {u: 2, v: 12}, {u: 3, v: 12}, {u: 4, v: 12}, {u: 5, v: 12}, {u: 6, v: 12}, {u: 7, v: 12}, {u: 8, v: 12}, {u: 9, v: 12}, {u: 10, v: 12}, {u: 11, v: 12}, {u: 12, v: 12}, {u: 13, v: 12}, {u: 14, v: 12}, {u: 15, v: 12},
     {u: 0, v: 13}, {u: 1, v: 13}, {u: 2, v: 13}, {u: 3, v: 13}, {u: 4, v: 13}, {u: 5, v: 13}, {u: 6, v: 13}, {u: 7, v: 13}, {u: 8, v: 13}, {u: 9, v: 13}, {u: 10, v: 13}, {u: 11, v: 13}, {u: 12, v: 13}, {u: 13, v: 13}, {u: 14, v: 13}, {u: 15, v: 13},
      {u: 0, v: 14}, {u: 1, v: 14}, {u: 2, v: 14}, {u: 3, v: 14}, {u: 4, v: 14}, {u: 5, v: 14}, {u: 6, v: 14}, {u: 7, v: 14}, {u: 8, v: 14}, {u: 9, v: 14}, {u: 10, v: 14}, {u: 11, v: 14},  {u: 12, v: 14}, {u: 13, v: 14}, {u: 14, v: 14}, {u: 15, v: 14},
        {u: 0, v: 15}, {u: 1, v: 15}, {u: 2, v: 15}, {u: 3, v: 15}, {u: 4, v: 15}, {u: 5, v: 15}, {u: 6, v: 15}, {u: 7, v: 15}, {u: 8, v: 15}, {u: 9, v: 15}, {u: 10, v: 15}, {u: 11, v: 15}, {u: 12, v: 15}, {u: 13, v: 15}, {u: 14, v: 15}, {u: 15, v: 15},
]);
addTypeForGenerate("frameGt", GENERATE_FRAME, "block", [
      {u: 0, v: 0}, {u: 1, v: 0}, {u: 2, v: 0}, {u: 3, v: 0}, {u: 4, v: 0}, {u: 5, v: 0}, {u: 6, v: 0}, {u: 7, v: 0}, {u: 8, v: 0}, {u: 9, v: 0}, {u: 10, v: 0}, {u: 11, v: 0},  {u: 12, v: 0}, {u: 13, v: 0}, {u: 14, v: 0}, {u: 15, v: 0},
        {u: 0, v: 1}, {u: 1, v: 1}, {u: 2, v: 1}, {u: 3, v: 1}, {u: 4, v: 1}, {u: 5, v: 1}, {u: 6, v: 1}, {u: 7, v: 1}, {u: 8, v: 1}, {u: 9, v: 1}, {u: 10, v: 1}, {u: 11, v: 1}, {u: 12, v: 1}, {u: 13, v: 1}, {u: 14, v: 1}, {u: 15, v: 1},
        {u: 0, v: 2}, {u: 1, v: 2}, {u: 2, v: 2}, {u: 3, v: 2}, {u: 12, v: 2}, {u: 13, v: 2}, {u: 14, v: 2}, {u: 15, v: 2},
        {u: 0, v: 3}, {u: 1, v: 3}, {u: 2, v: 3}, {u: 3, v: 3}, {u: 4, v: 3}, {u: 11, v: 3}, {u: 12, v: 3}, {u: 13, v: 3}, {u: 14, v: 3}, {u: 15, v: 3},
      {u: 0, v: 4}, {u: 1, v: 4}, {u: 3, v: 4}, {u: 4, v: 4}, {u: 5, v: 4}, {u: 10, v: 4}, {u: 11, v: 4}, {u: 12, v: 4}, {u: 14, v: 4}, {u: 15, v: 4},
      {u: 0, v: 5}, {u: 1, v: 5}, {u: 4, v: 5}, {u: 5, v: 5}, {u: 10, v: 5}, {u: 11, v: 5}, {u: 14, v: 5}, {u: 15, v: 5},
         {u: 0, v: 6}, {u: 1, v: 6}, {u: 5, v: 6}, {u: 6, v: 6}, {u: 7, v: 6}, {u: 8, v: 6}, {u: 9, v: 6}, {u: 10, v: 6}, {u: 14, v: 6}, {u: 15, v: 6},
        {u: 0, v: 7}, {u: 1, v: 7}, {u: 6, v: 7}, {u: 7, v: 7}, {u: 8, v: 7}, {u: 9, v: 7}, {u: 14, v: 7}, {u: 15, v: 7},
      {u: 0, v: 8}, {u: 1, v: 8}, {u: 6, v: 8}, {u: 7, v: 8}, {u: 8, v: 8}, {u: 9, v: 8}, {u: 14, v: 8}, {u: 15, v: 8},
      {u: 0, v: 9}, {u: 1, v: 9}, {u: 5, v: 9}, {u: 6, v: 9}, {u: 7, v: 9}, {u: 8, v: 9}, {u: 9, v: 9}, {u: 10, v: 9}, {u: 14, v: 9}, {u: 15, v: 9},
      {u: 0, v: 10}, {u: 1, v: 10}, {u: 4, v: 10}, {u: 5, v: 10}, {u: 6, v: 10}, {u: 9, v: 10}, {u: 10, v: 10}, {u: 11, v: 10}, {u: 14, v: 10}, {u: 15, v: 10},
     {u: 0, v: 11}, {u: 1, v: 11}, {u: 3, v: 11}, {u: 4, v: 11}, {u: 5, v: 11}, {u: 10, v: 11}, {u: 11, v: 11}, {u: 12, v: 11}, {u: 14, v: 11}, {u: 15, v: 11},
      {u: 0, v: 12}, {u: 1, v: 12}, {u: 2, v: 12}, {u: 3, v: 12}, {u: 4, v: 12}, {u: 11, v: 12}, {u: 12, v: 12}, {u: 13, v: 12}, {u: 14, v: 12}, {u: 15, v: 12},
     {u: 0, v: 13}, {u: 1, v: 13}, {u: 2, v: 13}, {u: 3, v: 13}, {u: 12, v: 13}, {u: 13, v: 13}, {u: 14, v: 13}, {u: 15, v: 13},
      {u: 0, v: 14}, {u: 1, v: 14}, {u: 2, v: 14}, {u: 3, v: 14}, {u: 4, v: 14}, {u: 5, v: 14}, {u: 6, v: 14}, {u: 7, v: 14}, {u: 8, v: 14}, {u: 9, v: 14}, {u: 10, v: 14}, {u: 11, v: 14},  {u: 12, v: 14}, {u: 13, v: 14}, {u: 14, v: 14}, {u: 15, v: 14},
        {u: 0, v: 15}, {u: 1, v: 15}, {u: 2, v: 15}, {u: 3, v: 15}, {u: 4, v: 15}, {u: 5, v: 15}, {u: 6, v: 15}, {u: 7, v: 15}, {u: 8, v: 15}, {u: 9, v: 15}, {u: 10, v: 15}, {u: 11, v: 15}, {u: 12, v: 15}, {u: 13, v: 15}, {u: 14, v: 15}, {u: 15, v: 15},
  ]);

addBlockForOreGenerate("stone");
addBlockForOreGenerate("granite");
addBlockForOreGenerate("diorite");
addBlockForOreGenerate("andesite");
addBlockForOreGenerate("gravel");
addBlockForOreGenerate("bedrock");
addBlockForOreGenerate("netherrack");
addBlockForOreGenerate("endstone");
addBlockForOreGenerate("sandstone");
addBlockForOreGenerate("sandstone_red");

addBlockForOreGenerate("granite_red");
addBlockForOreGenerate("granite_black");
addBlockForOreGenerate("marble");
addBlockForOreGenerate("basalt");

generateClientMaterial("aluminium", "INGOT", Flags.pack5(EXT2_METAL, GENERATE_SMALL_GEAR, GENERATE_ORE, GENERATE_RING, GENERATE_FRAME), 0x80C8F0, IconTransformator.UV.DULL);
generateClientMaterial("americium", "INGOT", Flags.pack3(STD_METAL, GENERATE_ROD, GENERATE_LONG_ROD), 0xC8C8C8, IconTransformator.UV.METALLIC);
generateClientMaterial("antimony", "INGOT", 
Flags.pack2(EXT_METAL, MORTAR_GRINDABLE), 0xDCDCC8, IconTransformator.UV.SHINY);
generateClientMaterial("arsenic", "DUST", 0, 0xDDDDDD, IconTransformator.UV.SAND);
generateClientMaterial("barium", "INGOT", STD_METAL, 0x64B464, IconTransformator.UV.METALLIC);
generateClientMaterial("beryllium", "INGOT",Flags.pack2(STD_METAL, GENERATE_ORE), 0x64B464, IconTransformator.UV.METALLIC);
generateClientMaterial("bismuth",  "INGOT", GENERATE_ORE, 0x64A0A0, IconTransformator.UV.METALLIC);
generateClientMaterial("boron", "DUST", 0, 0xD2F0D2, IconTransformator.UV.SAND);
generateClientMaterial("cadmium", "INGOT", 0, 0x505060, IconTransformator.UV.SHINY);
generateClientMaterial("calcium", "INGOT", 0, 0xDDDDAA, IconTransformator.UV.METALLIC);
generateClientMaterial("carbon", "INGOT", 0, 0x333333, IconTransformator.UV.DULL);
generateClientMaterial("cerium", "INGOT", 0, 0xEEEEEE, IconTransformator.UV.METALLIC);
generateClientMaterial("cobalt", "INGOT", 
Flags.pack2(GENERATE_ORE, STD_METAL), 0x2929BC, IconTransformator.UV.METALLIC);
generateClientMaterial("copper", "INGOT", 
Flags.pack4(EXT2_METAL, GENERATE_ORE, MORTAR_GRINDABLE, GENERATE_DENSE), 0xFFAAAB, IconTransformator.UV.SHINY);
generateClientMaterial("chlorine", "FLUID",  STATE_GAS, 0xFF8000, IconTransformator.UV.FLUID);
generateClientMaterial("chrome", "INGOT",  
Flags.pack3(EXT2_METAL, GENERATE_RING, GENERATE_ROTOR), 0xFF8000, IconTransformator.UV.FLUID);
generateClientMaterial("gallium", "INGOT", GENERATE_PLATE, 0xFFFF00, IconTransformator.UV.SHINY);
generateClientMaterial("gold", "INGOT", 
Flags.pack4(EXT2_METAL, GENERATE_ORE, MORTAR_GRINDABLE, EXCLUDE_BLOCK_CRAFTING_BY_HAND_RECIPES), 0xFFFF00, IconTransformator.UV.SHINY);
generateClientMaterial("fluorine", "FLUID", STATE_GAS, 0xFFFFAA, IconTransformator.UV.FLUID);
generateClientMaterial("iridium", "INGOT", 
Flags.pack5(GENERATE_ORE, EXT2_METAL, GENERATE_ORE, GENERATE_RING, GENERATE_ROTOR), 0xFFFFFF, IconTransformator.UV.DULL);
generateClientMaterial("iron", "INGOT", 
Flags.pack3(Flags.pack3(EXT2_METAL, GENERATE_ORE, MORTAR_GRINDABLE), Flags.pack3(GENERATE_RING, GENERATE_DENSE, GENERATE_FRAME), Flags.pack3(GENERATE_LONG_ROD, GENERATE_PLASMA, EXCLUDE_BLOCK_CRAFTING_BY_HAND_RECIPES)), 0xAAAAAA, IconTransformator.UV.METALLIC);
generateClientMaterial("lead", "INGOT", 
Flags.pack4(EXT2_METAL, GENERATE_ORE, MORTAR_GRINDABLE, GENERATE_DENSE), 0x8C648C, IconTransformator.UV.DULL);
generateClientMaterial("magnesium", "INGOT", Flags.pack2(STD_METAL, GENERATE_ORE), 0xFFBBBB, IconTransformator.UV.METALLIC);
generateClientMaterial("manganese", "INGOT", GENERATE_FOIL, 0xEEEEEE, IconTransformator.UV.DULL);
generateClientMaterial("lithium", "INGOT", 
Flags.pack2(STD_METAL, GENERATE_ORE), 0xCBCBCB, IconTransformator.UV.DULL);
generateClientMaterial("mercury", "FLUID", SMELT_INTO_FLUID, 0xFFDDDD, IconTransformator.UV.FLUID);
generateClientMaterial("molybdenum", "INGOT", GENERATE_ORE, 0xAAAADD, IconTransformator.UV.SHINY);
generateClientMaterial("neodymium", "INGOT", Flags.pack3(STD_METAL, GENERATE_ROD, GENERATE_ORE), 0x777777, IconTransformator.UV.METALLIC);
generateClientMaterial("nickel", "INGOT",
Flags.pack4(STD_METAL, GENERATE_ORE, MORTAR_GRINDABLE, GENERATE_PLASMA), 0xAAAAFF, IconTransformator.UV.METALLIC);
generateClientMaterial("niobium", "INGOT", STD_METAL, 0xAAAAFF, IconTransformator.UV.METALLIC);
generateClientMaterial("nitrogen", "FLUID", 
Flags.pack2(STATE_GAS, GENERATE_PLASMA), 0x90AAEE, IconTransformator.UV.FLUID);
generateClientMaterial("oxygen", "FLUID", 
Flags.pack2(STATE_GAS, GENERATE_PLASMA), 0x90AAEE, IconTransformator.UV.FLUID);
generateClientMaterial("hydrogen", "FLUID", STATE_GAS, 0x00FFAA, IconTransformator.UV.FLUID);
generateClientMaterial("palladium", "INGOT",
Flags.pack3(EXT2_METAL, GENERATE_ORE, GENERATE_FLUID_BLOCK), 0xCED0DD, IconTransformator.UV.METALLIC);
generateClientMaterial("phosphorus", "DUST", GENERATE_ORE, 0xC8C800, IconTransformator.UV.DULL);
generateClientMaterial("platinum", "INGOT", 
Flags.pack3(EXT2_METAL, GENERATE_ORE, GENERATE_FLUID_BLOCK), 0xFFFF99, IconTransformator.UV.SHINY);
generateClientMaterial("potassium", "INGOT", EXT_METAL, 0xFFFF99, IconTransformator.UV.METALLIC);
generateClientMaterial("titanium", "INGOT", 
Flags.pack2(EXT2_METAL, MORTAR_GRINDABLE), 0xDCDCFF, IconTransformator.UV.SHINY);
generateClientMaterial("silver", "INGOT", 
Flags.pack3(EXT2_METAL, GENERATE_ORE, MORTAR_GRINDABLE), 0xDCDCFF, IconTransformator.UV.SHINY);
generateClientMaterial("silicon", "INGOT", 
Flags.pack3(EXT2_METAL, GENERATE_ORE, MORTAR_GRINDABLE), 0xDCDCFF, IconTransformator.UV.SHINY);
generateClientMaterial("sodium", "INGOT", STD_METAL,  0x000096, IconTransformator.UV.METALLIC);
generateClientMaterial("sulfur", "DUST", 
Flags.pack4(NO_SMASHING, NO_SMELTING, FLAMMABLE, GENERATE_ORE), 0xC8C800, IconTransformator.UV.DULL);
generateClientMaterial("tantalum", "INGOT", 
Flags.pack3(EXT2_METAL, MORTAR_GRINDABLE, GENERATE_RING), 0xDCDCDC, IconTransformator.UV.DULL);
generateClientMaterial("tin", "INGOT", 
Flags.pack5(EXT2_METAL, MORTAR_GRINDABLE, GENERATE_RING, GENERATE_ROTOR, GENERATE_ORE), 0xDCDCDC, IconTransformator.UV.DULL);
generateClientMaterial("thorium", "INGOT", 
Flags.pack2(STD_METAL, GENERATE_ORE), 0x001E00, IconTransformator.UV.SHINY);
generateClientMaterial("tungsten", "INGOT", EXT2_METAL, 0x001E00, IconTransformator.UV.METALLIC);
generateClientMaterial("uranium", "INGOT", 
Flags.pack2(STD_METAL, GENERATE_ORE), 0x32F032, IconTransformator.UV.METALLIC);
generateClientMaterial("uranium235", "INGOT", Flags.pack3(STD_METAL, GENERATE_ORE, GENERATE_ROD), 0x32F032, IconTransformator.UV.METALLIC);
generateClientMaterial("vanadium", "INGOT", STD_METAL, 0x323232, IconTransformator.UV.METALLIC);
generateClientMaterial("zinc", "INGOT", 
Flags.pack4(STD_METAL, GENERATE_ORE, MORTAR_GRINDABLE, GENERATE_FOIL), 0xFAF0F0, IconTransformator.UV.METALLIC);








generateClientMaterial("almandine", "DUST", GENERATE_ORE, 0xFF0000, IconTransformator.UV.ROUGH);
generateClientMaterial("amber", "GEM", 
Flags.pack4(STD_GEM, NO_SMASHING, NO_SMELTING, HIGH_SIFTER_OUTPUT),  0xBD4949, IconTransformator.UV.RUBY);
generateClientMaterial("banded_iron", "DUST", GENERATE_ORE, 0x915A5A, IconTransformator.UV.DULL);
generateClientMaterial("barite", "DUST", GENERATE_ORE, 0xE6EBFF, IconTransformator.UV.DULL);
generateClientMaterial("bastnasite", "DUST", GENERATE_ORE, 0xC86E2D, IconTransformator.UV.FINE);
generateClientMaterial("battery_alloy", "INGOT", EXT_METAL, 0x9C7CA0, IconTransformator.UV.DULL);
generateClientMaterial("blue_topaz", "GEM", 
Flags.pack4(STD_GEM, NO_SMASHING, NO_SMELTING, HIGH_SIFTER_OUTPUT), 0x0000FF, IconTransformator.UV.GEM_HORIZONTAL);
generateClientMaterial("bronze", "INGOT", 
Flags.pack2(Flags.pack3(EXT2_METAL, MORTAR_GRINDABLE, GENERATE_RING), 
Flags.pack3(GENERATE_ROTOR, GENERATE_FRAME, GENERATE_LONG_ROD)), 0xFF8000, IconTransformator.UV.METALLIC);
generateClientMaterial("brown_limonite", "DUST", GENERATE_ORE, 0xC86400, IconTransformator.UV.METALLIC);
generateClientMaterial("certus_quartz", "GEM", Flags.pack4(STD_SOLID, NO_SMELTING, CRYSTALLISABLE, GENERATE_ORE), 0xD2D2E6, IconTransformator.UV.QUARTZ);
generateClientMaterial("coal", "GEM", 
Flags.pack2(Flags.pack3(GENERATE_ORE, FLAMMABLE, NO_SMELTING),
Flags.pack3(NO_SMASHING, MORTAR_GRINDABLE, EXCLUDE_BLOCK_CRAFTING_BY_HAND_RECIPES)), 0x464646, IconTransformator.UV.ROUGH);
generateClientMaterial("calcite", "DUST", GENERATE_ORE, 0xFAE6DC, IconTransformator.UV.DULL);
generateClientMaterial("cassiterite", "DUST", GENERATE_ORE, 0xDCDCDC, IconTransformator.UV.METALLIC);
generateClientMaterial("chalcopyrite", "DUST", GENERATE_ORE, 0xA07828, IconTransformator.UV.DULL);
generateClientMaterial("cinnabar", "DUST", GENERATE_ORE, 0x960000, IconTransformator.UV.ROUGH);
generateClientMaterial("cobaltite", "DUST", GENERATE_ORE, 0x5050FA, IconTransformator.UV.METALLIC);
generateClientMaterial("cooperite", "DUST", GENERATE_ORE, 0xFFFFC8, IconTransformator.UV.METALLIC);
generateClientMaterial("dark_ash", "DUST", DISABLE_DECOMPOSITION, 0xFF0000, IconTransformator.UV.SAND);
generateClientMaterial("ash", "DUST", DISABLE_DECOMPOSITION, 0x969696, IconTransformator.UV.SAND);
generateClientMaterial("diamond", "GEM", 
Flags.pack3(Flags.pack4(GENERATE_ROD, GENERATE_BOLT_SCREW, GENERATE_LENSE, GENERATE_GEAR),
Flags.pack4(NO_SMASHING, NO_SMELTING, FLAMMABLE, HIGH_SIFTER_OUTPUT), 
Flags.pack3(GENERATE_ORE, DISABLE_DECOMPOSITION, EXCLUDE_BLOCK_CRAFTING_BY_HAND_RECIPES)), 0xC8FFFF, IconTransformator.UV.DIAMOND);
generateClientMaterial("emerald", "GEM", 
Flags.pack5(STD_GEM, NO_SMASHING, NO_SMELTING, HIGH_SIFTER_OUTPUT, EXCLUDE_BLOCK_CRAFTING_BY_HAND_RECIPES), 0x50FF50, IconTransformator.UV.EMERALD);
generateClientMaterial("ender_pearl", "GEM",
Flags.pack4(GENERATE_PLATE, GENERATE_LENSE, NO_SMASHING, NO_SMELTING), 0x50FF50, IconTransformator.UV.GEM_VERTICAL);
generateClientMaterial("galena", "DUST", GENERATE_ORE, 0x643C64, IconTransformator.UV.DULL);
generateClientMaterial("garnierite", "DUST", GENERATE_ORE, 0x32C846, IconTransformator.UV.METALLIC);
generateClientMaterial("glauconite", "DUST", GENERATE_ORE, 0x82B43C, IconTransformator.UV.DULL);
generateClientMaterial("glowstone", "DUST", 
Flags.pack4(NO_SMASHING, SMELT_INTO_FLUID, GENERATE_PLATE, EXCLUDE_PLATE_COMPRESSOR_RECIPE), 0xFFFF00, IconTransformator.UV.SHINY);
generateClientMaterial("graphite", "INGOT", 
Flags.pack4(GENERATE_PLATE, GENERATE_ORE, NO_SMELTING, FLAMMABLE), 0x808080, IconTransformator.UV.DULL);
generateClientMaterial("green_sapphire", "GEM", Flags.pack5(GENERATE_ORE, NO_SMASHING, NO_SMELTING, HIGH_SIFTER_OUTPUT, GENERATE_LENSE), 0x64C882, IconTransformator.UV.GEM_VERTICAL);
generateClientMaterial("andradite", "DUST", GENERATE_ORE, 0xC86400, IconTransformator.UV.ROUGH);
generateClientMaterial("grossular", "DUST", GENERATE_ORE, 0xC86400, IconTransformator.UV.ROUGH);
generateClientMaterial("gunpowder", "DUST", 
Flags.pack4(FLAMMABLE, EXPLOSIVE, NO_SMELTING, NO_SMASHING), 0x808080, IconTransformator.UV.SAND);
generateClientMaterial("quartzite", "GEM", 
Flags.pack3(NO_SMELTING, CRYSTALLISABLE, GENERATE_ORE), 0xD2E6D2, IconTransformator.UV.QUARTZ);
generateClientMaterial("ilmenite", "DUST", GENERATE_ORE,  0x463732, IconTransformator.UV.METALLIC);
generateClientMaterial("jasper", "GEM", 
Flags.pack3(STD_GEM, NO_SMELTING, HIGH_SIFTER_OUTPUT),  0xC85050, IconTransformator.UV.EMERALD);
generateClientMaterial("lazurite", "GEM", GENERATE_ORE, 0x6478FF, IconTransformator.UV.LAPIS);
generateClientMaterial("lepidolite", "DUST", GENERATE_ORE, 0xF0328C, IconTransformator.UV.FINE);
generateClientMaterial("magnesite", "DUST", GENERATE_ORE, 0xFAFAB4, IconTransformator.UV.METALLIC);
generateClientMaterial("magnetite", "DUST", GENERATE_ORE, 0x1E1E1E, IconTransformator.UV.METALLIC);
generateClientMaterial("malachite", "DUST", 
Flags.pack2(GENERATE_ORE, INDUCTION_SMELTING_LOW_OUTPUT), 0x055F05, IconTransformator.UV.DULL);
generateClientMaterial("molybdenite", "DUST", GENERATE_ORE, 0x191919, IconTransformator.UV.METALLIC);
generateClientMaterial("nether_quartz", "GEM", 
Flags.pack5(STD_SOLID, NO_SMELTING, CRYSTALLISABLE, GENERATE_ORE, EXCLUDE_BLOCK_CRAFTING_BY_HAND_RECIPES), 0xE6D2D2, IconTransformator.UV.QUARTZ);
generateClientMaterial("nether_star", "GEM",
Flags.pack4(STD_SOLID, GENERATE_LENSE, NO_SMASHING, NO_SMELTING),  0xFFFFFF, IconTransformator.UV.NETHERSTAR);
generateClientMaterial("pentlandite", "DUST", GENERATE_ORE, 0xFFFF00, IconTransformator.UV.DULL);
generateClientMaterial("phosphate", "DUST", 
Flags.pack5(GENERATE_ORE, NO_SMASHING, NO_SMELTING, FLAMMABLE, EXPLOSIVE), 0xA59605, IconTransformator.UV.DULL);
generateClientMaterial("powellite", "DUST", GENERATE_ORE, 0xFFFF00, IconTransformator.UV.DULL);
generateClientMaterial("pyrite", "DUST", GENERATE_ORE, 0x967828, IconTransformator.UV.ROUGH);
generateClientMaterial("pyrochlore", "DUST", GENERATE_ORE, 0x783264, IconTransformator.UV.METALLIC);
generateClientMaterial("pyrolusite", "DUST", GENERATE_ORE, 0x9696AA, IconTransformator.UV.DULL);
generateClientMaterial("pyrope", "DUST", GENERATE_ORE, 0x783264, IconTransformator.UV.METALLIC);
generateClientMaterial("salt", "DUST", GENERATE_ORE, 0xFFFFFF, IconTransformator.UV.FINE);
generateClientMaterial("silicon_dioxide", "DUST", Flags.pack3(NO_SMASHING | NO_SMELTING | CRYSTALLISABLE),  0x9C7CA0, IconTransformator.UV.DULL);

generateClientMaterial("soapstone", "DUST", GENERATE_ORE, 0x5F915F, IconTransformator.UV.DULL);
generateClientMaterial("spessartine", "DUST", GENERATE_ORE, 0xFF6464, IconTransformator.UV.DULL);
generateClientMaterial("spodumene", "DUST", GENERATE_ORE, 0xBEAAAA, IconTransformator.UV.DULL);
generateClientMaterial("rare_earth", "DUST", 0, 0x808064, IconTransformator.UV.ROUGH);
generateClientMaterial("rock_salt", "DUST", GENERATE_ORE, 0xF0C8C8, IconTransformator.UV.FINE);
generateClientMaterial("ruby", "GEM", 
Flags.pack4(STD_GEM, NO_SMASHING, NO_SMELTING, HIGH_SIFTER_OUTPUT), 0xBD4949, IconTransformator.UV.RUBY);
generateClientMaterial("fools_ruby", "GEM", 
Flags.pack4(STD_GEM, NO_SMASHING, NO_SMELTING, HIGH_SIFTER_OUTPUT), 0xBD4949, IconTransformator.UV.RUBY);
generateClientMaterial("rutile", "GEM",  
Flags.pack3(STD_GEM, GENERATE_ORE, DISABLE_DECOMPOSITION), 0xD40D5C, IconTransformator.UV.GEM_HORIZONTAL);
generateClientMaterial("sapphire", "GEM", 
Flags.pack4(STD_GEM, NO_SMASHING, NO_SMELTING, HIGH_SIFTER_OUTPUT), 0x6464C8, IconTransformator.UV.GEM_HORIZONTAL);
generateClientMaterial("sodalite", "GEM", GENERATE_ORE, 0x1414FF, IconTransformator.UV.LAPIS);
generateClientMaterial("tanzanite", "GEM", 
Flags.pack5(EXT_METAL, GENERATE_ORE, NO_SMASHING, NO_SMELTING, HIGH_SIFTER_OUTPUT), 0x4000C8, IconTransformator.UV.GEM_VERTICAL);
generateClientMaterial("topaz", "GEM", 
Flags.pack4(STD_GEM, NO_SMASHING, NO_SMELTING, HIGH_SIFTER_OUTPUT), 0xFF8000, IconTransformator.UV.GEM_HORIZONTAL);
generateClientMaterial("steel", "INGOT", 
Flags.pack3(Flags.pack3(EXT2_METAL, MORTAR_GRINDABLE, GENERATE_RING), 
Flags.pack3(GENERATE_ROTOR, GENERATE_SMALL_GEAR, GENERATE_DENSE), 
Flags.pack3(DISABLE_DECOMPOSITION, GENERATE_FRAME, GENERATE_LONG_ROD)), 0x505050, IconTransformator.UV.METALLIC);
generateClientMaterial("stibnite", "DUST", GENERATE_ORE, 0x464646, IconTransformator.UV.METALLIC);
generateClientMaterial("scheelite", "DUST", GENERATE_ORE, 0xC88C14, IconTransformator.UV.DULL);
generateClientMaterial("talc", "DUST", GENERATE_ORE, 0x5AB45A, IconTransformator.UV.DULL);
generateClientMaterial("tantalite", "DUST", GENERATE_ORE, 0x915028, IconTransformator.UV.METALLIC);
generateClientMaterial("tungstate", "DUST", GENERATE_ORE, 0x373223, IconTransformator.UV.DULL);
generateClientMaterial("tetrahedrite", "DUST", GENERATE_ORE, 0xC82000, IconTransformator.UV.DULL);
generateClientMaterial("wrought_iron", "INGOT", 
Flags.pack5(EXT2_METAL, MORTAR_GRINDABLE, GENERATE_RING, GENERATE_LONG_ROD, DISABLE_DECOMPOSITION), 0xC8B4B4, IconTransformator.UV.METALLIC);
generateClientMaterial("wulfenite", "DUST", GENERATE_ORE, 0xFF8000, IconTransformator.UV.DULL);
generateClientMaterial("water", "FLUID", 
Flags.pack2(NO_RECYCLING, DISABLE_DECOMPOSITION), 0xFF8000, IconTransformator.UV.FLUID);
generateClientMaterial("yellow_limonite", "DUST", GENERATE_ORE, 0xC8C800, IconTransformator.UV.METALLIC);
generateClientMaterial("uraninite", "DUST", GENERATE_ORE, 0x232323, IconTransformator.UV.METALLIC);
generateClientMaterial("uvarovite", "DUST", 0, 0xB4FFB4, IconTransformator.UV.GEM_VERTICAL);

generateClientMaterial("andesite", "DUST", NO_SMASHING, 0xC8C800, IconTransformator.UV.ROUGH);
generateClientMaterial("basalt", "DUST", NO_SMASHING, 0xC8C800, IconTransformator.UV.ROUGH);
generateClientMaterial("granite_black", "DUST", NO_SMASHING, 0xC8C800, IconTransformator.UV.ROUGH);
generateClientMaterial("diorite", "DUST", NO_SMASHING, 0xC8C800, IconTransformator.UV.ROUGH);
generateClientMaterial("endstone", "DUST", NO_SMASHING, 0xC8C800, IconTransformator.UV.DULL);
generateClientMaterial("granite", "DUST", NO_SMASHING, 0xC8C800, IconTransformator.UV.ROUGH);
generateClientMaterial("gravel", "DUST", NO_SMASHING, 0xC8C800, IconTransformator.UV.METALLIC);
generateClientMaterial("marble", "DUST", NO_SMASHING, 0xC8C800, IconTransformator.UV.FINE);
generateClientMaterial("netherrack", "DUST", NO_SMASHING, 0x232323, IconTransformator.UV.ROUGH);
generateClientMaterial("sandstone", "DUST", NO_SMASHING, 0xC8C800, IconTransformator.UV.ROUGH);
generateClientMaterial("bedrock", "DUST", NO_SMASHING, 0xC8C800, IconTransformator.UV.ROUGH);
generateClientMaterial("sand", "DUST", NO_SMASHING, 0xC8C800, IconTransformator.UV.ROUGH);
generateClientMaterial("stone", "DUST", 
Flags.pack5(
MORTAR_GRINDABLE, GENERATE_GEAR, GENERATE_PLATE, NO_SMASHING, NO_RECYCLING), 0xB4FFB4, IconTransformator.UV.ROUGH);
generateClientMaterial("granite_red", "DUST", NO_SMASHING, 0xC8C800, IconTransformator.UV.ROUGH);
generateClientMaterial("sandstone_red", "DUST", NO_SMASHING, 0xC8C800, IconTransformator.UV.ROUGH);


generateClientMaterial("lava", "FLUID", 0, 0xC8C800, IconTransformator.UV.FLUID);
generateClientMaterial("clay", "DUST", MORTAR_GRINDABLE, 0xC8C800, IconTransformator.UV.ROUGH);
generateClientMaterial("charcoal", "GEM",
Flags.pack4(FLAMMABLE, NO_SMELTING, NO_SMASHING, MORTAR_GRINDABLE), 0xC8C800, IconTransformator.UV.LIGNITE);
generateClientMaterial("glass", "GEM",
Flags.pack2(Flags.pack3(GENERATE_PLATE, GENERATE_LENSE, NO_SMASHING), Flags.pack3(NO_RECYCLING, SMELT_INTO_FLUID, EXCLUDE_BLOCK_CRAFTING_RECIPES)), 0xC8C800, IconTransformator.UV.GLASS);
generateClientMaterial("wheat", "DUST", 0, 0xC8C800, IconTransformator.UV.FINE);
generateClientMaterial("brick", "DUST",
Flags.pack2(EXCLUDE_BLOCK_CRAFTING_RECIPES, DECOMPOSITION_BY_CENTRIFUGING), 0xC8C800, IconTransformator.UV.GLASS);
generateClientMaterial("steam", "FLUID",
Flags.pack3(NO_RECYCLING, GENERATE_FLUID_BLOCK, DISABLE_DECOMPOSITION), 0xC8C800, IconTransformator.UV.FLUID);




generateClientMaterial("amethyst", "GEM", 
Flags.pack4(STD_GEM, NO_SMASHING, NO_SMELTING, HIGH_SIFTER_OUTPUT), 0xD232D2, IconTransformator.UV.FLINT);
generateClientMaterial("apatite", "GEM", 
Flags.pack4(GENERATE_ORE, NO_SMASHING, NO_SMELTING, CRYSTALLISABLE), 0xC8C8FF, IconTransformator.UV.DIAMOND);
generateClientMaterial("bauxite", "DUST", GENERATE_ORE, 0xC86400, IconTransformator.UV.DULL);
generateClientMaterial("bentonite", "DUST", GENERATE_ORE, 0xF5D7D2, IconTransformator.UV.ROUGH);
generateClientMaterial("blaze", "DUST",
Flags.pack4(NO_SMELTING, SMELT_INTO_FLUID, MORTAR_GRINDABLE, BURNING), 0xFFC800, IconTransformator.UV.DULL);
generateClientMaterial("ender_eye", "GEM",
Flags.pack4(GENERATE_PLATE, GENERATE_LENSE, NO_SMASHING, NO_SMELTING), 0x50FF50, IconTransformator.UV.GEM_VERTICAL);
generateClientMaterial("monazite", "GEM", 
Flags.pack4(GENERATE_ORE, NO_SMASHING, NO_SMELTING, CRYSTALLISABLE), 0x324632, IconTransformator.UV.DIAMOND); // ? - lantanoids rateearh
generateClientMaterial("olivine", "GEM",
Flags.pack4(STD_GEM, NO_SMASHING, NO_SMELTING, HIGH_SIFTER_OUTPUT), 0x66FF66, IconTransformator.UV.RUBY);
generateClientMaterial("opal", "GEM",
Flags.pack4(STD_GEM, NO_SMASHING, NO_SMELTING, HIGH_SIFTER_OUTPUT), 0x0000FF, IconTransformator.UV.OPAL);
generateClientMaterial("lapis", "GEM", GENERATE_ORE, 0x4646DC, IconTransformator.UV.LAPIS);
generateClientMaterial("lignite", "GEM", 
Flags.pack5(GENERATE_ORE, FLAMMABLE, NO_SMELTING, NO_SMASHING, MORTAR_GRINDABLE), 0x644646, IconTransformator.UV.LIGNITE);
generateClientMaterial("pitchblende", "DUST", GENERATE_ORE, 0xC8D200, IconTransformator.UV.DULL);


generateClientMaterial("garnet_red", "GEM", 
Flags.pack2(Flags.pack3(STD_SOLID, GENERATE_LENSE, NO_SMASHING), Flags.pack3(NO_SMELTING, HIGH_SIFTER_OUTPUT, GENERATE_ORE)), 0xC85050, IconTransformator.UV.RUBY);
generateClientMaterial("redstone", "DUST", GENERATE_ORE, 0xC80000, IconTransformator.UV.ROUGH);

generateClientMaterial("garnet_yellow", "GEM", Flags.pack2(Flags.pack3(STD_SOLID, GENERATE_LENSE, NO_SMASHING), Flags.pack3(NO_SMELTING, HIGH_SIFTER_OUTPUT, GENERATE_ORE)), 0xC8C850, IconTransformator.UV.RUBY);
generateClientMaterial("flint", "GEM", 
Flags.pack2(NO_SMASHING, MORTAR_GRINDABLE), 0x001E00, IconTransformator.UV.FLINT);
generateClientMaterial("vanadium_magnetite", "DUST", GENERATE_ORE, 0x23233C, IconTransformator.UV.METALLIC);




generateClientMaterial("red_alloy", "INGOT", Flags.pack2(GENERATE_PLATE, GENERATE_FINE_WIRE), 0xC80000, IconTransformator.UV.DULL);

generateClientOre("copper", IconTransformator.UV.METALLIC, 0xFFAAAB);
generateClientOre("tin", IconTransformator.UV.DULL, 0xDCDCDC);
generateClientOre("rutile", IconTransformator.UV.GEM_HORIZONTAL, 0xD40D5C);
generateClientOre("iron", IconTransformator.UV.METALLIC, 0xAAAAAA);
generateClientOre("coal", IconTransformator.UV.ROUGH, 0x464646);
generateClientOre("lignite", IconTransformator.UV.LIGNITE, 0x644646);
generateClientOre("magnetite", IconTransformator.UV.METALLIC, 0x1E1E1E);
generateClientOre("vanadium_magnetite", IconTransformator.UV.METALLIC, 0x23233C);
generateClientOre("redstone", IconTransformator.UV.ROUGH, 0xC80000);
generateClientOre("gold", IconTransformator.UV.SHINY, 0xFFFF00);
generateClientOre("graphite", IconTransformator.UV.DULL, 0x808080);
generateClientOre("diamond", IconTransformator.UV.DIAMOND, 0xC8FFFF);
generateClientOre("bismuth", IconTransformator.UV.METALLIC, 0x64A0A0);
generateClientOre("lead", IconTransformator.UV.DULL, 0x8C648C);
generateClientOre("zinc", IconTransformator.UV.DULL, 0xFAF0F0);
generateClientOre("silver", IconTransformator.UV.SHINY, 0xDCDCFF);
generateClientOre("nickel", IconTransformator.UV.METALLIC, 0xAAAAFF);
generateClientOre("lapis", IconTransformator.UV.LAPIS, 0x4646DC);
generateClientOre("emerald", IconTransformator.UV.EMERALD, 0x50FF50);
generateClientOre("ruby", IconTransformator.UV.RUBY, 0xBD4949);
generateClientOre("sapphire", IconTransformator.UV.GEM_HORIZONTAL, 0x6464C8);
generateClientOre("green_sapphire", IconTransformator.UV.GEM_VERTICAL, 0x64C882);
generateClientOre("coal", IconTransformator.UV.ROUGH, 0x464646);
generateClientOre("olivine", IconTransformator.UV.RUBY, 0x66FF66);
generateClientOre("topaz", IconTransformator.UV.GEM_HORIZONTAL, 0xFF8000);
generateClientOre("tanzanite", IconTransformator.UV.GEM_VERTICAL, 0x4000C8);
generateClientOre("amethyst", IconTransformator.UV.FLINT, 0xD232D2);
generateClientOre("opal", IconTransformator.UV.OPAL, 0x0000FF);
generateClientOre("blue_topaz", IconTransformator.UV.GEM_HORIZONTAL, 0x0000FF);
generateClientOre("amber", IconTransformator.UV.RUBY, 0xBD4949);
generateClientOre("fools_ruby", IconTransformator.UV.RUBY, 0xBD4949);
generateClientOre("garnet_red", IconTransformator.UV.RUBY, 0xC85050);
generateClientOre("garnet_yellow", IconTransformator.UV.RUBY, 0xC8C850);
generateClientOre("sulfur", IconTransformator.UV.DULL, 0xC8C800);
generateClientOre("brown_limonite", IconTransformator.UV.METALLIC, 0xC86400);
generateClientOre("yellow_limonite", IconTransformator.UV.METALLIC, 0xC8C800);
generateClientOre("banded_iron", IconTransformator.UV.DULL, 0x915A5A);
generateClientOre("malachite", IconTransformator.UV.DULL, 0x055F05);
generateClientOre("cassiterite", IconTransformator.UV.METALLIC, 0xDCDCDC);
generateClientOre("tetrahedrite", IconTransformator.UV.DULL, 0xC82000);
generateClientOre("stibnite", IconTransformator.UV.METALLIC, 0x464646);
generateClientOre("chalcopyrite", IconTransformator.UV.DULL, 0xA07828);
generateClientOre("pyrite", IconTransformator.UV.ROUGH, 0x967828);
generateClientOre("bauxite", IconTransformator.UV.DULL, 0xC86400);
generateClientOre("aluminium", IconTransformator.UV.DULL, 0x80C8F0);
generateClientOre("ilmenite", IconTransformator.UV.METALLIC, 0x463732);
generateClientOre("salt", IconTransformator.UV.FINE, 0xFFFFFF);
generateClientOre("rock_salt", IconTransformator.UV.FINE, 0xF0C8C8);
generateClientOre("lepidolite", IconTransformator.UV.DULL, 0xF0328C); //
generateClientOre("spodumene", IconTransformator.UV.DULL, 0xBEAAAA);
generateClientOre("cinnabar", IconTransformator.UV.ROUGH, 0x960000);
generateClientOre("soapstone", IconTransformator.UV.DULL, 0x5F915F);
generateClientOre("talc", IconTransformator.UV.DULL, 0x5AB45A);
generateClientOre("glauconite", IconTransformator.UV.DULL, 0x82B43C);
generateClientOre("pentlandite", IconTransformator.UV.DULL, 0xFFFF00);
generateClientOre("garnierite", IconTransformator.UV.METALLIC, 0x32C846);
generateClientOre("cobaltite", IconTransformator.UV.METALLIC, 0x2929BC);
generateClientOre("cooperite", IconTransformator.UV.METALLIC, 0xFFFFC8);
generateClientOre("palladium", IconTransformator.UV.METALLIC, 0xCED0DD);
generateClientOre("iridium", IconTransformator.UV.DULL, 0xFFFFFF);
generateClientOre("platinum", IconTransformator.UV.SHINY, 0xFFFF99);
generateClientOre("pitchblende", IconTransformator.UV.DULL, 0xC8D200);
generateClientOre("uraninite", IconTransformator.UV.METALLIC, 0x232323);
generateClientOre("uranium", IconTransformator.UV.METALLIC, 0x32F032);
generateClientOre("bastnasite", IconTransformator.UV.FINE, 0xC86E2D);
generateClientOre("monazite", IconTransformator.UV.DIAMOND, 0x324632);
generateClientOre("neodymium", IconTransformator.UV.DULL, 0x777777);
generateClientOre("wulfenite", IconTransformator.UV.DULL, 0xFF8000);
generateClientOre("molybdenite", IconTransformator.UV.DULL, 0x191919);
generateClientOre("molybdenum", IconTransformator.UV.DULL, 0xAAAADD);
generateClientOre("powellite", IconTransformator.UV.DULL, 0xFFFF00);
generateClientOre("nether_quartz", IconTransformator.UV.QUARTZ, 0xE6D2D2);
generateClientOre("jasper", IconTransformator.UV.EMERALD, 0xC85050);
generateClientOre("scheelite", IconTransformator.UV.DULL, 0xC88C14);
generateClientOre("tungstate", IconTransformator.UV.DULL, 0x373223);
generateClientOre("lithium", IconTransformator.UV.DULL, 0xCBCBCB);
generateClientOre("almandine", IconTransformator.UV.DULL, 0xFF0000);
generateClientOre("pyrope", IconTransformator.UV.DULL, 0xFF0000);
generateClientOre("grossular", IconTransformator.UV.DULL, 0xC86400);
generateClientOre("spessartine", IconTransformator.UV.DULL, 0xFF6464);
generateClientOre("pyrolusite", IconTransformator.UV.DULL, 0x9696AA);
generateClientOre("tantalite", IconTransformator.UV.DULL, 0x915028);
generateClientOre("quartzite", IconTransformator.UV.DULL, 0xD2E6D2);
generateClientOre("certus_quartz", IconTransformator.UV.DULL, 0xD2D2E6);
generateClientOre("barite", IconTransformator.UV.DULL, 0xE6EBFF);
generateClientOre("bentonite", IconTransformator.UV.DULL, 0xF5D7D2);
generateClientOre("magnesite", IconTransformator.UV.METALLIC, 0xFAFAB4);
generateClientOre("apatite", IconTransformator.UV.DIAMOND, 0xC8C8FF);
generateClientOre("phosphorus", IconTransformator.UV.DULL, 0xC8C800);
generateClientOre("pyrochlore", IconTransformator.UV.METALLIC, 0x783264);
generateClientOre("galena", IconTransformator.UV.DULL, 0x643C64);
generateClientOre("sodalite", IconTransformator.UV.LAPIS, 0x1414FF);
generateClientOre("lazurite", IconTransformator.UV.LAPIS, 0x6478FF);
generateClientOre("calcite", IconTransformator.UV.DULL, 0xFAE6DC);
generateClientOre("beryllium", IconTransformator.UV.METALLIC, 0x64B464);
generateClientOre("thorium", IconTransformator.UV.SHINY, 0x001E00);



addToolTypeGenerate("hammer", "toolHeadHammer", "_stick", 0, [
   {u: 10, v: 0}, 
  {u: 9, v: 1}, {u: 10, v: 1}, {u: 11, v: 1},
  {u: 8, v: 2}, {u: 9, v: 2}, {u: 10, v: 2},
  {u: 11, v: 2}, {u: 12, v: 2},
  {u: 7, v: 3}, {u: 8, v: 3}, {u: 9, v: 3},
  {u: 10, v: 3}, {u: 11, v: 3}, {u: 12, v: 3}, {u: 13, v: 3},
  {u: 8, v: 4}, {u: 9, v: 4}, {u: 10, v: 4}, {u: 11, v: 4}, {u: 12, v: 4}, {u: 13, v: 4}, {u: 14, v: 4},
  {u: 9, v: 5}, {u: 10, v: 5}, {u: 11, v: 5}, {u: 12, v: 5}, {u: 13, v: 5}, {u: 14, v: 5}, {u: 15, v: 5},
   {u: 10, v: 6}, {u: 11, v: 6}, {u: 12, v: 6}, {u: 13, v: 6}, {u: 14, v: 6},
   {u: 11, v: 7}, {u: 12, v: 7}, {u: 13, v: 7},
   {u: 12, v: 8}
   ], null, "_stick", null, "stick");
addToolTypeGenerate("file", "toolHeadFile", "HANDLE_FILE", 0, [
  {u: 3, v: 1}, 
  {u: 2, v: 2}, {u: 3, v: 2}, {u: 4, v: 2},
  {u: 1, v: 3}, {u: 2, v: 3}, {u: 3, v: 3}, {u: 4, v: 3}, {u: 5, v: 3},
    {u: 2, v: 4}, {u: 3, v: 4}, {u: 4, v: 4}, {u: 5, v: 4}, {u: 6, v: 4},
{u: 3, v: 5}, {u: 4, v: 5}, {u: 5, v: 5}, {u: 6, v: 5}, {u: 7, v: 5}, 
 {u: 4, v: 6}, {u: 5, v: 6}, {u: 6, v: 6}, {u: 7, v: 6}, {u: 8, v: 6},
 {u: 5, v: 7}, {u: 6, v: 7}, {u: 7, v: 7}, {u: 8, v: 7},
  {u: 6, v: 8}, {u: 7, v: 8}, {u: 8, v: 8}, {u: 9, v: 8}, 
  {u: 8, v: 9}, {u: 9, v: 9}, {u: 10, v: 9},
  {u: 9, v: 10}, {u: 10, v: 10}, {u: 11, v: 10},
  {u: 10, v: 11}, {u: 11, v: 11}
  ], null, [
      {u: 10, v: 6}, 
      {u: 9, v: 7}, {u: 10, v: 7}, 
      {u: 8, v: 8}, {u: 9, v: 8}, {u: 10, v: 8}, 
      {u: 7, v: 9}, {u: 8, v: 9}, {u: 9, v: 9}, {u: 10, v: 9}, {u: 11, v: 9}, {u: 12, v: 9},
        {u: 6, v: 10}, {u: 7, v: 10}, {u: 8, v: 10}, {u: 9, v: 10}, {u: 10, v: 10}, {u: 11, v: 10}, {u: 12, v: 10}, {u: 13, v: 10},
          {u: 9, v: 11}, {u: 10, v: 11}, {u: 11, v: 11}, {u: 12, v: 11}, {u: 13, v: 11}, {u: 14, v: 11},
          {u: 9, v: 12}, {u: 10, v: 12}, {u: 11, v: 12}, {u: 12, v: 12}, {u: 13, v: 12}, {u: 14, v: 12},
          {u: 10, v: 13}, {u: 11, v: 13}, {u: 12, v: 13}, {u: 13, v: 13}, {u: 14, v: 13}, 
          {u: 11, v: 14}, {u: 12, v: 14}, {u: 13, v: 14},
    ], null, "handle", 0x6478FF);
addToolTypeGenerate("axe", "toolHeadAxe", "_stick", 0, [
  {u: 9, v: 0}, {u: 10, v: 0},
  {u: 8, v: 1}, {u: 9, v: 1}, {u: 10, v: 1},  {u: 11, v: 1}, 
  {u: 7, v: 2}, {u: 8, v: 2}, {u: 9, v: 2}, {u: 10, v: 2}, {u: 11, v: 2}, 
  {u: 6, v: 3}, {u: 7, v: 3}, {u: 8, v: 3}, {u: 9, v: 3}, {u: 10, v: 3},
   {u: 6, v: 4}, {u: 7, v: 4}, {u: 8, v: 4}, {u: 9, v: 4},  {u: 10, v: 4}, {u: 11, v: 4}, 
   {u: 7, v: 5}, {u: 8, v: 5}, {u: 10, v: 5}, {u: 11, v: 5}, {u: 12, v: 5}, {u: 13, v: 5},
   {u: 11, v: 6}, {u: 12, v: 6}, {u: 13, v: 6},
    {u: 11, v: 7}, {u: 12, v: 7},
  ], null, "_stick", null, "stick");
addToolTypeGenerate("hoe", "toolHeadHoe", "_stick", 0, [
  {u: 7, v: 0}, {u: 8, v: 0}, {u: 9, v: 0}, 
  {u: 6, v: 1}, {u: 7, v: 1}, {u: 8, v: 1}, {u: 9, v: 1}, {u: 10, v: 1}, 
  {u: 7, v: 2}, {u: 8, v: 2}, {u: 9, v: 2}, {u: 10, v: 2}, {u: 11, v: 2},
  {u: 9, v: 3}, {u: 10, v: 3}, {u: 11, v: 3},
  {u: 11, v: 4}, {u: 12, v: 4}, {u: 13, v: 4},
  {u: 12, v: 5}
  ], null, "_stick", null, "stick");
addToolTypeGenerate("pickaxe", "toolHeadPickaxe", "_stick", 0, [
  {u: 6, v: 1}, {u: 7, v: 1}, {u: 8, v: 1}, 
  {u: 9, v: 1}, {u: 10, v: 1}, 
  {u: 5, v: 2},  {u: 6, v: 2}, {u: 7, v: 2}, {u: 8, v: 2}, {u: 9, v: 2}, {u: 10, v: 2}, {u: 11, v: 2}, 
  {u: 11, v: 3}, {u: 12, v: 4}, {u: 13, v: 4},
  {u: 12, v: 5}, {u: 13, v: 5}, {u: 14, v: 5},
  {u: 12, v: 6}, {u: 13, v: 6}, {u: 14, v: 6},
  {u: 12, v: 7}, {u: 13, v: 7}, {u: 14, v: 7},
  {u: 12, v: 8}, {u: 13, v: 8}, {u: 14, v: 8},
  {u: 12, v: 9}, {u: 13, v: 9}, {u: 14, v: 9},
    {u: 13, v: 10}
  ], null, "_stick", null, "stick");
addToolTypeGenerate("shovel", "toolHeadShovel", "_stick", 0, [
   {u: 11, v: 1}, {u: 12, v: 1}, {u: 13, v: 1},
    {u: 10, v: 2}, {u: 11, v: 2}, {u: 12, v: 2}, {u: 13, v: 2},  {u: 14, v: 2}, 
    
    {u: 9, v: 3}, {u: 10, v: 3}, {u: 11, v: 3}, {u: 12, v: 3}, {u: 13, v: 3}, {u: 14, v: 3},
    
     {u: 8, v: 4}, {u: 9, v: 4}, {u: 10, v: 4}, {u: 11, v: 4}, {u: 12, v: 4}, {u: 13, v: 4}, {u: 14, v: 4},
       {u: 10, v: 5}, {u: 11, v: 5}, {u: 12, v: 5}, {u: 13, v: 5}, 
       {u: 11, v: 6}, {u: 12, v: 6},
         {u: 11, v: 7},
  ], null, "_stick", null, "stick");
addToolTypeGenerate("sword", "toolHeadSword", "HANDLE_SWORD", 0, [
  {u: 13, v: 0}, {u: 14, v: 0}, {u: 15, v: 0}, 
{u: 12, v: 1}, {u: 13, v: 1}, {u: 14, v: 1}, {u: 15, v: 1}, 
{u: 11, v: 2}, {u: 12, v: 2}, {u: 13, v: 2}, {u: 14, v: 2}, {u: 15, v: 2},
{u: 10, v: 3}, {u: 11, v: 3}, {u: 12, v: 3}, {u: 13, v: 3}, {u: 14, v: 3}, 
{u: 9, v: 4}, {u: 10, v: 4}, {u: 11, v: 4}, {u: 12, v: 4}, {u: 13, v: 4}, 
{u: 8, v: 5}, {u: 9, v: 5}, {u: 10, v: 5}, {u: 11, v: 5}, {u: 12, v: 5},
   {u: 7, v: 6}, {u: 8, v: 6}, {u: 9, v: 6}, {u: 10, v: 6}, {u: 11, v: 6},
 {u: 6, v: 7}, {u: 7, v: 7}, {u: 8, v: 7}, {u: 9, v: 7}, {u: 10, v: 7},
{u: 5, v: 8}, {u: 6, v: 8}, {u: 7, v: 8}, {u: 8, v: 8}, {u: 9, v: 8},
{u: 5, v: 9}, {u: 6, v: 9}, {u: 7, v: 9}, {u: 8, v: 9},
{u: 4, v: 10}, {u: 5, v: 10}, {u: 6, v: 10}, {u: 7, v: 10},
{u: 3, v: 11}, {u: 4, v: 11}, {u: 5, v: 11},
{u: 2, v: 12}, {u: 3, v: 12}, {u: 4, v: 12},
{u: 2, v: 13}, {u: 3, v: 13},
], null, [
  {u: 2, v: 6}, {u: 3, v: 6}, 
  {u: 2, v: 7}, {u: 3, v: 7}, {u: 4, v: 7}, 
  {u: 3, v: 8}, {u: 4, v: 8}, {u: 5, v: 8}, 
  {u: 3, v: 9}, {u: 4, v: 9}, {u: 5, v: 9}, 
  {u: 4, v: 10}, {u: 5, v: 10}, {u: 6, v: 10}, {u: 7, v: 10},
  {u: 3, v: 11}, {u: 4, v: 11}, {u: 5, v: 11}, {u: 6, v: 11}, {u: 7, v: 11}, {u: 8, v: 11}, 
  {u: 2, v: 12}, {u: 3, v: 12}, {u: 4, v: 12}, {u: 6, v: 12}, {u: 7, v: 12}, {u: 8, v: 12}, {u: 9, v: 12}, 
  {u: 0, v: 13}, {u: 1, v: 13}, {u: 2, v: 13}, {u: 3, v: 13}, {u: 8, v: 13}, {u: 9, v: 13}, 
  {u: 0, v: 14}, {u: 1, v: 14}, {u: 2, v: 14}, 
  {u: 0, v: 14}, {u: 1, v: 14}, {u: 2, v: 14}, 
  ], null, "handle");
addToolTypeGenerate("mortar", "MORTAR", null, GENERATE_MORTAR, [
    {u: 11, v: 2}, {u: 12, v: 2}, 
    {u: 10, v: 3}, {u: 11, v: 3}, {u: 12, v: 3}, {u: 13, v: 3},
    {u: 10, v: 4}, {u: 11, v: 4}, {u: 12, v: 4}, {u: 13, v: 4}, {u: 14, v: 4}, 
      {u: 9, v: 5}, {u: 10, v: 5}, {u: 11, v: 5}, {u: 12, v: 5}, {u: 13, v: 5}, {u: 14, v: 5},
      {u: 8, v: 6}, {u: 9, v: 6}, {u: 10, v: 6}, {u: 11, v: 6}, {u: 12, v: 6}, {u: 13, v: 6},
       {u: 7, v: 7}, {u: 8, v: 7}, {u: 9, v: 7}, {u: 10, v: 7}, {u: 11, v: 7}, 
       
       {u: 7, v: 8}, {u: 8, v: 8}, {u: 9, v: 8}, {u: 10, v: 8}
  ], [
    {u: 5, v: 5}, {u: 6, v: 5}, {u: 7, v: 5}, {u: 8, v: 5}, 
    
    {u: 3, v: 6}, {u: 4, v: 6}, {u: 5, v: 6}, {u: 6, v: 6}, {u: 7, v: 6}, 
    {u: 2, v: 7}, {u: 3, v: 7}, {u: 4, v: 7}, {u: 5, v: 7}, {u: 6, v: 7}, {u: 12, v: 7}, {u: 13, v: 7},
       {u: 2, v: 8}, {u: 3, v: 8}, {u: 4, v: 8}, {u: 5, v: 8}, {u: 6, v: 8}, {u: 11, v: 8}, {u: 12, v: 8}, {u: 13, v: 8},
     {u: 2, v: 9}, {u: 3, v: 9}, {u: 4, v: 9}, {u: 5, v: 9}, {u: 6, v: 9}, {u: 7, v: 9}, {u: 8, v: 9}, {u: 9, v: 9}, {u: 10, v: 9}, {u: 11, v: 9}, {u: 12, v: 9}, {u: 13, v: 9},
  {u: 3, v: 10}, {u: 4, v: 10}, {u: 5, v: 10}, {u: 6, v: 10}, {u: 7, v: 10}, {u: 8, v: 10}, {u: 9, v: 10}, {u: 10, v: 10}, {u: 11, v: 10}, {u: 12, v: 10},
  {u: 4, v: 11}, {u: 5, v: 11}, {u: 6, v: 11}, {u: 7, v: 11}, {u: 8, v: 11}, {u: 9, v: 11}, {u: 10, v: 11}, {u: 11, v: 11},
   {u: 6, v: 12}, {u: 7, v: 12}, {u: 8, v: 12}, {u: 9, v: 12},
    ], null, null, "null");
addToolTypeGenerate("screwdriver", "toolHeadScrewdriver", "HANDLE_SCREWDRIVER", 0, [
     {u: 2, v: 2}, {u: 3, v: 2}, 
     {u: 2, v: 3}, {u: 3, v: 3}, {u: 4, v: 3},
      {u: 3, v: 4}, {u: 4, v: 4}, {u: 5, v: 4}, 
      {u: 4, v: 5}, {u: 5, v: 5}, {u: 6, v: 5},
       {u: 5, v: 6}, {u: 6, v: 6}, {u: 7, v: 6}, 
       {u: 6, v: 7}, {u: 7, v: 7}, {u: 8, v: 7},
        {u: 7, v: 8}, {u: 8, v: 8}, {u: 9, v: 8}, 
        {u: 8, v: 9}, {u: 9, v: 9}, {u: 10, v: 9},
         {u: 9, v: 10}, {u: 10, v: 10}, {u: 11, v: 10}, 
         {u: 10, v: 11}, {u: 11, v: 11}
  ], null, [
      {u: 10, v: 6}, 
      {u: 9, v: 7}, {u: 10, v: 7}, 
      {u: 8, v: 8}, {u: 9, v: 8}, {u: 10, v: 8}, 
      {u: 7, v: 9}, {u: 8, v: 9}, {u: 9, v: 9}, {u: 10, v: 9}, {u: 11, v: 9}, {u: 12, v: 9},
        {u: 6, v: 10}, {u: 7, v: 10}, {u: 8, v: 10}, {u: 9, v: 10}, {u: 10, v: 10}, {u: 11, v: 10}, {u: 12, v: 10}, {u: 13, v: 10},
          {u: 9, v: 11}, {u: 10, v: 11}, {u: 11, v: 11}, {u: 12, v: 11}, {u: 13, v: 11}, {u: 14, v: 11},
          {u: 9, v: 12}, {u: 10, v: 12}, {u: 11, v: 12}, {u: 12, v: 12}, {u: 13, v: 12}, {u: 14, v: 12},
          {u: 10, v: 13}, {u: 11, v: 13}, {u: 12, v: 13}, {u: 13, v: 13}, {u: 14, v: 13}, 
          {u: 11, v: 14}, {u: 12, v: 14}, {u: 13, v: 14},
    ], null, "handle", 0x6478FF);
addToolTypeGenerate("wirecutter", "WIRE_CUTTER", null, 0, [
   {u: 6, v: 2}, {u: 9, v: 2},
    {u: 5, v: 3}, {u: 6, v: 3}, {u: 7, v: 3}, {u: 8, v: 3},  {u: 9, v: 3}, {u: 10, v: 3}, 
    {u: 5, v: 4}, {u: 6, v: 4}, {u: 7, v: 4}, {u: 8, v: 4},  {u: 9, v: 4}, {u: 10, v: 4}, 
       {u: 5, v: 5}, {u: 6, v: 5}, {u: 7, v: 5}, {u: 8, v: 5},  {u: 9, v: 5}, {u: 10, v: 5}, 
          {u: 7, v: 6}, {u: 8, v: 6}
  ], [
     {u: 6, v: 6}, {u: 9, v: 6},
    {u: 5, v: 7}, {u: 6, v: 7}, {u: 7, v: 7}, {u: 8, v: 7},  {u: 9, v: 7}, {u: 10, v: 7}, 
    {u: 4, v: 8}, {u: 5, v: 8}, {u: 6, v: 8}, {u: 9, v: 8}, {u: 10, v: 8}, {u: 11, v: 8}, 
       {u: 3, v: 9}, {u: 4, v: 9}, {u: 5, v: 9}, {u: 10, v: 9},  {u: 11, v: 9}, {u: 12, v: 9}, 
      {u: 2, v: 10}, {u: 3, v: 10}, {u: 4, v: 10}, {u: 11, v: 10}, {u: 12, v: 10}, {u: 13, v: 10},
       {u: 1, v: 11}, {u: 2, v: 11}, {u: 3, v: 11}, {u: 12, v: 11},  {u: 13, v: 11}, {u: 14, v: 11},
        {u: 1, v: 12}, {u: 2, v: 12}, {u: 13, v: 12}, {u: 14, v: 12}, 
    ], null, null, "null");
addToolTypeGenerate("wrench", "WRENCH", null, 0, [ 
      {u: 5, v: 1}, {u: 6, v: 1}, {u: 9, v: 1}, {u: 10, v: 1},
      {u: 4, v: 2}, {u: 5, v: 2}, {u: 6, v: 2}, {u: 9, v: 2}, {u: 10, v: 2}, {u: 11, v: 2}, 
      
      {u: 4, v: 3}, {u: 5, v: 3}, {u: 6, v: 3}, {u: 9, v: 3}, {u: 10, v: 3}, {u: 11, v: 3},
      
      {u: 4, v: 4}, {u: 5, v: 4}, {u: 6, v: 4}, {u: 7, v: 4}, {u: 8, v: 4}, {u: 9, v: 4}, {u: 10, v: 4}, {u: 11, v: 4},  
      {u: 5, v: 5}, {u: 6, v: 5}, {u: 7, v: 5}, {u: 8, v: 5}, {u: 9, v: 5}, {u: 10, v: 5}, 
      
      {u: 6, v: 6}, {u: 7, v: 6}, {u: 8, v: 6}, {u: 9, v: 6}, 
      {u: 6, v: 7}, {u: 7, v: 7}, {u: 8, v: 7}, {u: 9, v: 7}, 
      {u: 6, v: 8}, {u: 7, v: 8}, {u: 8, v: 8}, {u: 9, v: 8}, 
      {u: 6, v: 9}, {u: 7, v: 9}, {u: 8, v: 9}, {u: 9, v: 9}, 
      {u: 6, v: 10}, {u: 7, v: 10}, {u: 8, v: 10}, {u: 9, v: 10}, 
      {u: 6, v: 11}, {u: 7, v: 11}, {u: 8, v: 11}, {u: 9, v: 11}, 
      {u: 6, v: 12}, {u: 7, v: 12}, {u: 8, v: 12}, {u: 9, v: 12}, 
 {u: 6, v: 13}, {u: 7, v: 13}, {u: 8, v: 13}, {u: 9, v: 13}, 
      {u: 7, v: 14}, {u: 8, v: 14},
  ], null, null, null, "null");

generateClientTool("flint", IconTransformator.UV.FLINT, 0x002040,  "copper", IconTransformator.UV.WOOD, 0x896727, GENERATE_MORTAR, false);
generateClientTool("iron", IconTransformator.UV.METALLIC, 0xAAAAAA, "copper", IconTransformator.UV.WOOD, 0x896727, GENERATE_MORTAR, false);
generateClientTool("aluminium", IconTransformator.UV.METALLIC, 0x80C8F0, "copper", IconTransformator.UV.WOOD, 0x896727, GENERATE_MORTAR, false);
generateClientTool("cobalt", IconTransformator.UV.METALLIC, 0x2929BC, "copper", IconTransformator.UV.WOOD, 0x896727, 0, false);
generateClientTool("beryllium", IconTransformator.UV.METALLIC, 0x64B464, "copper", IconTransformator.UV.WOOD, 0x896727, 0, false);
generateClientTool("steel", IconTransformator.UV.DULL, 0x505050, "copper", IconTransformator.UV.WOOD, 0x896727, GENERATE_MORTAR, false);
generateClientTool("copper", IconTransformator.UV.SHINY, 0xFF8000, "copper", IconTransformator.UV.WOOD, 0x896727, 0, false);
generateClientTool("bronze", IconTransformator.UV.DULL, 0xFF8000, "copper", IconTransformator.UV.WOOD, 0x896727, GENERATE_MORTAR, false);
generateClientTool("wrought_iron", IconTransformator.UV.METALLIC, 0xC8B4B4, "copper", IconTransformator.UV.WOOD, 0x896727, GENERATE_MORTAR, false);
generateClientTool("diamond", IconTransformator.UV.DIAMOND, 0xC8FFFF, "copper", IconTransformator.UV.WOOD, 0x896727, 0, false);

addCasing("MACHINE_BRONZE", ["BOTTOM", "TOP", "SIDE"]);
addCasing("MACHINE_BRONZEBRICKS", ["BOTTOM", "TOP", "SIDE"]);
addCasing("MACHINE_STEEL", ["BOTTOM", "TOP", "SIDE"]);
addCasing("MACHINE_STEELBRICKS", ["BOTTOM", "TOP", "SIDE"]);

addMachineForGenerate(["MACHINE_BRONZEBRICKS", "MACHINE_STEELBRICKS"],  ["bronze", "steel"], "alloy_smelter", ["FRONT"]);
addMachineForGenerate(["MACHINE_BRONZEBRICKS", "MACHINE_STEELBRICKS"],  ["bronze", "steel"], "furnace", ["FRONT"]);
addMachineForGenerate(["MACHINE_BRONZE", "MACHINE_STEEL"],  ["bronze", "steel"], "hammer", ["FRONT"]);
addMachineForGenerate(["MACHINE_BRONZE", "MACHINE_STEEL"],  ["bronze", "steel"], "macerator", ["FRONT"]);
addMachineForGenerate(["MACHINE_BRONZE", "MACHINE_STEEL"],  ["bronze", "steel"], "compressor", ["FRONT"]);
addMachineForGenerate(["MACHINE_BRONZE", "MACHINE_STEEL"],  ["bronze", "steel"], "extractor", ["SIDE", "FRONT"]);
addMachineForGenerate(["MACHINE_BRONZEBRICKS", "MACHINE_STEELBRICKS"],  ["bronze", "steel"], "boiler", ["FRONT"]);
addMachineForGenerate(["MACHINE_STEELBRICKS"],  ["steel"], "boiler_lava", ["FRONT"]);
addMachineForGenerate(["MACHINE_BRONZEBRICKS"],  ["bronze"], "boiler_solar", ["TOP"]);

setLoadingTip("loading API");

function Set(hashFunction) {
        //custom hash function or default to JSON.stringify
        this.hashFunction = hashFunction || JSON.stringify;
        //initialize private variables: empty set with length 0
        var _length = 0,
            _set = [];

        /**
         * Simple function which finds a value in the set if it exists and returns undefined if not in the set
         *
         * @param value
         * @returns {*}
         */
        this.get = function (value) {
            return _set[value];
        };

        /**
         * Helper function to return the set object
         *
         * @returns {{}}
         */
        this.getSet = function () {
            return _set;
        };

        /**
         * Function which takes in a list of values to put into the set and adds them if they don't exist.
         *
         * @param {...value} var_args
         */
        this.add = function () {
            function addOne(value) {
                if (this.get(value) === undefined) {
                    _length++;
                    _set[value] = value;
                }
            }

            Array.prototype.forEach.call(arguments, function (val) {
                addOne.call(this, val);
            }, this);
            
        };

        /**
         * returns the number of items in the set
         *
         * @returns {number}
         */
        this.size = function () {
            return _length;
        };

        /**
         * Deletes a given element from the set if it exists. Returns true if the element was deleted, returns false if
         * the element was not found in the set.
         *
         * @param element
         */
        this.remove = function (element) {
            if (this.isInSet(element)) {
                delete _set[element];
                _length -= 1;
                return true;
            }
            return false;
        };

        /**
         * For debuging: prints the set out to the console
         */
        this.print = function () {
            console.log(_set);
        };

        /**
         * Converts the set to an array
         *
         * @returns {Array}
         */
        this.toArray = function () {
            var array = [];

            for (var element in _set) {
                if (_set.hasOwnProperty(element))
                    array.push(_set[element])
            }

            return array;
        }
}

Set.prototype.cardinality = function () {
        return this.size();
    };

    /**
     * Returns a boolean checking if the set is empty
     *
     * @returns {boolean}
     */
    Set.prototype.isEmpty = function () {
        return !this.size();
    };

    /**
     * Returns a boolean checking if a given element is in the set
     *
     * @param element
     * @returns {boolean}
     */
    Set.prototype.isInSet = function (element) {
        return this.get(element) !== undefined;
    };

    /**
     * Iterates over the elements in the set using a provided function with optional arguments value, index
     *
     * @param fn - callback to be invoked each iteration, with parameters value and index
     * @param self - this function context for callback
     */
    Set.prototype.iterate = function (fn, self) {
        var set = this.getSet(),
            index = 0;

        for (var element in set) {
            fn.call(self, set[element], index);
            index += 1;
        }
    };

    /**
     * Iterates over the elements in the set using fn callback, if callback is true the function immediately returns true
     * else it returns false. The callback is invoked with value and index parameters.
     *
     * @param fn
     * @param self
     * @returns {boolean}
     */
    Set.prototype.some = function (fn, self) {
        var set = this.getSet(),
            index = 0;

        for (var element in set) {
            if (fn.call(self, set[element], index))
                return true;
            index += 1;
        }

        return false;
    };

    /**
     * Returns the union set between this set and set2
     *
     * @param set2
     * @returns {JsSet}
     */
    Set.prototype.union = function (set2) {
        set2.iterate(function (val) {
            this.add(val);
        }, this);
        return this; //return this to make it chainable
    };

    /**
     * Returns the smaller set between this and set2
     *
     * @param set2
     * @returns {JsSet}
     */
    Set.prototype.getSmallerSet = function (set2) {
        return this.size() <= set2.size() ? this : set2;
    };

    /**
     * Returns the intersection set between this and set2
     *
     * @param set2
     * @returns {Set}
     */
    Set.prototype.intersection = function (set2) {
        //initialize new set to return intersection
        var intersectionSet = new Set(this.hashFunction),
            smallerSet = this.getSmallerSet(set2), //find the smaller set to iterate over
            largerSet = smallerSet === this ? set2 : this;

        smallerSet.iterate(function (val) {
            if (largerSet.isInSet(val)) {
                intersectionSet.add(val);
            }
        });

        return intersectionSet;
    };

    /**
     * Return the difference set between this and set2
     *
     * @param set2
     * @returns {JsSet}
     */
    Set.prototype.difference = function (set2) {
        set2.iterate(function (val) {
            this.remove(val);
        }, this);
        return this; //return this to make it chainable
    };

    /**
     * Checks if subset is subset of this
     *
     * @param subset
     */
    Set.prototype.subset = function (subset) {
        return subset.some(function (val) {
            return this.isInSet(val);
        }, this);
    };

    /**
     *
     * @returns {*}
     */
    Set.prototype.pop = function () {
        var set = this.getSet(),
            keys = Object.keys(set);
        var random = set[keys[Math.floor(Math.random() * keys.length)]];
        this.remove(random);
        return random;
    };

String.prototype.replaceAt = function(index, replacement) {
    return this.substr(0, index) + replacement + this.substr(index + replacement.length);
}
Set.prototype.push = function(value) {
    return this.add(value);
}
Set.prototype.splice = function(value, count) {
    //for()
    return this.remove(value);
}

Object.defineProperty(Array.prototype, 'includes', {
    value: function(searchElement, fromIndex) {

      if (this == null) {
        throw new TypeError('"this" is null or not defined');
      }

      // 1. Let O be ? ToObject(this value).
      var o = Object(this);

      // 2. Let len be ? ToLength(? Get(O, "length")).
      var len = o.length >>> 0;

      // 3. If len is 0, return false.
      if (len === 0) {
        return false;
      }

      // 4. Let n be ? ToInteger(fromIndex).
      //    (If fromIndex is undefined, this step produces the value 0.)
      var n = fromIndex | 0;

      // 5. If n ≥ 0, then
      //  a. Let k be n.
      // 6. Else n < 0,
      //  a. Let k be len + n.
      //  b. If k < 0, let k be 0.
      var k = Math.max(n >= 0 ? n : len - Math.abs(n), 0);

      function sameValueZero(x, y) {
        return x === y || (typeof x === 'number' && typeof y === 'number' && isNaN(x) && isNaN(y));
      }

      // 7. Repeat, while k < len
      while (k < len) {
        // a. Let elementK be the result of ? Get(O, ! ToString(k)).
        // b. If SameValueZero(searchElement, elementK) is true, return true.
        if (sameValueZero(o[k], searchElement)) {
          return true;
        }
        // c. Increase k by 1.
        k++;
      }

      // 8. Return false
      return false;
    }
  });
  
let invertedIDs = {
    itemID: {},
    blockID: {},
    invertIDs: function() {
        for(let item in ItemID) {
            this.itemID[ItemID[item]] = item;
        }
        for(let item in BlockID) {
            this.blockID[BlockID[item]] = item;
        }
    },
    isNumericIDisItemID: function(id) {
        if(this.itemID[id] != null) {
            return true;
        }
        return false;
    },
    isNumericIDisBlockID: function(id) {
        if(this.blockID[id] != null) {
            return true;
        }
        return false;
    },
};



let tileToUpdate = null;
let MetaRenderer = {
  rotationMap: [
    		[3, 2, 0, 1, 4, 5],
				[2, 3, 1, 0, 5, 4],
				[0, 1, 3, 2, 5, 4],
				[0, 1, 2, 3, 4, 5],
				[0, 1, 4, 5, 3, 2],
				[0, 1, 5, 4, 2, 3],
    ],
  getEntityYaw: ModAPI.requireGlobal("Entity.getYaw"),
  getEntityPitch: ModAPI.requireGlobal("Entity.getPitch"),
   invalidateModel: function (coords, texture, rotatedtexture, puts) {
     
     let array = [texture.textures[rotatedtexture[0]], texture.textures[rotatedtexture[1]], texture.textures[rotatedtexture[2]], texture.textures[rotatedtexture[3]], texture.textures[rotatedtexture[4]], texture.textures[rotatedtexture[5]]];
     //Logger.Log(World.getTileEntity(coords.x, coords.y, coords.z).data.put.length, "xenaft");
      /*for(let put in puts) {
        Logger.Log(puts[put], "xen");
      if(puts[put] === null || puts[put] === undefined) continue;
	    puts[put] = [array[puts[put]][0] + "_put", array[puts[put]][1]];
      }*/
    let model = BlockRenderer.createTexturedBlock(array);
    let ic = new ICRender.Model();
    ic.addEntry(model);
    
    BlockRenderer.mapAtCoords(coords.x, coords.y, coords.z, ic);
  },
  rotateBlockWithRotation: function (coords, block, rotation, isFull) {
    this.rotateBlock1WithRotation(coords, block, MachineDictionary.textures[block.id][block.data].arr, rotation, isFull);
  },
  rotateBlock: function (coords, block, isFull) {
    let rotation = this.getBlockRotation(isFull);
    this.rotateBlockWithRotation(coords, block, rotation, isFull);
  },
  rotateBlock1: function (coords, block, texture, isFull) {
    let rotation = this.getBlockRotation(isFull);
    this.rotateBlock1WithRotation(coords, block, texture, rotation, isFull);
  },
  rotateBlock1WithRotation: function (coords, block, texture, rotation, isFull) {
    let array = [texture[this.rotationMap[rotation][0]], texture[this.rotationMap[rotation][1]], texture[this.rotationMap[rotation][2]], texture[this.rotationMap[rotation][3]], texture[this.rotationMap[rotation][4]], texture[this.rotationMap[rotation][5]]];
    if(World.getTileEntity(coords.x, coords.y, coords.z).data.inited) {
      for(let i = 0; i < 6; i++) {
        if(World.getTileEntity(coords.x, coords.y, coords.z).data["put" + i] === null || World.getTileEntity(coords.x, coords.y, coords.z).data["put" + i] === undefined) continue;
      let side = World.getTileEntity(coords.x, coords.y, coords.z).blockRotationToWorldRotation(World.getTileEntity(coords.x, coords.y, coords.z).data["put" + i]);
	    array[side] = [array[side][0] + "_put", array[side][1]];
      }
    } else {
      //tileToUpdate = {coords: coords, rotation: rotation};
    }
    
    let model = BlockRenderer.createTexturedBlock(array);
    let ic = new ICRender.Model();
    ic.addEntry(model);
    BlockRenderer.mapAtCoords(coords.x, coords.y, coords.z, ic);
  },
  getBlockRotation: function(player, isFull) {
		let pitch = this.getEntityPitch(player);

		if(isFull){
			if(pitch < -45) return 0;
			if(pitch > 45) return 1;
		}
		let rotation = Math.floor((this.getEntityYaw(player)-45)%360 / 90);
		if(rotation < 0) rotation += 4;
		rotation = [3, 1, 2, 0][rotation];
		return rotation + 2;
	},
}

Callback.addCallback("DestroyBlock", function(coords, block, player) {
    if(block.id == BlockID.gtblockmechanism) {
      BlockRenderer.unmapAtCoords(coords.x, coords.y, coords.z);
    }
});
Callback.addCallback("LevelLoaded", function() {
    PipeNetBuilder.pipeNets = [];
});

Callback.addCallback("tick", function() {
    PipeNetBuilder.tickPipeNets();
});